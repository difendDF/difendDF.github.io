{
    "version": "https://jsonfeed.org/version/1",
    "title": "永恒绿洲",
    "subtitle": "虽然不容易，只要去做，就能成功",
    "icon": "https://sprenedayf.com/images/favicon.ico",
    "description": "努力学习、生活",
    "home_page_url": "https://sprenedayf.com",
    "items": [
        {
            "id": "https://sprenedayf.com/2022/07/01/learn-and-learn/inter-work/%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%91%A8%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93-%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/",
            "url": "https://sprenedayf.com/2022/07/01/learn-and-learn/inter-work/%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%91%A8%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93-%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/",
            "title": "实习第三周技术总结+心得体会",
            "date_published": "2022-07-01T15:59:33.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>这个周有一点一言难尽，从工作上来说感觉没有产出，从技术上来说感觉没有前两周的收获大而且有些模棱两可，从为人处世上来看感觉自己有点飘了，总结一句话就是：在干嘛？真的很失望...<br />\n<img data-src=\"https://i.imgtg.com/2022/07/02/NDQFM.png\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"非技术方面\"><a class=\"anchor\" href=\"#非技术方面\">#</a> 非技术方面</h1>\n<h2 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h2>\n<ol>\n<li>又开始情绪化了，又开始情绪影响状态了，而且整个周感觉自己很浮躁，没有静下心来去好好的理清楚项目的代码，处于一个非常焦虑的状态，然后一事无成，真是个浪费时间的好手（嘲讽...</li>\n<li>回过头来感觉自己效率有点低了，有时候看了一段代码之后没有及时记录想着先把某个工作做完，然后回过头来就发现好不容易理清楚的套娃忘得差不多了，我可真是个老 6...</li>\n<li>想东想西的毛病又犯了，是最近太放纵了些所以有时间去想这些有的没的？</li>\n</ol>\n<h2 id=\"总结提醒\"><a class=\"anchor\" href=\"#总结提醒\">#</a> 总结提醒</h2>\n<ol>\n<li>焦虑无效，只会浪费时间，请耐心，踏踏实实做好眼前的事就好，想乱七八糟的一点用都没有🙏 专注当下！</li>\n<li>沉下心去整理总结，希望下个周可以看到自己理解的架构图或调用分析或架构层面的技术文档</li>\n<li>别飘别飘别飘，保持冷静，算我求我自己</li>\n</ol>\n<h1 id=\"技术方面\"><a class=\"anchor\" href=\"#技术方面\">#</a> 技术方面</h1>\n<p>其实说没有收获是假的，但是因为总感觉差点什么也没有弄得特别清楚，所以也不太好意思摆在台面上来分享，这边简单的说一下。</p>\n<h2 id=\"项目架构方面\"><a class=\"anchor\" href=\"#项目架构方面\">#</a> 项目架构方面</h2>\n<p>前端项目和后端项目其实都一样，抽象出公共部分通过参数的不同来实现不同的功能，那之前我 mentor 有跟我说因为<strong>一个平台可能有多个不同的 team 来协同 code，那么怎么可以及时的引用到其他 team release 出去的公共 component 呢</strong>？<br />\nok，如果是实验室的工作的话，我们可能就是把公共部分的代码 push 上去，然后大家一起调用那个公共组件就可以了，但是这是在一个 repos 里面的，如果说要引用其他 repos 的组件怎么办？如果是后端的话，就是发送 rpc 请求像调用本地方法一样的调用远程方法，当然这部分我没有实践过，还没有接触过版本控制相关的东西。<br />\n我现在接触的这个前端工程，他们<em>把平台的公共配置和组件都放在了一个叫 SharedUI 的 repos 中，然后权限相关的配置放在了 App 的 repos 中，然后项目的页面就统一写在了 CampaignUI 这个 repos 中</em>。这种感觉就很像是后端中的统一配置管理，我们都知道后端代码多了之后我们需要在 <code>application.yml</code>  中配置很多内容，然后当我们需要修改某个配置的时候要去 code 中去修改，再重新部署，这很烦，所以就有了统一配置管理，比较常使用的就是 <code>Nacos</code> ，我们在 <code>Nacos</code>  中统一管理我们所有后台模块的 yml 配置文件，修改之后立即生效。前端工程中可能没有这样的统一配置管理概念，至少在我接触的这个系统架构上来看的话是通过引入其他 repos 打包好的包来完成引入的，三个项目之间的关系大概是下图所示：<br />\n<img data-src=\"https://i.imgtg.com/2022/07/02/NHwbG.png\" alt=\"\" height=\"350px\" /><br />\n流程用文字描述一下就是：在 App 中加入新项目的 pilot 相关配置（相当于是有多少的用户可以看到新的 page，在线上 SI 环境中要带什么 URL 参数才能访问到新 page 等），在 SharedUI 中将新 page 的 Route 配置好并更新 package 的版本，推送之后会有一个 pipeline 来自动更新所有引用到这个 package 的版本号进行更新 (yarn.lock)，这样所有引用到这个 component 的 repos 就可以自动引入最新版本的 code 然后完成升级。<br />\n当然这是线上环境，我们如果在本地修改了 SharedUI 中的 Common Component 怎么调试呢？</p>\n<h3 id=\"node_modules\"><a class=\"anchor\" href=\"#node_modules\">#</a> node_modules</h3>\n<p>我们的 node 项目使用 npm 或 yarn 来进行统一的 package 管理，下载下来的 package 就放在了 node_modules 下面，然后我们就可以在项目中用 <code>require(&quot;packagename&quot;)</code>  加载使用了。那么现在我们要让本地修改可以立即生效，就可以让我们在 SharedUI 中打包完成的 package 能够 link 到 CampaignUI 下面，这样每次做修改就可以立即生效了不是？</p>\n<h3 id=\"symlink\"><a class=\"anchor\" href=\"#symlink\">#</a> symlink</h3>\n<p>这边用到的将 SharedUI 中修改可以 link 到 CampaignUI 中的命令是 <code>gulp symlinkdebug</code> ，gulp 就是一个工具包，用来开发一些自动化的任务，可以自己写一些 workflow 来帮我们简化命令行的输入调试等，当然这部分他么怎么写的这些 workflow 我还不知道也没时间看，但是个人感觉应该就和 Argo 的 workflow 编排差不多，或者说如果我写一个 shell 脚本应该也能完成同样的工作吧？<br />\nsymlink 我倒是第一次听说，查了一下发现出来最多的是 Linux 下的软连接和硬链接。大概就是说创建了一个类似于快捷方式的东西，可以理解成 code 中的那种占位符，你可以通过 link 到不同的目录来实现不需要修改 code 就能调用不同的 function。那我们项目里面用到这个其实就是说把 CampaignUI repos 中的依赖 link 到了 SharedUI 的 packages 中，这样我们每次 build 打包之后就做了修改，然后就可以直接在本地的 debug 环境中测试我们的修改了。<br />\n这个东西有点妙哈哈，但是其实这个流程还是很好懂的～<br />\n<img data-src=\"https://i.imgtg.com/2022/07/02/NLW4l.png\" alt=\"\" height=\"150px\" /></p>\n<h2 id=\"扩展操作符\"><a class=\"anchor\" href=\"#扩展操作符\">#</a> 扩展操作符 ...</h2>\n<p>在说技术之前我想说：我是真的菜，我菜的都让我觉得我 mentor 她们脾气是有多好没把我开了...<br />\n<img data-src=\"https://i.imgtg.com/2022/07/02/NL1SN.png\" alt=\"\" height=\"100px\" /><br />\n 关于 ES6 相关的东西，我当年还买了本书看了看，哈哈，全忘了，想抽自己两巴掌。 <code>...</code>  就是 ES6 中的扩展操作符，用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。然后特别注意，这是个<strong>浅拷贝</strong>方法。</p>\n<h3 id=\"深拷贝与浅拷贝\"><a class=\"anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h3>\n<ul>\n<li><strong>浅拷贝（shallow copy）</strong>：只复制指向某个对象的指针，而不复制对象本身，新旧对象共享一块内存。</li>\n<li><strong>深拷贝（deep copy）</strong>：复制并创建一个一模一样的对象，不共享内存，修改新对象，旧对象保持不变。</li>\n</ul>\n<h3 id=\"浅拷贝的实现\"><a class=\"anchor\" href=\"#浅拷贝的实现\">#</a> 浅拷贝的实现</h3>\n<h4 id=\"扩展操作符-2\"><a class=\"anchor\" href=\"#扩展操作符-2\">#</a> 扩展操作符</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>bar <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; a: 1, b: 2 &#125;</span></pre></td></tr></table></figure><h4 id=\"objectassign目标obj当前obj\"><a class=\"anchor\" href=\"#objectassign目标obj当前obj\">#</a> Object.assign (目标 obj，当前 obj)</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">m</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;x: 1, y: &#123;m: 1&#125;&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;x: 1, y: &#123;m: 1&#125;&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>obj2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改 obj2.y.m</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;x: 1, y: &#123;m: 2&#125;&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;x: 2, y: &#123;m: 2&#125;&#125;</span></pre></td></tr></table></figure><h3 id=\"深拷贝的实现\"><a class=\"anchor\" href=\"#深拷贝的实现\">#</a> 深拷贝的实现</h3>\n<h4 id=\"jsonparse与jsonstringify\"><a class=\"anchor\" href=\"#jsonparse与jsonstringify\">#</a> JSON.parse () 与 JSON.stringify ()</h4>\n<p>可实现多维对象的深拷贝，但<strong>会忽略 undefined、任意的函数、symbol 值</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">m</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;x: 1, y: &#123;m: 1&#125;, a: undefined, b: ƒ, c: Symbol(foo)&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;x: 1, y: &#123;m: 1&#125;&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>obj2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改 obj2.y.m</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;x: 1, y: &#123;m: 1&#125;, a: undefined, b: ƒ, c: Symbol(foo)&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;x: 2, y: &#123;m: 2&#125;&#125;</span></pre></td></tr></table></figure><h3 id=\"自己写递归\"><a class=\"anchor\" href=\"#自己写递归\">#</a> 自己写递归</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后的返回结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> _parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 防止循环引用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>_parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_parent<span class=\"token punctuation\">.</span>originalParent <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> _parent<span class=\"token punctuation\">.</span>currentParent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    _parent <span class=\"token operator\">=</span> _parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回引用数据类型 (null 已被判断条件排除))</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// RegExp 类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>flags<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Date 类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Array 类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Object 类型，继承原型链</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Array 类型 与 Object 类型 的深拷贝</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token literal-property property\">originalParent</span><span class=\"token operator\">:</span> obj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              <span class=\"token literal-property property\">currentParent</span><span class=\"token operator\">:</span> result<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              <span class=\"token literal-property property\">parent</span><span class=\"token operator\">:</span> parent</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回基本数据类型与 Function 类型，因为 Function 不需要深拷贝</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> obj</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 调试用</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>e <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">abc</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>j <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>construct<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm prototype\"</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>obj1<span class=\"token punctuation\">.</span>k <span class=\"token operator\">=</span> obj1</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>obj2 <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>obj2<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">999</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>obj2<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"使用jquery的extend方法\"><a class=\"anchor\" href=\"#使用jquery的extend方法\">#</a> 使用 jQuery 的 extend 方法</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>deep <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> object1 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> objectN <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>deep：表示是否深拷贝，true，为深拷贝；false，为浅拷贝。</li>\n<li>target：Object 类型 目标对象，其他对象的成员属性将被附加到该对象上。</li>\n<li>object1： objectN 可选。 Object 类型 第一个以及第 N 个被合并的对象。</li>\n</ul>\n<h3 id=\"一点骚操作\"><a class=\"anchor\" href=\"#一点骚操作\">#</a> 一点骚操作</h3>\n<h4 id=\"传递任意多个参数\"><a class=\"anchor\" href=\"#传递任意多个参数\">#</a> 传递任意多个参数</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//arguments 伪数组会默认接收到所有参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tsum <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* 下面的两个操作是等价的 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//217</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//217</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 不只如此，还可以这样使用，传入更多参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//220</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//274</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//243</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values<span class=\"token punctuation\">,</span> lastvalue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 这样声明会报错，因为显然 lastvalue 接收不到任何参数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getsum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstvalue<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 这样是可以的</span></pre></td></tr></table></figure><h2 id=\"下周希冀\"><a class=\"anchor\" href=\"#下周希冀\">#</a> 下周希冀</h2>\n<p>1. 其实我蛮想知道这个技术的迭代过程的，如果可以的话可以问问？<br />\n2. 在 SharedUI 中的修改解析上其实还是有很多不懂的地方，而且他们这个项目我是真的不知道为什么要这么套娃... 希望自己下个周可以出一版详细一点的 call 流程图<br />\n 3. 希望可以把自己做的这部分功能的封装思路以及调用思路画了个图说明一下，然后问问题再更加有条理一些</p>\n",
            "tags": [
                "学习不止",
                "实习",
                "架构",
                "symlink"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/06/24/learn-and-learn/inter-work/%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/",
            "url": "https://sprenedayf.com/2022/06/24/learn-and-learn/inter-work/%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/",
            "title": "实习第二周技术总结",
            "date_published": "2022-06-24T14:34:06.000Z",
            "content_html": "<h1 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> Git</h1>\n<p>在实验室开发项目的时候根本就没什么分支管理，说是用了 git，但是其实就是当一个远程仓库来使用，大家一股脑的往 master 分支上提交，产生冲突的时候还要把代码给一个人改了然后统一提交（真的蠢哭了），然后这个周实习的时候有幸提交了下代码，感觉对 git 的操作有了真实感？记录下记录下，感恩戴德！<br />\n<img data-src=\"https://i.imgtg.com/2022/06/21/7g01K.png\" alt=\"\" height=\"150px\" /></p>\n<h2 id=\"状态\"><a class=\"anchor\" href=\"#状态\">#</a> 状态</h2>\n<p>Git 有三种状态：<strong>已提交（committed）、已修改（modified） 和 已暂存（staged）</strong>。</p>\n<ul>\n<li>已修改表示修改了⽂件，但还没保存到数据库中。</li>\n<li>已暂存表示对⼀个已修改⽂件的当前版本做了标记，使之包含在下次提交的快照中。</li>\n<li>已提交表示数据已经安全地保存在本地数据库中。<br />\n<img data-src=\"https://i.imgtg.com/2022/06/21/7gYpC.png\" alt=\"\" /><br />\n简单说下其实就是如果你这个文件之前提交记录里从来没有出现过（相当于是新建的一个文件）那就是 <code>Untracked</code> ，如果说这个文件之前提交记录里有那就是 <code>Unmodified</code> ，如果你对一个文件做了修改那就变成 <code>Modified</code> ，利用 <code>git add</code>  命令就可以将文件暂存成为 <code>Staged</code>  状态。</li>\n</ul>\n<h3 id=\"状态相关命令\"><a class=\"anchor\" href=\"#状态相关命令\">#</a> 状态相关命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> status  <span class=\"token comment\"># 显示文件状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  On branch master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Your branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Changes to be committed:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      new file:   README</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Changes not staged <span class=\"token keyword\">for</span> commit:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to update what will be committed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file>...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      modified:   CONTRIBUTING.md</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>$ <span class=\"token function\">git</span> status -s</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 两栏，左栏指明暂存区状态，右栏指明工作区状态</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> M README</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> MM Rakefile</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> A  lib/git.rb</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> M  lib/simplegit.rb</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> ?? LICENSE.txt  <span class=\"token comment\"># Untracked</span></pre></td></tr></table></figure><h2 id=\"目录结构\"><a class=\"anchor\" href=\"#目录结构\">#</a> 目录结构</h2>\n<p>新初始化的.git 目录典型结构如下：<br />\n<img data-src=\"https://i.imgtg.com/2022/06/21/7g9Bi.png\" alt=\"\" height=\"350px\" /><br />\n其中四个条⽬很重要：HEAD ⽂件、（尚待创建的）index ⽂件，和 objects ⽬录、refs ⽬录。 它们是 Git 的核⼼组成部分：</p>\n<ul>\n<li>objects ⽬录存储所有数据内容；</li>\n<li>refs ⽬录存储指向数据（分⽀、远程仓库和标签等）的提交对象的指针；</li>\n<li>HEAD ⽂件指向⽬前被检出的分⽀；</li>\n<li>index ⽂件保存暂存区信息。</li>\n</ul>\n<h2 id=\"撤销操作\"><a class=\"anchor\" href=\"#撤销操作\">#</a> 撤销操作</h2>\n<h3 id=\"补充提交\"><a class=\"anchor\" href=\"#补充提交\">#</a> 补充提交</h3>\n<p>今天提交的时候其实就是因为我不怎么会用 git 导致其实本来应该是一个 commit 的我连着提交了三次... 那比如说像这样我们在提交完了之后发现漏了几个文件没有添加或提交信息写错了怎么办？ <code>--amend</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">'initial commit'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> forgotten_file</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> commit --amend</pre></td></tr></table></figure><p>这样就会只有一个提交啦～</p>\n<h3 id=\"取消暂存的文件\"><a class=\"anchor\" href=\"#取消暂存的文件\">#</a> 取消暂存的文件</h3>\n<p>场景：比如把两个文件都暂存了，但是其实我只想要暂存提交一个，这时候怎么撤销掉另一个暂存文件呢？ <code>git reset HEAD</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  On branch master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Changes to be committed:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      renamed:    README.md -<span class=\"token operator\">></span> README</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      modified:   CONTRIBUTING.md</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ <span class=\"token function\">git</span> reset HEAD CONTRIBUTING.md</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Unstaged changes after reset:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  M\tCONTRIBUTING.md</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>$ <span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  On branch master</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  Changes to be committed:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      renamed:    README.md -<span class=\"token operator\">></span> README</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  Changes not staged <span class=\"token keyword\">for</span> commit:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to update what will be committed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file>...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      modified:   CONTRIBUTING.md</pre></td></tr></table></figure><h3 id=\"取消对文件的修改\"><a class=\"anchor\" href=\"#取消对文件的修改\">#</a> 取消对文件的修改</h3>\n<p>如果说我对一个文件修改了以后，这份文件里的修改我都不想要了怎么办？ <code>git checkout -- 文件名</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> checkout -- CONTRIBUTING.md</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  On branch master</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Changes to be committed:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      renamed:    README.md -<span class=\"token operator\">></span> README</pre></td></tr></table></figure><h2 id=\"远程仓库\"><a class=\"anchor\" href=\"#远程仓库\">#</a> 远程仓库</h2>\n<h3 id=\"查看远程仓库\"><a class=\"anchor\" href=\"#查看远程仓库\">#</a> 查看远程仓库</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote -v</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  origin\thttps://github.com/schacon/ticgit <span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  origin\thttps://github.com/schacon/ticgit <span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"添加远程仓库\"><a class=\"anchor\" href=\"#添加远程仓库\">#</a> 添加远程仓库</h3>\n<p><code>git remote add &lt;shortname&gt; &lt;url&gt;</code>  添加一个新的远程 Git 仓库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  origin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> pb https://github.com/paulboone/ticgit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">git</span> remote -v</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  origin\thttps://github.com/schacon/ticgit <span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  origin\thttps://github.com/schacon/ticgit <span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  pb\thttps://github.com/paulboone/ticgit <span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  pb\thttps://github.com/paulboone/ticgit <span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后以后操作的时候就可以用 pb 来代替整个 URL 了：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> fetch pb</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  remote: Counting objects: <span class=\"token number\">43</span>, done.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  remote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">36</span>/36<span class=\"token punctuation\">)</span>, done.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  remote: Total <span class=\"token number\">43</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">31</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Unpacking objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">43</span>/43<span class=\"token punctuation\">)</span>, done.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  From https://github.com/paulboone/ticgit</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   * <span class=\"token punctuation\">[</span>new branch<span class=\"token punctuation\">]</span>      master     -<span class=\"token operator\">></span> pb/master</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   * <span class=\"token punctuation\">[</span>new branch<span class=\"token punctuation\">]</span>      ticgit     -<span class=\"token operator\">></span> pb/ticgit</pre></td></tr></table></figure><h3 id=\"从远程仓库拉取\"><a class=\"anchor\" href=\"#从远程仓库拉取\">#</a> 从远程仓库拉取</h3>\n<p><code>git fetch &lt;remote&gt;</code>  命令会访问远程仓库，从中拉取所有还没有的数据。如果你使用  <code>clone</code>  命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以  <code>origin</code>  为简写。注意  <code>git fetch</code>  命令只会将数据下载到你的本地仓库 —— 它并不会自动合并或修改当前的工作。如果当前分支设置了跟踪远程分支，那么可以用  <code>git pull</code>  命令来自动抓取后合并该远程分支到当前分支。默认情况下， <code>git clone</code>  命令会自动设置本地 master 分支跟踪克隆的远程仓库的  <code>master</code>  分支（或其它名字的默认分支）。 运行  <code>git pull</code>  通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p>\n<h3 id=\"推送到远程仓库\"><a class=\"anchor\" href=\"#推送到远程仓库\">#</a> 推送到远程仓库</h3>\n<p>使用 <code>git push &lt;remote&gt; &lt;branch&gt;</code> ，比如想要把 master 分支推送到 origin 服务时就可以: <code>git push origin master</code></p>\n<h3 id=\"查看某个远程仓库\"><a class=\"anchor\" href=\"#查看某个远程仓库\">#</a> 查看某个远程仓库</h3>\n<p><code>git remote show &lt;remote&gt;</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote show origin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  * remote origin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Fetch URL: https://github.com/schacon/ticgit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Push  URL: https://github.com/schacon/ticgit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    HEAD branch: master</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Remote branches:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      master                               tracked</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      dev-branch                           tracked</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Local branch configured <span class=\"token keyword\">for</span> <span class=\"token string\">'git pull'</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      master merges with remote master</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Local ref configured <span class=\"token keyword\">for</span> <span class=\"token string\">'git push'</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      master pushes to master <span class=\"token punctuation\">(</span>up to <span class=\"token function\">date</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"远程仓库的重命名与移除\"><a class=\"anchor\" href=\"#远程仓库的重命名与移除\">#</a> 远程仓库的重命名与移除</h3>\n<p>运行  <code>git remote rename</code>  来修改一个远程仓库的简写名</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token function\">rename</span> pb paul</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> remote</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>origin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>paul</pre></td></tr></table></figure><p>那些过去引用 pb/master 的现在会引用 paul/master<br />\n 使用  <code>git remote remove</code>  或  <code>git remote rm</code>  移除一个远程仓库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote remove paul</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> remote</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>origin</pre></td></tr></table></figure><h2 id=\"分支\"><a class=\"anchor\" href=\"#分支\">#</a> 分支</h2>\n<h3 id=\"分支新建与合并\"><a class=\"anchor\" href=\"#分支新建与合并\">#</a> 分支新建与合并</h3>\n<p>这部分主要利用了以下几个命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token operator\">&lt;</span>new branch name<span class=\"token operator\">></span>  <span class=\"token comment\"># 新建分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>new branch name<span class=\"token operator\">></span>  <span class=\"token comment\"># 切换到新的分支</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 上面命令可以直接合成下面这一条</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> checkout -b <span class=\"token operator\">&lt;</span>new branch name<span class=\"token operator\">></span>  <span class=\"token comment\"># 新建分支并切换到该分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> branck -d <span class=\"token operator\">&lt;</span>branch name<span class=\"token operator\">></span>  <span class=\"token comment\"># 删除一个分支</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> merge <span class=\"token operator\">&lt;</span>branch name<span class=\"token operator\">></span>  <span class=\"token comment\"># 将 & lt;branch name > 分支的内容合并到当前分支上</span></pre></td></tr></table></figure><p>Ok 现在开始说一下场景：项目有一个主分支是 master，然后你在开发一个新的功能是在分支 iss53 上进行，开发过程中说主分支上有个 bug 需要修复，此时需要切回主分支并创建一个 hotfix 的分支来修复问题，修复完成后上线并回到 iss53 上继续开发，开发完成后合并到主分支上结束。下面开始:</p>\n<ol>\n<li>开一个新的 iss53 分支来开发新的功能</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> checkout -b iss53</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">vim</span> index.html</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">git</span> commit -a -m <span class=\"token string\">'added a new footer [issue 53]'</span>  <span class=\"token comment\"># -a 是因为懒得 git add 然后直接把现在的更改都 add commit</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>出问题了，我现在要去修复 bug 了<br />\n现在我们需要切换回 master 分支上，在此之前我们要留意工作目录和暂存区里那些还没有被提交的修改，现在，假设已经把 iss53 分支上的修改全部提交了，然后切回 master 分支，并创建一个新的分支 hotfix 来修复 bug</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> checkout master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Switched to branch <span class=\"token string\">'master'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">git</span> checkout -b hotfix</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Switched to a new branch <span class=\"token string\">'hotfix'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ <span class=\"token function\">vim</span> index.html</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ <span class=\"token function\">git</span> commit -a -m <span class=\"token string\">'fixed the broken email address'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">[</span>hotfix 1fb7853<span class=\"token punctuation\">]</span> fixed the broken email address</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">2</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后我们现在的 git tree 应该是这样的<br />\n<img data-src=\"https://i.imgtg.com/2022/06/22/74hTS.png\" alt=\"\" height=\"450px\" /><br />\n 3. 修复 bug 都通过测试以后，我们需要把 hotfix 分支的修改合并到主分支上</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> checkout master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> merge hotfix</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Updating f42c576<span class=\"token punctuation\">..</span>3a0874c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Fast-forward</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   index.html <span class=\"token operator\">|</span> <span class=\"token number\">2</span> ++</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">2</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当你试图合并两个分支时， 如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候， 只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧 —— 这就叫做 <strong>快进（fast-forward）</strong>。这些操作过后我们的 git tree 是这样的：<br />\n<img data-src=\"https://i.imgtg.com/2022/06/22/74rut.png\" alt=\"\" height=\"450px\" /><br />\n4. 删除 hotfix 分支<br />\n因为我们已经将 hotfix 分支合并了，所以现在这个分支就可以不要了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> branch -d hotfix</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Deleted branch hotfix <span class=\"token punctuation\">(</span>3a0874c<span class=\"token punctuation\">)</span>.</pre></td></tr></table></figure><ol start=\"5\">\n<li>回到 iss53 分支继续开发功能</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> branch iss53</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Switched to branch <span class=\"token string\">\"iss53\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">vim</span> index.html</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">git</span> commit -a -m <span class=\"token string\">'finished the new footer [issue 53]'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>iss53 ad82d7a<span class=\"token punctuation\">]</span> finished the new footer <span class=\"token punctuation\">[</span>issue <span class=\"token number\">53</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">1</span> insertion<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后我们现在的 git tree 是这样的：<br />\n<img data-src=\"https://i.imgtg.com/2022/06/22/74KFx.png\" alt=\"\" height=\"450px\" /><br />\n6. 将 iss53 分支的内容合并到 master 分支上</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> checkout master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Switched to branch <span class=\"token string\">'master'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">git</span> merge iss53</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Merge made by the <span class=\"token string\">'recursive'</span> strategy.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  index.html <span class=\"token operator\">|</span>    <span class=\"token number\">1</span> +</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">1</span> insertion<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>删除 iss53 分支</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> branch -d iss53</pre></td></tr></table></figure><h3 id=\"遇到冲突的分支合并\"><a class=\"anchor\" href=\"#遇到冲突的分支合并\">#</a> 遇到冲突的分支合并</h3>\n<p>如果两个分支对一个文件的同一处做了修改，那么在合并的时候就会产生冲突:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> merge iss53</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Auto-merging index.html</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  CONFLICT <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>: Merge conflict <span class=\"token keyword\">in</span> index.html</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Automatic merge failed<span class=\"token punctuation\">;</span> fix conflicts and <span class=\"token keyword\">then</span> commit the result.</pre></td></tr></table></figure><p>在合并冲突后的任意时刻使用  <code>git status</code>  命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  On branch master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  You have unmerged paths.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">(</span>fix conflicts and run <span class=\"token string\">\"git commit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Unmerged paths:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to mark resolution<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      both modified:      index.html</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  no changes added to commit <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> and/or <span class=\"token string\">\"git commit -a\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Git 会在有冲突的文件中加入标准的冲突解决标记，这样可以打开这些包含冲突的文件然后手动解决冲突。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;div id=\"footer\">contact : email.support@github.com&lt;/div></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>=======</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;div id=\"footer\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> please contact us at support@github.com</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>>>>>>>> iss53:index.html</pre></td></tr></table></figure><p>为了解决冲突，必须选择使用由 ======= 分割的两部分中的一个，或者也可以自行合并这些内容。上述的冲突解决方案仅保留了其中一个分支的修改，并且 &lt;&lt;&lt;&lt;&lt;&lt;&lt;, ======= , 和&gt;&gt;&gt;&gt;&gt;&gt;&gt; 这些行被完全删除了。 在解决了所有文件里的冲突之后，对每个文件使用  <code>git add</code>  命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。<br />\n这时候我们再 commit 提交就会有默认的提交信息：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Merge branch <span class=\"token string\">'iss53'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Conflicts:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    index.html</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># It looks like you may be committing a merge.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># If this is not correct, please remove the file</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#\t.git/MERGE_HEAD</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># and try again.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># Please enter the commit message for your changes. Lines starting</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># On branch master</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># All conflicts fixed but you are still merging.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Changes to be committed:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#\tmodified:   index.html</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr></table></figure><h3 id=\"分支管理\"><a class=\"anchor\" href=\"#分支管理\">#</a> 分支管理</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> branch  <span class=\"token comment\"># 得到本地分支列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    iss53</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  * master</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    testing</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ <span class=\"token function\">git</span> branch -v  <span class=\"token comment\"># 查看每一个分支的最后一次提交</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    iss53   93b412c fix javascript issue</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * master  7a98805 Merge branch <span class=\"token string\">'iss53'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    testing 782fd34 <span class=\"token function\">add</span> scott to the author list <span class=\"token keyword\">in</span> the readmes</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ <span class=\"token function\">git</span> branch --merged  <span class=\"token comment\"># 查看哪些分支已经合并到当前分支，这里面没有 * 的分支就可以利用 git branch -d 删除了</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    iss53</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * master</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>$ <span class=\"token function\">git</span> branch --no-merged  <span class=\"token comment\"># 查看所有包含未合并工作的分支，这里面的分支如果删除会失败但是可以使用 - D 强制删除</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    testing</pre></td></tr></table></figure><h3 id=\"变基\"><a class=\"anchor\" href=\"#变基\">#</a> 变基</h3>\n<p>使用  <code>rebase</code>  命令将提交到某一分支上的所有修改都移至另一分支上，就好像 “重新播放” 一样。原理是首先找到两个分支的最近共同祖先，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底，最后以此将之前另存为临时文件的修改依序应用。</p>\n<p>暂时还没用到，我快困死了，有时间再补充<br />\n<img data-src=\"https://i.imgtg.com/2022/06/24/79h4I.png\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"css选择器\"><a class=\"anchor\" href=\"#css选择器\">#</a> CSS 选择器</h1>\n<p>浅介绍一下 CSS 选择器吧，没想到我 debug 了半天，竟然是栽在了这里，麻了！<br />\n<img data-src=\"https://i.imgtg.com/2022/06/24/79S8p.png\" alt=\"\" height=\"150px\" /><br />\n可以将 CSS 选择器分为五类：</p>\n<ul>\n<li>简单选择器（根据名称、id、类来选取元素）</li>\n<li>组合器选择器（根据它们之间的特定关系来选取元素）</li>\n<li>伪类选择器（根据特定状态选取元素）</li>\n<li>伪元素选择器（选取元素的一部分并设置其样式）</li>\n<li>属性选择器（根据属性或属性值来选取元素）<br />\n（其实当年也看过这些，但是后来写后端了，对前端也就是能看就行了）<br />\n<img data-src=\"https://i.imgtg.com/2022/06/24/79jMM.png\" alt=\"\" /><br />\n<img data-src=\"https://i.imgtg.com/2022/06/24/7jxBC.png\" alt=\"\" /><br />\n然后我问过我 mentor 一个特别蠢的问题，因为我不知道原来类选择器可以和元素选择器一起用.... 比如:  <code>i.class-name</code>  就是选择类为 class-name 的 i 标签.....</li>\n</ul>\n<p><s>（我说，你们前端要记的东西真多...</s><br />\n<img data-src=\"https://i.imgtg.com/2022/06/24/7jPu1.png\" alt=\"\" height=\"100px\" /></p>\n",
            "tags": [
                "学习不止",
                "实习",
                "Git",
                "CSS"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/06/19/learn-and-learn/inter-work/%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/",
            "url": "https://sprenedayf.com/2022/06/19/learn-and-learn/inter-work/%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/",
            "title": "实习第一周技术总结",
            "date_published": "2022-06-18T16:07:31.000Z",
            "content_html": "<h1 id=\"技术细节\"><a class=\"anchor\" href=\"#技术细节\">#</a> 技术细节</h1>\n<h2 id=\"关于nodejs-npm与yarn\"><a class=\"anchor\" href=\"#关于nodejs-npm与yarn\">#</a> 关于 Nodejs、npm 与 yarn</h2>\n<h3 id=\"nodejs简介\"><a class=\"anchor\" href=\"#nodejs简介\">#</a> Nodejs 简介</h3>\n<p>之前在实验室搞过一个月的纯前端 <s>(但是为什么我主要工作还是写后台接口啊喂)</s>，当时配置环境要准备 Nodejs, 我还以为是和 Java 的 JDK 是一样的，就一个环境等我牛起来了再看也行。这边简单介绍下：<strong>Node.js 就是运行在服务端的 JavaScript，利用 JavaScript 在服务端进行编程</strong>。之前 javascript 代码只能在浏览器上跑起来，但是有了 Nodejs 之后 javascript 也能写后端代码了，前后端通吃了就问你强不强！Nodejs 把 chrome V8 引擎移植到自己的环境当中，让 javascript 代码多了一个运行环境，也就是说<em>其实 Web 前端的 JS 代码最终还是运行在浏览器中的，prod 环境下是不依赖于 Nodejs 的</em>。<br />\n那为什么 Vuejs、React、Angular 开发要配置 Nodejs 环境呢？这就需要提到 Nodejs 中我们经常用到的 npm 了，这东西我的理解就和 Java 开发中的 Maven 和 Gradle 一样，我们在部署的时候也不需要在服务器上 install maven 吧？<strong>其实就是在开发的过程中让它帮我们进行一下包管理</strong>，到时候会帮我们打包成可执行文件，然后给浏览器运行。</p>\n<h3 id=\"npm与yarn\"><a class=\"anchor\" href=\"#npm与yarn\">#</a> npm 与 yarn</h3>\n<p>首先我们要知道 npm 与 yarn 都是用来管理我们的依赖包的，然后分别简要说一下。</p>\n<h4 id=\"npm\"><a class=\"anchor\" href=\"#npm\">#</a> npm</h4>\n<p>npm 是 Nodejs 官方提供的包管理工具，用于 Nodejs 包的发布、传播、依赖控制，使你可以方便的下载、安装、升级、删除包。</p>\n<h5 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h5>\n<ol>\n<li>安装包<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g 包名称（全局安装）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">npm</span> install包名称（本地安装）</pre></td></tr></table></figure></li>\n<li>安装包时指定版本<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g 包名称@版本号</pre></td></tr></table></figure></li>\n<li>卸载包<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> uninstall -g 包名</pre></td></tr></table></figure></li>\n<li>更新包<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> update -g 包名称</pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h5>\n<p>分为 <strong>开发环境</strong> 和 <strong>生产环境</strong></p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>npm inistall</td>\n<td>1. 安装模块到项目 node_modules 目录下 &lt;br/&gt;2. 不会将模块依赖写入 DevDependencies 或者 dependencies 节点。&lt;br/&gt;3. 运行 npm install 初始化项目时不会下载模块。</td>\n</tr>\n<tr>\n<td>npm inistall -g</td>\n<td>1. 安装模块到目录 node_modules 目录下 &lt;br/&gt;2、. 并在 package.json 文件的 dependencies 中写入依赖，简写为 - S（从开发到上线都需要用到的包）。&lt;br/&gt;3. 运行 npm install 初始化项目时，会将模块下载到项目目录下 &lt; br/&gt;4. 运行 npm install --production 或者注明 NODE_ENV 变量值为 production 时，会自动下载模块大 node_modules 目录中 (生产环境)。</td>\n</tr>\n<tr>\n<td>npm inistall --save-dev</td>\n<td>1. 安装模块到目录 node_modules 目录下 &lt;br/&gt;2. 并在 package.json 文件的 devDependencies 中写入依赖，简写为 - D（工具包，上线时不需要使用）&lt;br/&gt;3. 运行 npm install 初始化项目时，会将模块下载到项目目录下 &lt; br/&gt;4. 运行 npm install --production 或者注明 NODE_ENV 变量值为 production 时，不会自动下载模块大 node_modules 目录中 (开发环境)</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"缺陷\"><a class=\"anchor\" href=\"#缺陷\">#</a> 缺陷</h5>\n<ol>\n<li>下载速度慢<br />\n npm 2 会安装每一个包所依赖的所有依赖项，有一个项目，A 依赖 B，B 依赖 C，依赖树如下：</li>\n</ol>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_modules</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- package-A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-- node_modules</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--- package-B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>----- node_modules</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>------ package-C</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-------- some-really-really-really-long-file-name-in-package-c.js</pre></td></tr></table></figure><p>npm 3 采用了扁平依赖关系树来解决这个问题，所以我们的 3 个项目结构现在看起来如下所示：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_modules</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- package-A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>- package-B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>- package-C</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-- some-file-name-in-package-c.js</pre></td></tr></table></figure><p>这种方法的缺点是，npm 必须首先遍历所有的项目依赖关系，然后再决定如何生成扁平的 node_modules 目录结构。npm 必须为所有使用到的模块构建一个完整的依赖关系树，这是一个耗时的操作，是 npm 安装速度慢的一个很重要的原因。</p>\n<ol start=\"2\">\n<li>由于版本号的影响，所以会造成版本不统一的情况</li>\n</ol>\n<div class=\"note default no-icon\">\n<p>npm 是围绕着语义版本控制的思想而设计的<br />\n给定一个版本号：主版本号。次版本号。补丁版本号<br />\n<strong>主版本号</strong>： 当 API 发生改变，并与之前的版本不兼容的时候<br />\n<strong>次版本号</strong>： 当增加了功能，但是向后兼容的时候<br />\n<strong>补丁版本号</strong>： 当做了向后兼容的缺陷修复的时候</p>\n</div>\n<p>同一个项目，安装的时候无法保持一致性。由于 package.json 文件中版本号的特点，下面三个版本号在安装的时候代表不同的含义:</p>\n<ul>\n<li>&quot;5.0.3&quot;, // 安装指定的 5.0.3 版本</li>\n<li>&quot;~5.0.3&quot;, // 安装 5.0.X 中最新的版本</li>\n<li>&quot;^5.0.3&quot; // 安装 5.X.X 中最新的版本</li>\n</ul>\n<ol start=\"3\">\n<li>由于 npm 库存在嵌套依赖的关系，会增加无法匹配相应版本的概率</li>\n</ol>\n<h4 id=\"yarn\"><a class=\"anchor\" href=\"#yarn\">#</a> yarn</h4>\n<p>yarn 是由 Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，是为了弥补 npm 的一些缺陷而出现的，在 node_modules 目录结构跟 npm 一致，而且安装速度很快。<br />\n既然提到说 yarn 是为了解决 npm 的缺陷提出来的，那就说说 yarn 的优点：</p>\n<ol>\n<li>离线模式<br />\n如果你以前安装过某个包，再次安装时可以在没有任何互联网连接的情况下进行</li>\n<li>安装版本统一<br />\n yarn 有锁定文件 (lock file) 记录了确切被安装模块的版本号，每次新增文件时，yarn 会创建（或更新）yarn.lock 这个文件，保证每次安装依赖时都是一样的模块版本。</li>\n<li>扁平模式<br />\n将依赖包的不同版本归结为单个版本，以避免创建多个副本。</li>\n</ol>\n<h4 id=\"对比\"><a class=\"anchor\" href=\"#对比\">#</a> 对比</h4>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>npm</th>\n<th>yarn</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化包</td>\n<td>npm init</td>\n<td>yarn init</td>\n</tr>\n<tr>\n<td>安装所有依赖</td>\n<td>npm install</td>\n<td>yarn 或 yarn install</td>\n</tr>\n<tr>\n<td>安装包</td>\n<td>npm install --save</td>\n<td>yarn add</td>\n</tr>\n<tr>\n<td>卸载包</td>\n<td>npm uninstall --save</td>\n<td>yarn remove</td>\n</tr>\n<tr>\n<td>安装开发依赖的包</td>\n<td>npm install --save-dev</td>\n<td>yarn add --dev</td>\n</tr>\n<tr>\n<td>更新包</td>\n<td>npm update --save</td>\n<td>yarn update</td>\n</tr>\n<tr>\n<td>全局安装</td>\n<td>npm install -g</td>\n<td>yarn global add</td>\n</tr>\n<tr>\n<td>设置下载镜像的地址</td>\n<td>npm config set registry url</td>\n<td>yarn config set registry url</td>\n</tr>\n<tr>\n<td>执行包</td>\n<td>npm run</td>\n<td>yarn run</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"特别注意\"><a class=\"anchor\" href=\"#特别注意\">#</a> 特别注意</h3>\n<p>其实我在实习时候使用 yarn 就产生了一些些的疑惑，这 yarn 不是 Hadoop 里面的那什么资源管理工具吗，你怎么又出现在这了，好家伙小老弟你业务范围很广啊！<br />\n但是在网上看了一下发现，两者虽然都是 yarn 但是不是一个东西，Nodejs 的 yarn 是一个包管理工具，类似于 maven；而 Hadoop 中的 YARN 是资源管理系统，感觉像是 k8s 里面的资源调度器，看着 CPU、内存这些资源然后给应用分配用的。</p>\n<h2 id=\"react与vue的区别\"><a class=\"anchor\" href=\"#react与vue的区别\">#</a> React 与 Vue 的区别</h2>\n<p>这可能是我第二次和 React 打交道，初识 React 我仅仅是做了个简单的调研然后帮忙改了两个页面，再之后一直都是做的 Vue 开发，体验下来感觉 Vue 还是更简单的，双向绑定这些很容易就上手了，可能因为实验室项目都比较简单，所以 Vue 就可以轻松 cover 了，也不需要调优这些。<br />\n<img data-src=\"https://i.imgtg.com/2022/06/19/7znix.png\" alt=\"\" height=\"350px\" /></p>\n<h3 id=\"相同点\"><a class=\"anchor\" href=\"#相同点\">#</a> 相同点</h3>\n<p>相同点里的 Virtual DOM 简单提一下：Vue 与 React 都使用了 Virtual DOM + Diff 算法，当每一次 UI 更新时，总会根据 render 重新生成最新的 VNode，然后跟以前缓存起来老的 VNode 进行比对，再使用 Diff 算法（框架核心）去真正更新真实 DOM<br />\n<img data-src=\"https://i.imgtg.com/2022/06/19/7z1tj.png\" alt=\"\" /></p>\n<h3 id=\"不同点\"><a class=\"anchor\" href=\"#不同点\">#</a> 不同点</h3>\n<h4 id=\"核心思想不同\"><a class=\"anchor\" href=\"#核心思想不同\">#</a> 核心思想不同</h4>\n<p>Vue 是灵活易用的渐进式框架，对侦测数据的变化更敏感、更精确；React 想要做的是用更好的方式去颠覆前端开发方式，所以推崇函数式编程（纯组件），数据不可变以及单向数据流，需要双向的地方也可以手动实现， 比如借助 onChange 和 setState 来实现。</p>\n<h4 id=\"组件写法差异\"><a class=\"anchor\" href=\"#组件写法差异\">#</a> 组件写法差异</h4>\n<p>Vue 推荐的做法是 template 的单文件组件格式，即 html,css,JS 写在同一个文件；React 推荐的做法是 JSX + inline style, 也就是把 HTML 和 CSS 全都写进 JavaScript 中，即 all in js</p>\n<h4 id=\"diff算法不同\"><a class=\"anchor\" href=\"#diff算法不同\">#</a> diff 算法不同</h4>\n<p>【我... 没太看懂... 等过两天有时间了再来看看吧，这周末是真的太忙了】</p>\n<h4 id=\"响应式原理不同\"><a class=\"anchor\" href=\"#响应式原理不同\">#</a> 响应式原理不同</h4>\n<p>vue 是双向绑定，基于数据可变，当数据改变时，自动找到引用组件重新渲染。react 是单向数据流，基于状态机，手动优化，数据不可变，当数据改变时，以组件为根目录，默认全部重新渲染，所以 React 中会需要  <code>shouldComponentUpdate</code>  这个生命周期函数方法来进行控制【这个我没注意看项目代码中有没有以及怎么写的】</p>\n<h2 id=\"gulp\"><a class=\"anchor\" href=\"#gulp\">#</a> gulp</h2>\n<p>项目中运行什么的利用了<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ3VscGpzLmNvbS5jbi8=\"> gulp</span>，gulp 是一个自动化构建工具，主要用来设定程序自动处理静态资源的工作。简单的说，gulp 就是用来打包项目的。【这部分只是用了命令，但是暂时没时间去了解更详细的东西，日后有时间可以看下】</p>\n<h2 id=\"underscore\"><a class=\"anchor\" href=\"#underscore\">#</a> underscore</h2>\n<p>这个其实就是个 js 库，没啥好特别介绍的，在看代码的时候遇到用到了里面的函数，就顺便看了看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudW5kZXJzY29yZWpzLmNvbS5jbi8=\">文档</span>。</p>\n<h2 id=\"utct与e2e测试\"><a class=\"anchor\" href=\"#utct与e2e测试\">#</a> UT，CT 与 E2E 测试</h2>\n<p>说实话，虽然我一直以来自诩在实验室做的是全栈开发，但是测试这一块我基本上就没涉及过，我所有的测试都是人工手动测试，顶多在本科的时候用 JMeter 做了个压测还没怎么整明白...<br />\n<img data-src=\"https://i.imgtg.com/2022/06/19/7zP2I.png\" alt=\"\" height=\"150px\" /><br />\n 看了一圈网上前端测试的东西，CT 这个我还不太明白，但是 UT 就是单元测试，类似于 Java 开发中对每个 Controller 进行的功能测试；E2E 就是直接启一个浏览器来模仿用户行为，相当于是做了系统测试，不过这些都是自动化进行的。<br />\n<img data-src=\"https://i.imgtg.com/2022/06/19/7ztbD.png\" alt=\"\" /><br />\n分配到的工作改了一下组件库中的核心组件，所以要求写个 UT 来测试一下，看了下我们项目中用到的是 Enzyme，debug 的时候会弹出 karma，然后用 Mock 生成假数据，用 chai 来做了断言的判断。测试这一块暂时出现了一些小问题还没有解决，但是这个 Mock 大名鼎鼎，感觉可以再好好看看，说不定我就可以直接面向前端编程了 (bushi)<br />\n<img data-src=\"https://i.imgtg.com/2022/06/19/7zDV6.png\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"架构\"><a class=\"anchor\" href=\"#架构\">#</a> 架构</h1>\n<p>公司项目就是公司项目，一个前端项目竟然 30G，套娃那真是一层又一层<br />\n<img data-src=\"https://i.imgtg.com/2022/06/19/7zLqP.png\" alt=\"\" height=\"150px\" /><br />\n但是我 mentor 对我说了句话让我对前端开发改观了，之前我一直以为前端开发就是写写 html 和 css，真没劲啊，但是 mentor 说前端可以有很多优化的点比如你这边做了修改如何让其他开发团队更快的引用到，项目也是做过技术架构的升级如何将影响降到最小等等。感觉这些东西也是很有意思的，现在整个项目套娃我还没有套清楚，但是希望自己不是做一个码农，而是做一个有独立思考清楚知道项目架构的人，接下来几个周再捋清楚一下项目的流程然后画个图？遛了，我真的干不完活了～<br />\n<img data-src=\"https://i.imgtg.com/2022/06/19/7zEAb.png\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWFuZ3lhbmd4eGIvcC8xMDEwNTg1Ni5odG1s\">Vue 和 React 对比 (详解)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hNWEwMjUxMWViOWE=\">react VS Vue diff 算法</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTc4MzcwNzE1NTczNzE0OTUy\">react 和 vue diff 算法解析与对比</span></li>\n</ol>\n",
            "tags": [
                "学习不止",
                "实习",
                "Nodejs",
                "React",
                "架构",
                "测试"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/06/18/life/intern-life/%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8%E7%9A%84%E4%BA%BF%E7%82%B9%E7%82%B9%E6%84%9F%E6%82%9F/",
            "url": "https://sprenedayf.com/2022/06/18/life/intern-life/%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8%E7%9A%84%E4%BA%BF%E7%82%B9%E7%82%B9%E6%84%9F%E6%82%9F/",
            "title": "实习第一周的亿点点感悟",
            "date_published": "2022-06-18T13:11:27.000Z",
            "content_html": "<h1 id=\"序章\"><a class=\"anchor\" href=\"#序章\">#</a> 序章</h1>\n<p>当然，这是一篇周记，主要是为了分享一些和技术无关的心得体会，如果换做是之前我肯定是不会花时间写这些东西的，但是实习第一周下来我觉得还是有必要记录一些和技术无关的感悟，至少我觉得我还是想明白了很多～</p>\n<h1 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h1>\n<p>本周顺利入职了，公司就不说了，一开始其实都没想着投的，甚至在投简历的时候都一度想放弃，因为好麻烦... 但是嫌麻烦的同时一直在告诉自己，不能这样不能这样你要好好地去做每一件事才行，感谢当时的自己，给了我现在的机会！😘所以在这里我也想告诉今后的我：== 请不要只有三分钟的热血，一旦打算开始了，请一直坚持下去！不要嫌麻烦，不要打退堂鼓，记起来你当初有热血的原因，再度充满热情的去把这件事做好吧！ ==</p>\n<h1 id=\"开端\"><a class=\"anchor\" href=\"#开端\">#</a> 开端</h1>\n<p>实习生入职大家都坐在一起，我因为有认识的同学所以从一开始就聊得很开心，也没有注意到其他的实习生，然后旁边的女生就找我搭话了。当然我不是那种很难相处不好接触的人，基本上处于礼节还是会客套几句，但是其实我一直都有想要改一下自己待人接物的方式，之前一直觉得自己其实很闷骚，外表看起来很冷但是其实很疯，也不敢主动和人交流，我自己都讨厌自己这种一直端着的感觉，所以想试着去做一个勇敢狗狗？<br />\n<img data-src=\"https://i.imgtg.com/2022/06/18/7TUWb.png\" alt=\"\" height=\"150px\" /><br />\n终于要在各自去见 mentor 的时候，鼓足勇气要了微信，甚至于这个周中还有机会可以互相聊聊心得，呜呜呜，我也有勇气加微信交朋友了！== 希望自己之后对人也可以勇敢一些，不要在一开始勇敢，加了微信不等于终点，闲着没事聊两句，冲！ ==</p>\n<h1 id=\"经过\"><a class=\"anchor\" href=\"#经过\">#</a> 经过</h1>\n<p>HR 把我领到了我 mentor 的座位旁，其实我是真的会怕的，虽然我一直都和比我大几岁到十几岁的女性相处的都很好，但是这两年在实验室和我导的相处真的是让我越发自闭，所以内心真的是很忐忑... 但是我 mentor 真的人超好超好超好！(这里省略一万个超好！🤧) 帮我把我所有入职相关的申请做了，带我去吃饭，虽然中间她在忙的时候我只能尴尬的在一旁看手机，但是我还是好喜欢她！当然，我并没有觉得她是特别照顾我，在我的感觉看来，这是她一直以来的对人方式，让我非常舒服，<strong>我可以成为这样的存在吗</strong>？<br />\n组内的氛围真的很好，我甚至觉得比实验室的氛围都好，羡慕哭了，又觉得自己真的很幸运可以进入这样的 team:partying_face: 感动，原来我也能成为欧洲人吗 (万一不能转正...🙏🙏🙏求求留下我) 一起共事的小伙伴们都很亲切，我真的是要被幸福冲昏了头。然后就是第一天要配置环境，我算是发现了，大家回家的真的很早，但因为我是台式机，所以就弄到了比较晚... 真菜啊<br />\n<img data-src=\"https://i.imgtg.com/2022/06/18/7Tzes.png\" alt=\"\" height=\"150px\" /><br />\n然后就是接触了项目的代码，这项目是真的很大，mentor 开了个会议给我们讲解了整个项目的业务和核心代码，中间接触了很多东西，因为我是偏后端的全栈，前端的东西仅仅就是用过知道怎么弄个 demo 页面的程度吧，这次接触了很多新的东西比如 npm 和 yarn 之间，包的重定向，我对 git 命令也终于不是只知道 pull/push/checkout 了，然后就是分了两个小 bug 来修复，因为不是熟悉的领域所以很忐忑。</p>\n<h1 id=\"内心挣扎\"><a class=\"anchor\" href=\"#内心挣扎\">#</a> 内心挣扎</h1>\n<p>这个过程其实我的内心是挣扎过的，因为现在做的工作是纯前端，我个人其实觉得后端会让我更快乐，当时我问了我自己一个问题：如果一辈子就这样写页面写 css 会怎样？我后来内心给了一个非常坚定的回答：那我绝对会抑郁！所以我鼓起勇气又和 mentor 说了下能不能涉及一下全栈，然后就开始了我这个周实习觉得收获最大的一段对话。<br />\n如果说之前 mentor 在微信上说的那个培养能力的话我还觉得是官话的话，经过了这次的对话我是真的想通了，可能我这个人就是轴，觉得我想做技术，就一门心思学技术就好，但是 mentor 和我讲，公司更看重的是一些软实力，比如：<strong>遇到问题是怎么切入怎么思考的？和人的交流，跨组交流能力等等这些</strong>。然后 mentor 就拿我给她提交的 bug 修改意见切入，说我就只是测试了几个情况，还漏掉了一种情况，我突然才发现自己竟然真的就是漏掉了这种 case，很懊恼，当初就想着 work 了就可以了，也是懒得把所有的 case 都测试一下看看有没有新的问题。mentor 说<strong>在企业里干活要对自己的代码负责，人会犯错，但是如果总是犯这样的错就会让人怀疑是不是能力有问题等等</strong>。其实听到这里我心凉了半截，怕 mentor 觉得我能力有问题，不认真负责之类的，真的想哭😢但事已至此我只能在接下来的工作中更注重细节，来让我的 mentor 更信任我！然后 mentor 和我说组虽然是前端组，但是其实是有全栈的工作的，她觉得其实前端是很有趣的工作，不仅仅可以接触到用户，还有很多的后端组，很锻炼能力云云。哈哈，虽然我也很同意她的这段话，但是我就是觉得和越多的人有关的工作就越是麻烦，后端是很有逻辑的一件事，我要完成的目标简直不要太明确，所以我才会更喜欢后端😄<br />\nmentor 和我说的时候说了很多的东西，她一直在跟我说她可能扯远了，但是我真的感谢她愿意和我扯这么远，让我感受到她和我说这段话的时候真的很真诚，我真的非常非常的感谢她，谢谢她愿意花这么长的时间去解开一个实习生拧巴的点，和 mentor 的谈话让我没那么难受了，我觉得如果能在这个 team 工作的话，不论是前端还是后端应该都是很开心的一件事～</p>\n<h1 id=\"重拾斗志\"><a class=\"anchor\" href=\"#重拾斗志\">#</a> 重拾斗志</h1>\n<p>收拾好精神后又回来解决 mentor 提到的一些在企业中提交项目应该补充的一些 test case 等，然后我就发现其实这些代码也是很有逻辑的，和同事聊过也听说这个前端项目很多思想其实都是用到了后台的设计模式等，包括也有一开始是做后端然后也来学前端开发的。然后我算是彻彻底底的想要留在这个组，非常的想！因为我觉得我是一个在校生，我学到的那些东西终究是皮毛，我进公司还是要重新学习的，<strong>只要有一颗学习的心，工作内容可以接受的话，那就好好学习下去，好好工作下去吧</strong>！</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>说了那么多，差不多是流水账啦😅这里总结一下反思和感悟吧：</p>\n<ol>\n<li>一旦有了冲动去做某件事，那就不要怕麻烦，坚持着完成到最后，不要敷衍，记起初衷，保持干劲地不留遗憾的去做吧！</li>\n<li>勇敢一点去认识他人，勇敢的交流，勇敢的表达自己吧！我一直觉得坦诚的人会更受人喜爱，希望自己这样。一直以来自己对人不是太近就是保持距离，不如尝试着面面俱到一点？</li>\n<li>做一个热情的人吧！之前可能还在热情和保持距离（冷漠？）之间犹豫（主要是母上大人说没必要这样，会很蠢），现在我想明白了，我觉得我还是更适合做一个热情洋溢的人，毕竟我真的是黏糊糊的大狗狗属性嘛，所以不如就开朗的每天去和大家打招呼相处叭～～～☺️</li>\n<li>有个交心的人同我说过：在校生就是会这样对未来抱有憧憬，动不动拿理想说话，其实很多工作不是说你想做什么就会按照你的设想去做，也很有可能你接触之后发现同理想相差很远，工作内容其实都不是重点了，好的 team 才是真的可遇不可求。</li>\n<li>软实力很重要，我之前一直在钻牛角尖，认为软实力在面试中又不能被看到，没用，我要学的是技术，但其实软实力才是在工作中真正能够决定一个人吧</li>\n<li>请对每一个工作认真负责！！！</li>\n<li>保持学习吧，不是为了卷，经过这么长时间的高强度学习工作，我发现我还是蛮喜欢这种让自己充实的感觉，请一直坚持下去吧！</li>\n</ol>\n",
            "tags": [
                "生活杂谈",
                "实习感悟"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/06/10/learn-and-learn/%E4%BA%91%E5%8E%9F%E7%94%9F/Argo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "https://sprenedayf.com/2022/06/10/learn-and-learn/%E4%BA%91%E5%8E%9F%E7%94%9F/Argo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "Argo环境搭建",
            "date_published": "2022-06-10T08:30:59.000Z",
            "content_html": "<h1 id=\"argo简述\"><a class=\"anchor\" href=\"#argo简述\">#</a> Argo 简述</h1>\n<p>Argo 是 <code>kubernetes</code>  上的一个扩展工具，能够帮助我们更方便的把应用运行在 k8s 平台上，包含多个子项目：</p>\n<ul>\n<li><code>Argo Workflows</code> ：基于容器的任务编排工具。</li>\n<li><code>Argo CD</code> ：基于 GitOps 声明的持续交付工具。</li>\n<li><code>Argo Events</code> ：事件驱动工具。</li>\n<li><code>Argo Rollouts</code> ：支持金丝雀以及蓝绿发布的应用渐进式发布工具。<br />\n在我的项目中主要是用到 <code>Argo Workflows</code> ，所以会着重介绍这个，当然学习一个工具最好的方法就是动手，开始搭建吧～</li>\n</ul>\n<h1 id=\"argo的部署\"><a class=\"anchor\" href=\"#argo的部署\">#</a> Argo 的部署</h1>\n<p>这里建议别看那些有的没的博客，先去官网把官方的 YAML 文件运行一下看看能不能成，如果成了就直接上手，不成再排查问题，不然真的会走很多弯路啊！！！<br />\n所以建议先看看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmdvcHJvai5naXRodWIuaW8vYXJnby13b3JrZmxvd3MvcXVpY2stc3RhcnQv\">这个</span>，不要害怕，这英语简直不要再简单，而且这文档很短的，不像其他的英文文档密密麻麻好几页（没错，我就是在拉踩！）</p>\n<p>核心就是这两行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl create ns argo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo-workflows/master/manifests/quick-start-postgres.yaml</pre></td></tr></table></figure><p>当然建议直接访问这个网址然后把内容 copy 下来，这里用到的每次都是最新的 YAML 文件，我们根本就不需要这么频繁的更新好不好，所以建议找一个版本用下去，比如我就用的 3.0.7 版本，3.0.7 版本的 YAML 文件可以看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FyZ29wcm9qL2FyZ28td29ya2Zsb3dzL3YzLjAuNy9tYW5pZmVzdHMvaW5zdGFsbC55YW1s\">这里</span><br />\n其实如果你的 k8s 集群搭建好了这文件你是直接就能运行的，但是我用了我们实验室遗留下来的 YAML，因此踩了不少坑，这里简单说一下吧....<br />\n（用官方用官方用官方！除非你大牛想要自定义配置，否则像我这样的小白踩大坑了！！！血的教训！）</p>\n<h2 id=\"我的踩坑步骤\"><a class=\"anchor\" href=\"#我的踩坑步骤\">#</a> 我的踩坑步骤</h2>\n<ol>\n<li>首先我写了个脚本用来初始化集群环境，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pbml0LWFyZ28tcGw4bzcxNGUuc2g=\">就叫 init-argo.sh</span>，这里的 <code>quick-start-minio-pvc.yaml</code>  可以看我 Minio 搭建的博客，就是声明了个 PVC</li>\n</ol>\n<div class=\"note info\">\n<p>因为我的平台中要有两个 Minio，一个用来保存用户数据，一个是 Argo 用来存储自己数据的，所以多了这个步骤；如果你<strong>没有 Argo 使用自定义 Minio 或者配置多个 Minio 的需求</strong>可以不做这一步骤</p>\n</div>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl create namespace argo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl label <span class=\"token function\">node</span> k8s-master <span class=\"token assign-left variable\">isMain</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kubectl apply -n argo -f quick-start-minio-pvc.yaml</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 赋予 argo 权限使用 ingress 资源或者 service 资源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kubectl create rolebinding namespace-argo-admin --clusterrole<span class=\"token operator\">=</span>admin --serviceaccount<span class=\"token operator\">=</span>argo:default -n argo</pre></td></tr></table></figure><ol start=\"2\">\n<li>运行 Minio 的安装 YAML  <code>kubectl apply -n argo -f quick-start-minio.yaml</code></li>\n<li>运行 Argo 安装的 YAML  <code>kubectl apply -n argo -f quick-start-postgres-mine.yaml</code> ，这里就是踩坑的开始了</li>\n</ol>\n<h3 id=\"k8s-1-nodes-had-taints-that-the-pod-didnt-tolerate\"><a class=\"anchor\" href=\"#k8s-1-nodes-had-taints-that-the-pod-didnt-tolerate\">#</a> (k8s) 1 node(s) had taints that the pod didn't tolerate</h3>\n<p>这里倒也不是我的知识盲区，之前在看 k8s 的时候有看到污点机制，就是说 k8s 可以给 node 增加污点，来帮助 pod 的分配，限制 pod 能否在该节点上运行。<span class=\"rainbow\"><strong>使用 kubeadm 初始化的集群，出于安全考虑 Pod 不会被调度到 Master Node 上，也就是说 Master Node 不参与工作负载。</strong></span>，然后你看我的 init-argo.yaml 文件中是不是有 <code>kubectl label node k8s-master isMain=&quot;true&quot;</code>  这样的命令，实验室版本中的 yaml 文件中做了这样的限定：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> argo<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token key atrule\">kubernetes.io/os</span><span class=\"token punctuation\">:</span> linux</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">isMain</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> postgres</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> postgres</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token key atrule\">kubernetes.io/os</span><span class=\"token punctuation\">:</span> linux</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token key atrule\">isMain</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> workflow<span class=\"token punctuation\">-</span>controller</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token key atrule\">kubernetes.io/os</span><span class=\"token punctuation\">:</span> linux</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token key atrule\">isMain</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">securityContext</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token key atrule\">runAsNonRoot</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token key atrule\">serviceAccountName</span><span class=\"token punctuation\">:</span> argo</pre></td></tr></table></figure><p>也就是说在节点选择的时候要选择有 <code>isMain:true</code>  标签的节点，这个节点我标记了是 master 节点，但是 master 节点不能分配啊！好了这样的解决措施是什么呢？<br />\n其实这三个节点是不是在 master 节点上没有什么影响啊，不知道当初师兄是出于什么考量所以一定要弄在 master 节点上，所以最好的方式就是把 yaml 文件中的 <code>isMain:true</code>  删掉，正常分配就行了，但是我不知道大家有没有这种强迫症，之前配置过了一个属性，如果不用了就想把之前的配置复原，反正我有，那么我们已经给节点标记了，怎么复原呢？</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 通过 --show-labels 选项将节点的标签显示出来</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl get <span class=\"token function\">node</span> --show-labels</pre></td></tr></table></figure><p><img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h339mty8idj21q009y77m.jpg\" alt=\"\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除 label 的语法为：kubectl label nodes &lt;node-name> &lt;label-key>-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl label <span class=\"token function\">node</span> k8s-master isMain-</pre></td></tr></table></figure><p><img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h339o5ivulj21q20cagp9.jpg\" alt=\"\" /><br />\n当然还有一种解决方法就是，k8s 既然给 master 节点增加了污点不让分配，那我把污点删了不就行了？</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl taint nodes --all node-role.kubernetes.io/master-</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># k8s 1.24 之后需要改成下面语句</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kubectl taint nodes --all node-role.kubernetes.io/control-plane-</pre></td></tr></table></figure><h3 id=\"leader_election_identity\"><a class=\"anchor\" href=\"#leader_election_identity\">#</a> LEADER_ELECTION_IDENTITY</h3>\n<p>在 apply 之后 pod 状态一直不对，这时候就需要排查问题所在了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl logs pod argo-server-xxxx -n argo</pre></td></tr></table></figure><p>提示说 LEADER_ELECTION_IDENTITY 没有，导致失败，这个又是什么？？？<br />\n详情可以看 Argo<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FyZ29wcm9qL2FyZ28td29ya2Zsb3dzL2Jsb2IvbWFzdGVyL2RvY3MvZW52aXJvbm1lbnQtdmFyaWFibGVzLm1k\"> 官方介绍</span><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h33abcbry9j21mc03sjru.jpg\" alt=\"\" /><br />\n正常的 yaml 其实就是这一段：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> workflow<span class=\"token punctuation\">-</span>controller</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> workflow<span class=\"token punctuation\">-</span>controller</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> workflow<span class=\"token punctuation\">-</span>controller</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>configmap</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">-</span> workflow<span class=\"token punctuation\">-</span>controller<span class=\"token punctuation\">-</span>configmap</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>executor<span class=\"token punctuation\">-</span>image</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">-</span> argoproj/argoexec<span class=\"token punctuation\">:</span>v3.0.7</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>namespaced</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">-</span> workflow<span class=\"token punctuation\">-</span>controller</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># ************ 其实就是这一段 *************</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> LEADER_ELECTION_IDENTITY</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token key atrule\">fieldRef</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              <span class=\"token key atrule\">fieldPath</span><span class=\"token punctuation\">:</span> metadata.name</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\"># *************************************</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> argoproj/workflow<span class=\"token punctuation\">-</span>controller<span class=\"token punctuation\">:</span>v3.0.7</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /metrics</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> metrics</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> workflow<span class=\"token punctuation\">-</span>controller</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9090</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> metrics</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token key atrule\">kubernetes.io/os</span><span class=\"token punctuation\">:</span> linux</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\"># isMain: \"true\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token key atrule\">securityContext</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token key atrule\">runAsNonRoot</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token key atrule\">serviceAccountName</span><span class=\"token punctuation\">:</span> argo</pre></td></tr></table></figure><p>然后我去对比了一下官网的 yaml 文件，人家是有的，师兄你为什么要删了啊！！！<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h33ae39qyrj206809cjrr.jpg\" alt=\"\" height=\"150px\" /></p>\n<h3 id=\"argo-server状态不是ready\"><a class=\"anchor\" href=\"#argo-server状态不是ready\">#</a> argo server 状态不是 ready</h3>\n<p>修改好了我在 apply，发现这次都正常启动了，但是 <code>argo-server</code>  这个 pod 不是 ready 状态，如果是这样的话基本上可以确定是因为就绪探针出问题导致这个 pod 没有挂载到 service 提供服务，好吧大概确定了问题原因，那就来解决吧<br />\n原来：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> argo<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> argo<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> argo<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">-</span> server</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>namespaced</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>auth<span class=\"token punctuation\">-</span>mode</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">-</span> server</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>auth<span class=\"token punctuation\">-</span>mode</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">-</span> client</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> argoproj/argocli<span class=\"token punctuation\">:</span>v3.0.7</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> argo<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2746</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> web</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2746</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\"># *********** 问题出在这里 ************</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /tmp</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tmp</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token key atrule\">kubernetes.io/os</span><span class=\"token punctuation\">:</span> linux</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\"># isMain: \"true\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token key atrule\">securityContext</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token key atrule\">runAsNonRoot</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token key atrule\">serviceAccountName</span><span class=\"token punctuation\">:</span> argo<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">emptyDir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tmp</pre></td></tr></table></figure><p>可以参考官方给出的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmdvcHJvai5naXRodWIuaW8vYXJnby13b3JrZmxvd3MvYXJnby1zZXJ2ZXIv\">提示</span>，意思就是说 3.0 版本之后 <code>argo server</code>  的监听请求不再是 HTTP 而是 HTTPS 了，所以要将 <code>scheme: HTTP</code>  改为  <code>scheme: HTTPS</code> ，这样就可以了<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h33al320hwj21b00j440h.jpg\" alt=\"\" /></p>\n<h3 id=\"暴露端口\"><a class=\"anchor\" href=\"#暴露端口\">#</a> 暴露端口</h3>\n<p>我们还需要暴露端口出来来让我们访问才行，这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmdvcHJvai5naXRodWIuaW8vYXJnby13b3JrZmxvd3MvYXJnby1zZXJ2ZXIv\">官方</span>也提供了几种方式，我选择直接修改 YAML 文件<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h33aqwa5s2j20z70u0whl.jpg\" alt=\"\" /><br />\n其实就是修改了 <code>Minio</code>  和 <code>Argo Server</code>  的 <code>Service</code>  类型和 <code>NodePort</code> ，修改后的 YAML 文件如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> argo<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> web</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2746</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30080</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2746</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> argo<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> minio</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> minio</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30081</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> minio</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer</pre></td></tr></table></figure><h3 id=\"ui访问有问题\"><a class=\"anchor\" href=\"#ui访问有问题\">#</a> UI 访问有问题</h3>\n<p>这次修改好了再 apply 一下，终于全都运行好了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master init-argo<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n argo -o wide</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME                                   READY   STATUS    RESTARTS   AGE   IP            NODE        NOMINATED NODE   READINESS GATES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>argo-server-695f4698c7-qsbw8           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          82s   <span class=\"token number\">10.244</span>.2.21   k8s-node2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>minio                                  <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          82s   <span class=\"token number\">10.244</span>.2.22   k8s-node2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>minio-cloudbi                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          17h   <span class=\"token number\">10.244</span>.2.16   k8s-node2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>postgres-6b5c55f477-vs9z4              <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          82s   <span class=\"token number\">10.244</span>.1.27   k8s-node1   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>workflow-controller-59549c4fbc-sp9rv   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">3</span>          82s   <span class=\"token number\">10.244</span>.1.26   k8s-node1   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master init-argo<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get svc -n argo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME                          TYPE           CLUSTER-IP       EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>          AGE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>argo-server                   LoadBalancer   <span class=\"token number\">10.111</span>.229.222   <span class=\"token operator\">&lt;</span>pending<span class=\"token operator\">></span>     <span class=\"token number\">2746</span>:30080/TCP   9s</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>minio                         LoadBalancer   <span class=\"token number\">10.96</span>.121.100    <span class=\"token operator\">&lt;</span>pending<span class=\"token operator\">></span>     <span class=\"token number\">9000</span>:30081/TCP   8s</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>minio-cloudbi                 LoadBalancer   <span class=\"token number\">10.107</span>.211.113   <span class=\"token operator\">&lt;</span>pending<span class=\"token operator\">></span>     <span class=\"token number\">9000</span>:30072/TCP   17h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>postgres                      ClusterIP      <span class=\"token number\">10.96</span>.174.231    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">5432</span>/TCP         8s</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>workflow-controller-metrics   ClusterIP      <span class=\"token number\">10.104</span>.221.44    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">9090</span>/TCP         8s</pre></td></tr></table></figure><p>但是在访问 UI 的时候又出问题了.... 我无语了<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h33anixxj1j20w70u0771.jpg\" alt=\"\" /><br />\n这个问题...** 直接在 chrome 该页面上，用键盘输入这 11 个字符：thisisunsafe，然后回车就行了....** 离谱<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h33atl0kuuj206o06ot8q.jpg\" alt=\"\" height=\"150px\" /></p>\n<h2 id=\"搭建结果\"><a class=\"anchor\" href=\"#搭建结果\">#</a> 搭建结果</h2>\n<p>Minio 界面<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h321147kr6j21n40u0t9o.jpg\" alt=\"\" /><br />\n Argo 界面<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h330cr4xq0j22ba0u0q64.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "学习不止",
                "云原生",
                "云原生",
                "k8s",
                "Argo"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/06/09/learn-and-learn/%E4%BA%91%E5%8E%9F%E7%94%9F/Minio%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%9C%A8k8s%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "url": "https://sprenedayf.com/2022/06/09/learn-and-learn/%E4%BA%91%E5%8E%9F%E7%94%9F/Minio%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%9C%A8k8s%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "title": "Minio对象存储在k8s上的搭建",
            "date_published": "2022-06-09T08:24:16.000Z",
            "content_html": "<h1 id=\"nfs\"><a class=\"anchor\" href=\"#nfs\">#</a> NFS</h1>\n<h2 id=\"k8s的传统挂载方式\"><a class=\"anchor\" href=\"#k8s的传统挂载方式\">#</a> k8s 的传统挂载方式</h2>\n<p>我们都知道 pod 内的数据都不是持久化的，一旦 pod 销毁那我们的数据也会消失，所以需要将 pod 内的数据挂载出来。在 <code>kubernetes</code>  中提供了挂载卷 (Volume) 的能力，卷的类型有很多，主要的常用类型包括：</p>\n<ul>\n<li><code>emptyDir</code> ：卷最初是空的，在 pod 在节点运行时创建，pod 删除时数据也会永久删除；</li>\n<li><code>configMap</code> ：可以将 <code>configMap</code>  中的数据作为卷挂在到 pod 中；</li>\n<li><code>secret</code> ：可以将 <code>secret</code>  中的数据作为卷挂载到 pod 中；</li>\n<li><code>downwardAPI</code> ：将 pod 的元数据信息注入到 pod 中；</li>\n<li><code>hostPath</code> ：能将主机节点文件系统上的文件或目录挂载到 Pod 中；</li>\n<li><code>nfs</code> ：将挂载到 Pod，可以多挂；<br />\n比如我之前一直用的就是 <code>hostPath</code>  形式的数据卷，相当于是把 pod 内的数据 copy 了一份出来到主机目录中。其实 <code>nfs</code>  和 <code>hostPath</code>  形式很相似，只不过我们的 <code>hostPath</code>  只能保存到 pod 被部署到的那个 node 个的具体目录下，而 <code>nfs</code>  可以统一的存储到某个 <code>nfs</code>  服务器上，然后其他 node 节点要用到这份数据的时候可以通过 <code>RPC</code>  来取。</li>\n</ul>\n<h2 id=\"什么是nfs\"><a class=\"anchor\" href=\"#什么是nfs\">#</a> 什么是 NFS</h2>\n<p>NFS 全称是 <code>network file system</code> 。允许一个系统在网络上与他人共享目录和文件。通过使用 NFS，用户和程序可以像访问本地文件一样访问远端系统上的文件。 假如有三台机器 A, B, C，它们需要访问同一个目录，目录中都是图片，传统的做法是把这些图片分别放到 A, B, C. 但是使用 NFS 只需要放到 A 上，然后 A 共享给 B 和 C 即可。访问的时候，B 和 C 是通过网络的方式去访问 A 上的那个目录的。</p>\n<h2 id=\"为什么要用nfs\"><a class=\"anchor\" href=\"#为什么要用nfs\">#</a> 为什么要用 NFS</h2>\n<p>我们在用 <code>docker</code>  部署容器或者用 <code>minikub</code>  部署一个单节点的 pod 时候，可以直接把 pod 数据映射到主机，但是我们知道 <code>kubernetes</code>  的 pod 是可能被调用到任意 node 上的，所以可以使用 nfs 来帮我们统一进行一个数据的存储～</p>\n<h2 id=\"linux配置nfs服务\"><a class=\"anchor\" href=\"#linux配置nfs服务\">#</a> Linux 配置 NFS 服务</h2>\n<p>在 k8s 使用 NFS 做存储之前，我们需要先 NFS 相关环境，别慌，比起 k8s 集群的搭建，NFS 搭建过程简直不要太友好好嘛！<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h31reuxx27j20c80c8aai.jpg\" alt=\"\" height=\"150px\" /><br />\n首先要知道 <code>NFS</code>  本质上是要用到 <code>RPC</code>  的嘛，那么肯定是要有服务的提供商和服务的使用方对吧，所以我们 <code>NFS</code>  服务的搭建也要分为 NFS 服务器的搭建和 NFS 客户端的搭建两个步骤！</p>\n<h3 id=\"搭建服务器\"><a class=\"anchor\" href=\"#搭建服务器\">#</a> 搭建服务器</h3>\n<div class=\"tab\" data-id=\"id1\" data-title=\"Ubuntu和Debian\">\n<details><summary>安装依赖</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y nfs-kernel-server</pre></td></tr></table></figure></div></details>\n<details><summary>配置</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建共享目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /nfs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 删除权限限制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> -R nobody:nogroup /nfs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 修改配置文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"/nfs *(rw,sync,no_subtree_check,no_root_squash)\"</span> <span class=\"token operator\">>></span> /etc/exports</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使配置生效</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sudo</span> exportfs -a</pre></td></tr></table></figure></div></details>\n<details><summary>重启服务</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart nfs-server</pre></td></tr></table></figure></div></details>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"CentOS和Fedora\">\n<details><summary>安装依赖</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y nfs-utils</pre></td></tr></table></figure></div></details>\n<details><summary>配置</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建共享目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /root/nfs4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 删除权限限制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> -R nobody:nogroup /root/nfs4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 修改配置文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"/root/nfs4 *(rw,sync,no_subtree_check,no_root_squash)\"</span> <span class=\"token operator\">>></span> /etc/exports</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 使配置生效</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sudo</span> exportfs -a</pre></td></tr></table></figure></div></details>\n<details><summary>重启服务</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart nfs</pre></td></tr></table></figure></div></details>\n</div>\n<h3 id=\"搭建客户端\"><a class=\"anchor\" href=\"#搭建客户端\">#</a> 搭建客户端</h3>\n<div class=\"tab\" data-id=\"id2\" data-title=\"Ubuntu和Debian\">\n<details><summary>安装依赖</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y nfs-common</pre></td></tr></table></figure></div></details>\n<details><summary>配置</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建待挂载的目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> /root/nfs4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 挂载</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mount</span> <span class=\"token number\">192.168</span>.0.194:/root/nfs4 /root/nfs4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 修改 /etc/fstab 开机自动挂载</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">192.168</span>.0.194:/root/nfs    /root/nfs4    nfs    defaults    <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr></table></figure></div></details>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"CentOS和Fedora\">\n<details><summary>安装依赖</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y nfs-utils</pre></td></tr></table></figure></div></details>\n<details><summary>配置</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建待挂载的目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> /root/nfs4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 挂载</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mount</span> <span class=\"token number\">192.168</span>.0.194:/root/nfs4 /root/nfs4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 修改 /etc/fstab 开机自动挂载</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">192.168</span>.0.194:/root/nfs    /root/nfs4    nfs    defaults    <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr></table></figure></div></details>\n</div>\n<p>然后我们来检查一下吧：</p>\n<ol>\n<li>在服务端输入 <code>showmount -e localhost</code> <br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h31s3n25hxj20na038q32.jpg\" alt=\"\" /><br />\n 说明服务端正常</li>\n<li>在客户端节点输入 <code>df -h</code> <br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h31s4u54m2j20xs08ymy8.jpg\" alt=\"\" /><br />\n 查看最后一行，说明已经成了～<br />\n 至此我们的准备工作已经全部做完了，接下来就是进入 k8s 集群配置的阶段啦～<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h31rzktjq9j20c80bbwet.jpg\" alt=\"\" height=\"150px\" /></li>\n</ol>\n<h2 id=\"pvpvcstorageclass关系\"><a class=\"anchor\" href=\"#pvpvcstorageclass关系\">#</a> PV,PVC,StorageClass 关系</h2>\n<ul>\n<li><code>PersistentVolume</code>  (PV) 是外部存储系统中的一块存储空间，由管理员创建和维护。与  <code>Volume</code>  一样，PV 具有持久性，生命周期独立于 Pod。</li>\n<li><code>PersistentVolumeClaim</code>  (PVC) 是对 PV 的申请 (Claim)。PVC 通常由普通用户创建和维护。需要为 Pod 分配存储资源时，用户可以创建一个 PVC，指明存储资源的容量大小和访问模式（比如只读）等信息， <code>Kubernetes</code>  会查找并提供满足条件的 PV。</li>\n<li><code>StorageClass</code>  是  <code>Kubernetes</code>  提的了一套可以自动创建 PV 的机制，即: <code>Dynamic Provisioning</code> 。PV 可以是集群管理员事先供应的，就是所谓的静态供应 <code>（static provisioning）</code> ；当  <code>kubernetes</code>  集群规模很大时，需要管理员手工去创建成千上万的 PV 来对应存储资源，这是很繁琐的，因此就需要我们的 <code>StorageClass</code> 。<br />\n它们三个的关系图可以如下图所示：<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h31sld059pj20r60enjte.jpg\" alt=\"\" /><br />\n然后整个运作流程如下图所示：<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h31spj8somj20qo0aw0uf.jpg\" alt=\"\" /></li>\n</ul>\n<h2 id=\"k8s环境配置\"><a class=\"anchor\" href=\"#k8s环境配置\">#</a> k8s 环境配置</h2>\n<h3 id=\"rbac授权\"><a class=\"anchor\" href=\"#rbac授权\">#</a> rbac 授权</h3>\n<p>rbac.yml: 唯一需要修改的地方只有 namespace, 根据实际情况定义</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\"># replace with namespace where provisioner is deployed</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner<span class=\"token punctuation\">-</span>runner</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"persistentvolumes\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"persistentvolumeclaims\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"storage.k8s.io\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"storageclasses\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"events\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"patch\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRoleBinding</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> run<span class=\"token punctuation\">-</span>nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># replace with namespace where provisioner is deployed</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner<span class=\"token punctuation\">-</span>runner</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> leader<span class=\"token punctuation\">-</span>locking<span class=\"token punctuation\">-</span>nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\"># replace with namespace where provisioner is deployed</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default</pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"endpoints\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"patch\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> RoleBinding</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> leader<span class=\"token punctuation\">-</span>locking<span class=\"token punctuation\">-</span>nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\"># replace with namespace where provisioner is deployed</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default</pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\"># replace with namespace where provisioner is deployed</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default</pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> leader<span class=\"token punctuation\">-</span>locking<span class=\"token punctuation\">-</span>nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl apply -f rbac.yml</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get sa</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME                     SECRETS   AGE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>default                  <span class=\"token number\">1</span>         47h</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nfs-client-provisioner   <span class=\"token number\">1</span>         17h</pre></td></tr></table></figure><h3 id=\"创建pv-provisioner\"><a class=\"anchor\" href=\"#创建pv-provisioner\">#</a> 创建 PV provisioner</h3>\n<p>pv-deployment.yml</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\"># replace with namespace where provisioner is deployed</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default <span class=\"token comment\">#与 RBAC 文件中的 namespace 保持一致</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Recreate</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">serviceAccountName</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>provisioner</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>hangzhou.aliyuncs.com/iuxt/nfs<span class=\"token punctuation\">-</span>subdir<span class=\"token punctuation\">-</span>external<span class=\"token punctuation\">-</span>provisioner<span class=\"token punctuation\">:</span>v4.0.2</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>root</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /persistentvolumes</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> PROVISIONER_NAME</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> iuxt/nfs <span class=\"token comment\">#provisioner 名称，请确保该名称与 storageclass.yaml 文件中的 provisioner 名称保持一致</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> NFS_SERVER</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>              <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> 192.168.0.194 <span class=\"token comment\">#NFS Server IP 地址</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> NFS_PATH</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> /root/nfs4 <span class=\"token comment\">#NFS 服务器的 NFC 地址</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span>root</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token key atrule\">nfs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> 192.168.0.194</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /root/nfs4</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl apply -f pv-deployment.yml</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get deploy</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME                     READY   UP-TO-DATE   AVAILABLE   AGE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>nfs-client-provisioner   <span class=\"token number\">1</span>/1     <span class=\"token number\">1</span>            <span class=\"token number\">1</span>           17h</pre></td></tr></table></figure><h3 id=\"创建storageclass\"><a class=\"anchor\" href=\"#创建storageclass\">#</a> 创建 StorageClass</h3>\n<p>storageclass.yml</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> storage.k8s.io/v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> StorageClass</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> managed<span class=\"token punctuation\">-</span>nfs<span class=\"token punctuation\">-</span>storage</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">storageclass.kubernetes.io/is-default-class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 必须与 pv-deployment.yaml 中的 PROVISIONER_NAME 一致</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">provisioner</span><span class=\"token punctuation\">:</span> iuxt/nfs</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">mountOptions</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">-</span> vers=4.1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">archiveOnDelete</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl apply -f storageclass.yml</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get sc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME                            PROVISIONER   RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>managed-nfs-storage <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>   iuxt/nfs      Delete          Immediate           <span class=\"token boolean\">false</span>                  17h</pre></td></tr></table></figure><h3 id=\"测试一下\"><a class=\"anchor\" href=\"#测试一下\">#</a> 测试一下</h3>\n<p>nginx.yml</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>nginx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>nginx</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>nginx</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>alpine</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /usr/share/nginx/html</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> nfs</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nfs</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token key atrule\">volume.beta.kubernetes.io/storage-class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"managed-nfs-storage\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">-</span> ReadWriteMany</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1Gi</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>nginx</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>nginx</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>nginx</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl apply -f nginx.yml</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-node2 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls nfs4/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>default-nfs-test-pvc-915969ef-4254-433b-8d91-25d1a17cd4c5</pre></td></tr></table></figure><p>在这个目录下面创建一个 index.html 然后请求对应 pod 发现可以正常返回，就成了～<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h31t1vxxy6j206o06ojra.jpg\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"minio配置\"><a class=\"anchor\" href=\"#minio配置\">#</a> Minio 配置</h1>\n<p>Minio 就是个对象存储，非常适合于存储大容量非结构化的数据，如：图片、视频、日志文件、镜像等。这里我们前期工作都做完了，所以 Minio 的部署也很简单了，编写个 YAML 文件直接 apply 就成～</p>\n<div class=\"note info\">\n<p>这里可以去看看 kubernetes 官方给的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMvZXhhbXBsZXMvdHJlZS9tYXN0ZXIvc3RhZ2luZy9zdG9yYWdlL21pbmlvI3ByZXJlcXVpc2l0ZXM=\">示例</span>，我这里搭建的是 standalone 形式的</p>\n</div>\n<h2 id=\"配置pvc\"><a class=\"anchor\" href=\"#配置pvc\">#</a> 配置 PVC</h2>\n<p>我们的 Minio 最后也是以一个 pod 的形式运行起来的，里面的数据想要持久化可以用我们前面写好的 StorageClass 动态生成 PV，因此需要我们先写好一个 PVC 配置文件 <code>quick-start-minio-pvc.yaml</code> ：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\"># This name uniquely identifies the PVC. Will be used in deployment below.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> minio<span class=\"token punctuation\">-</span>pv<span class=\"token punctuation\">-</span>claim</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> minio<span class=\"token punctuation\">-</span>storage<span class=\"token punctuation\">-</span>claim</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">volume.beta.kubernetes.io/storage-class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"managed-nfs-storage\"</span>   <span class=\"token comment\">#与 storageclass.yaml metadata.name 保持一致</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\"># Read more about access modes here: http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">-</span> ReadWriteOnce</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># This is the request for storage. Should be available in the cluster.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 20Gi</pre></td></tr></table></figure><h2 id=\"编写service及pod\"><a class=\"anchor\" href=\"#编写service及pod\">#</a> 编写 Service 及 Pod</h2>\n<p>这里我没有按照官方给的示例来，主要是想有点自己的配置，所以改了改，但是大同小异其实， <code>quick-start-minio.yaml</code> ~</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> minio<span class=\"token punctuation\">-</span>cloudbi</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> minio<span class=\"token punctuation\">-</span>cloudbi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30072</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> minio<span class=\"token punctuation\">-</span>cloudbi</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 官方给的是 deployment，我这里直接写成了 pod</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> minio<span class=\"token punctuation\">-</span>cloudbi</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> minio<span class=\"token punctuation\">-</span>cloudbi</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> storage</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> minio<span class=\"token punctuation\">-</span>pv<span class=\"token punctuation\">-</span>claim <span class=\"token comment\"># 这里是上一步的 pvc 的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">-</span> minio</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">-</span> server</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">-</span> /data</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MINIO_ACCESS_KEY</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> admin <span class=\"token comment\"># 登陆账号</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MINIO_SECRET_KEY</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> password <span class=\"token comment\"># 登陆密码</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> minio/minio<span class=\"token punctuation\">:</span>RELEASE.2019<span class=\"token punctuation\">-</span>12<span class=\"token punctuation\">-</span>17T23<span class=\"token punctuation\">-</span>16<span class=\"token punctuation\">-</span>33Z <span class=\"token comment\"># 我用了这个版本，Minio 更新有点子快，稳妥点比较好</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token key atrule\">lifecycle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 容器启动后立即执行一个命令，相当于是先创建了一个 my-bucket 的桶</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          <span class=\"token punctuation\">-</span> mkdir</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>p</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token punctuation\">-</span> /data/my<span class=\"token punctuation\">-</span>bucket</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 存活探针，检测容器容器是否正在运行，用于控制是否重启 pod</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /minio/health/live</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> main</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> storage <span class=\"token comment\"># 这里与该文件上面的 pvc 的名称相同</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/data\"</span> <span class=\"token comment\"># 绑定容器内的地址是 /data</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 就绪探针，用于控制 pod 是否添加至 service</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /minio/health/ready</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><h2 id=\"简单测试\"><a class=\"anchor\" href=\"#简单测试\">#</a> 简单测试</h2>\n<ol>\n<li>创建一个新的命名空间用来测试一下我们的 minio</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl create namespace minio</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 PVC</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl apply -f quick-start-minio-pvc.yaml -n minio</pre></td></tr></table></figure><p>查看状态：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master minio-test<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pvc -n minio</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>minio-pv-claim   Bound    pvc-81b208a3-52a9-445c-901a-02f5163cdfe8   20Gi       RWO            managed-nfs-storage   50m</pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 Minio 服务</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl apply -f quick-start-minio.yaml -n minio</pre></td></tr></table></figure><p>查看状态:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master minio-test<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n minio -o wide</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME            READY   STATUS    RESTARTS   AGE     IP            NODE        NOMINATED NODE   READINESS GATES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>minio-cloudbi   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          4m32s   <span class=\"token number\">10.244</span>.2.11   k8s-node2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"4\">\n<li>访问一下我们的 Minio 页面<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h321147kr6j21n40u0t9o.jpg\" alt=\"\" /><br />\n好了，可以看到我们创建容器时候初始化了一个 <code>my-bucket</code>  也存在，然后看看我们的 nfs 目录吧～</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master minio-test<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls /root/nfs4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>minio-minio-pv-claim-pvc-81b208a3-52a9-445c-901a-02f5163cdfe8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master minio-test<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls /root/nfs4/minio-minio-pv-claim-pvc-81b208a3-52a9-445c-901a-02f5163cdfe8/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>my-bucket</pre></td></tr></table></figure><p><img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h322j78gryj209l09jglu.jpg\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE1MTc5MzU4LzI3NTQzMDU=\">NFS 服务配置</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNzIxMTY2\">CentOS 7 中搭建 NFS 文件共享存储服务的完整步骤</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96YWh1aS5mYW4vcG9zdHMvMTc5ZWI4NDIv\">Kubernetes 使用 NFS 作为存储</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpaG9uZ2JhbzgwL2FydGljbGUvZGV0YWlscy8xMjAzMjM1MDg=\">k8s 部署 minio+StorageClass+NFS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE5NDM1MzQvYXJ0aWNsZS9kZXRhaWxzLzExNzUyODc2NT9zcG09MTAwMS4yMTAxLjMwMDEuNjY2MS4xJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnRfdDAubm9uZS10YXNrLWJsb2ctMiU3RWRlZmF1bHQlN0VDVFJMSVNUJTdFZGVmYXVsdC0xLTExNzUyODc2NS1ibG9nLTEyMDMyMzUwOC5wY19yZWxldmFudF9kZWZhdWx0JmFtcDtkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudF90MC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VkZWZhdWx0LTEtMTE3NTI4NzY1LWJsb2ctMTIwMzIzNTA4LnBjX3JlbGV2YW50X2RlZmF1bHQmYW1wO3V0bV9yZWxldmFudF9pbmRleD0x\">k8s 学习 (三十) K8s 部署 MinIO 集群</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGFud2VuYmluLWxvZ3MvcC8xMjE5NjI4Ni5odG1s\">k8s 学习笔记之 StorageClass+NFS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcyOTEzOC9hcnRpY2xlL2RldGFpbHMvMTA1ODY1ODQwP3NwbT0xMDAxLjIxMDEuMzAwMS42NjUwLjMmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VkZWZhdWx0LTMtMTA1ODY1ODQwLWJsb2ctMTAwODg3NTMwLnBjX3JlbGV2YW50X2RlZmF1bHQmYW1wO2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RWRlZmF1bHQtMy0xMDU4NjU4NDAtYmxvZy0xMDA4ODc1MzAucGNfcmVsZXZhbnRfZGVmYXVsdCZhbXA7dXRtX3JlbGV2YW50X2luZGV4PTY=\">ks8 的数据管理 --- 动态配置 StorageClass</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbHRhb2RyZWFtL3AvMTUzNjYwMjkuaHRtbA==\">kubernetes 安装 nfs 文件系统</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODU3NzEw\">Kubernetes 中的 PV 和 PVC 分析与使用</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbmppbmp1YW4vYXJ0aWNsZS9kZXRhaWxzLzEyMDc3MDg2MQ==\">k8s 持久化存储 PV 和 PVC</span></li>\n</ol>\n",
            "tags": [
                "学习不止",
                "云原生",
                "云原生",
                "k8s",
                "Minio"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/06/07/learn-and-learn/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/",
            "url": "https://sprenedayf.com/2022/06/07/learn-and-learn/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/",
            "title": "k8s集群搭建",
            "date_published": "2022-06-07T02:26:40.000Z",
            "content_html": "<h1 id=\"服务器准备\"><a class=\"anchor\" href=\"#服务器准备\">#</a> 服务器准备</h1>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>公网 IP</th>\n<th>内网 IP</th>\n<th>系统</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>k8s-master</td>\n<td>119.3.168.188</td>\n<td>192.168.0.194</td>\n<td>CentOS 7.6</td>\n<td>4 核 16G</td>\n</tr>\n<tr>\n<td>k8s-node1</td>\n<td>121.36.55.3</td>\n<td>192.168.0.130</td>\n<td>CentOS 7.6</td>\n<td>4 核 16G</td>\n</tr>\n<tr>\n<td>k8s-node2</td>\n<td>124.70.19.106</td>\n<td>192.168.0.130</td>\n<td>CentOS 7.6</td>\n<td>4 核 16G</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"系统前期设置\"><a class=\"anchor\" href=\"#系统前期设置\">#</a> 系统前期设置</h1>\n<h2 id=\"设置主机名\"><a class=\"anchor\" href=\"#设置主机名\">#</a> 设置主机名</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hostnamectl set-hostname k8s-master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hostnamectl set-hostname k8s-node1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hostnamectl set-hostname k8s-node2</pre></td></tr></table></figure><h2 id=\"配置hosts文件\"><a class=\"anchor\" href=\"#配置hosts文件\">#</a> 配置 hosts 文件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">>></span> /etc/hosts<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>192.168.0.194            k8s-master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>192.168.0.130            k8s-node1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>192.168.0.245             k8s-node2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>EOF</span></pre></td></tr></table></figure><h1 id=\"安装docker\"><a class=\"anchor\" href=\"#安装docker\">#</a> 安装 docker</h1>\n<h2 id=\"卸载旧版本未安装过则跳过\"><a class=\"anchor\" href=\"#卸载旧版本未安装过则跳过\">#</a> 卸载旧版本（未安装过则跳过）</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum remove <span class=\"token function\">docker</span> docker-common container-selinux docker-selinux docker-engine</pre></td></tr></table></figure><h2 id=\"安装新版本\"><a class=\"anchor\" href=\"#安装新版本\">#</a> 安装新版本</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装必要工具集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum <span class=\"token function\">install</span> -y yum-utils</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 添加 docker 的 yum 源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class=\"token comment\">#阿里云</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 更新 yum 缓存</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>yum makecache fast</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 查看 docker 版本信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>yum list docker-ce --showduplicates <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -r</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 挑选指定版本安装 yum -y install docker-ce-&lt; 版本号 ></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>yum -y <span class=\"token function\">install</span> docker-ce-20.10.11-3.el7</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 启动 docker 并设置开机自启</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span> <span class=\"token operator\">&amp;&amp;</span> systemctl start <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 检查 docker 版本</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">docker</span> -v</pre></td></tr></table></figure><h2 id=\"配置daemonjson文件\"><a class=\"anchor\" href=\"#配置daemonjson文件\">#</a> 配置 daemon.json 文件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">></span>/etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  \"exec-opts\": [\"native.cgroupdriver=systemd\"],</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \"log-driver\": \"json-file\",</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \"log-opts\":&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"max-size\": \"100m\"</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  \"registry-mirrors\": [</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        \"https://82m9ar63.mirror.aliyuncs.com\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  ]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 重启 docker</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>systemctl daemon-reload</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span> <span class=\"token operator\">&amp;&amp;</span> systemctl restart <span class=\"token function\">docker</span> <span class=\"token operator\">&amp;&amp;</span> systemctl status <span class=\"token function\">docker</span></pre></td></tr></table></figure><h1 id=\"安装kubeadm三台\"><a class=\"anchor\" href=\"#安装kubeadm三台\">#</a> 安装 kubeadm（三台）</h1>\n<h2 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装一些依赖包</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> -y conntrack ntpdate ntp ipvsadm ipset jq iptables <span class=\"token function\">curl</span> sysstat libseccomp <span class=\"token function\">wget</span> <span class=\"token function\">vim</span> net-tools <span class=\"token function\">git</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> setenforce <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">sed</span> -i <span class=\"token string\">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 关闭 swap</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>swapoff -a  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">sed</span> -ri <span class=\"token string\">'s/.*swap.*/#&amp;/'</span> /etc/fstab</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 关闭防火墙，设置 iptables 检查桥接流量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>systemctl stop firewalld <span class=\"token operator\">&amp;&amp;</span> systemctl disable firewalld</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>yum -y <span class=\"token function\">install</span> iptables-services <span class=\"token operator\">&amp;&amp;</span> systemctl start iptables <span class=\"token operator\">&amp;&amp;</span> systemctl <span class=\"token builtin class-name\">enable</span> iptables <span class=\"token operator\">&amp;&amp;</span> iptables -F <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">service</span> iptables save </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/modules-load.d/k8s.conf</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>br_netfilter</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/sysctl.d/k8s.conf</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>net.bridge.bridge-nf-call-ip6tables = 1</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net.bridge.bridge-nf-call-iptables = 1</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>sysctl --system</pre></td></tr></table></figure><h2 id=\"安装kubelet-kubeadm-kubectl\"><a class=\"anchor\" href=\"#安装kubelet-kubeadm-kubectl\">#</a> 安装 kubelet、kubeadm、kubectl</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 配置阿里源</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span>  <span class=\"token operator\">></span> /etc/yum.repos.d/kubernetes.repo <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[kubernetes]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name=Kubernetes</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>enabled=1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>gpgcheck=0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>repo_gpgcheck=0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 安装 kubelet kubeadm kubectl</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>yum <span class=\"token function\">install</span> -y kubelet-1.20.11 kubectl-1.20.11 kubeadm-1.20.11</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># systemctl 在 enable、disable、mask 子命令里面增加了 --now 选项，可以激活同时启动服务，激活同时停止服务等</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> --now kubelet</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 查看安装的版本</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>kubelet --version</pre></td></tr></table></figure><p>如果想卸载 k8s 组件的话可以进行下面命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 卸载 K8s 组件前，先执行 kubeadm reset 命令，清空 K8s 集群设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> y<span class=\"token operator\">|</span>kubeadm reset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 卸载管理组件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>yum erase -y kubelet kubectl kubeadm kubernetes-cni</pre></td></tr></table></figure><h1 id=\"下载必须镜像三台\"><a class=\"anchor\" href=\"#下载必须镜像三台\">#</a> 下载必须镜像（三台）</h1>\n<p>本来直接用 <code>kubeadm init</code>  就行，但是由于 init 命令是从 k8s.gcr.io 网站上下载镜像，被墙了，所以需要写个脚本把这些镜像下好</p>\n<h2 id=\"kubeadm-init主要执行操作\"><a class=\"anchor\" href=\"#kubeadm-init主要执行操作\">#</a> kubeadm init 主要执行操作</h2>\n<pre><code>[init]：指定版本进行初始化操作\n[preflight] ：初始化前的检查和下载所需要的Docker镜像文件\n[kubelet-start] ：生成kubelet的配置文件”/var/lib/kubelet/config.yaml”，没有这个文件kubelet无法启动，所以初始化之前的kubelet实际上启动失败。\n[certificates]：生成Kubernetes使用的证书，存放在/etc/kubernetes/pki目录中。\n[kubeconfig] ：生成 KubeConfig 文件，存放在/etc/kubernetes目录中，组件之间通信需要使用对应文件。\n[control-plane]：使用/etc/kubernetes/manifest目录下的YAML文件，安装 Master 组件。\n[etcd]：使用/etc/kubernetes/manifest/etcd.yaml安装Etcd服务。\n[wait-control-plane]：等待control-plan部署的Master组件启动。\n[apiclient]：检查Master组件服务状态。\n[uploadconfig]：更新配置\n[kubelet]：使用configMap配置kubelet。\n[patchnode]：更新CNI信息到Node上，通过注释的方式记录。\n[mark-control-plane]：为当前节点打标签，打了角色Master，和不可调度标签，这样默认就不会使用Master节点来运行Pod。\n[bootstrap-token]：生成token记录下来，后边使用kubeadm join往集群中添加节点时会用到\n[addons]：安装附加组件CoreDNS和kube-proxy \n</code></pre>\n<h2 id=\"查看需要下载的镜像\"><a class=\"anchor\" href=\"#查看需要下载的镜像\">#</a> 查看需要下载的镜像</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubeadm config images list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 输出结果，这些都是 K8S 的必要组件，但是由于被墙，是不能直接 docker pull 下来的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>k8s.gcr.io/kube-apiserver:v1.20.15</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>k8s.gcr.io/kube-controller-manager:v1.20.15</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>k8s.gcr.io/kube-scheduler:v1.20.15</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>k8s.gcr.io/kube-proxy:v1.20.15</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>k8s.gcr.io/pause:3.2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>k8s.gcr.io/etcd:3.4.13-0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>k8s.gcr.io/coredns:1.7.0</pre></td></tr></table></figure><h2 id=\"编写pull脚本\"><a class=\"anchor\" href=\"#编写pull脚本\">#</a> 编写 pull 脚本</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 位置自己确定，记住就行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">></span>/root/k8s-script/pull_k8s_images.sh <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"EOF\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># 内容为</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set -o errexit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>set -o nounset</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set -o pipefail</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>##这里定义需要下载的版本</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>KUBE_VERSION=v1.20.15</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>KUBE_PAUSE_VERSION=3.2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ETCD_VERSION=3.4.13-0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>DNS_VERSION=1.7.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>##这是原来被墙的仓库</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>GCR_URL=k8s.gcr.io</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>##这里就是写你要使用的仓库,也可以使用gotok8s</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>DOCKERHUB_URL=registry.cn-hangzhou.aliyuncs.com/google_containers</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>##这里是镜像列表</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>images=(</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>kube-proxy:$&#123;KUBE_VERSION&#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>kube-scheduler:$&#123;KUBE_VERSION&#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>kube-controller-manager:$&#123;KUBE_VERSION&#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>kube-apiserver:$&#123;KUBE_VERSION&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>pause:$&#123;KUBE_PAUSE_VERSION&#125;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>etcd:$&#123;ETCD_VERSION&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>coredns:$&#123;DNS_VERSION&#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>## 这里是拉取和改名的循环语句, 先下载, 再tag重命名生成需要的镜像, 再删除下载的镜像</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>for imageName in $&#123;images[@]&#125; ; do</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  docker pull $DOCKERHUB_URL/$imageName</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  docker tag $DOCKERHUB_URL/$imageName $GCR_URL/$imageName</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  docker rmi $DOCKERHUB_URL/$imageName</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>EOF</span></pre></td></tr></table></figure><h2 id=\"推送脚本到node节点中\"><a class=\"anchor\" href=\"#推送脚本到node节点中\">#</a> 推送脚本到 node 节点中</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">scp</span> /root/k8s-script/pull_k8s_images.sh root@IP地址:/root/k8s-script/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">scp</span> /root/k8s-script/pull_k8s_images.sh root@121.36.55.3:/root/k8s-script/pull_k8s_images.sh</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">scp</span> /root/k8s-script/pull_k8s_images.sh root@124.70.19.106:/root/k8s-script/pull_k8s_images.sh</pre></td></tr></table></figure><h2 id=\"执行脚本\"><a class=\"anchor\" href=\"#执行脚本\">#</a> 执行脚本</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bash</span> /root/k8s-script/pull_k8s_images.sh</pre></td></tr></table></figure><h2 id=\"查看下载结果\"><a class=\"anchor\" href=\"#查看下载结果\">#</a> 查看下载结果</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>REPOSITORY                           TAG        IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>k8s.gcr.io/kube-proxy                v1.20.15   46e2cd1b2594   <span class=\"token number\">4</span> months ago    <span class=\"token number\">99</span>.7MB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>k8s.gcr.io/kube-scheduler            v1.20.15   9155e4deabb3   <span class=\"token number\">4</span> months ago    <span class=\"token number\">47</span>.3MB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>k8s.gcr.io/kube-controller-manager   v1.20.15   d6296d0e06d2   <span class=\"token number\">4</span> months ago    116MB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>k8s.gcr.io/kube-apiserver            v1.20.15   323f6347f5e2   <span class=\"token number\">4</span> months ago    122MB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>k8s.gcr.io/etcd                      <span class=\"token number\">3.4</span>.13-0   0369cf4303ff   <span class=\"token number\">21</span> months ago   253MB</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>k8s.gcr.io/coredns                   <span class=\"token number\">1.7</span>.0      bfe3a36ebd25   <span class=\"token number\">23</span> months ago   <span class=\"token number\">45</span>.2MB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>k8s.gcr.io/pause                     <span class=\"token number\">3.2</span>        80d28bedfe5d   <span class=\"token number\">2</span> years ago     683kB</pre></td></tr></table></figure><h1 id=\"初始化主节点只有主节点\"><a class=\"anchor\" href=\"#初始化主节点只有主节点\">#</a> 初始化主节点（只有主节点）</h1>\n<h2 id=\"编辑文件\"><a class=\"anchor\" href=\"#编辑文件\">#</a> 编辑文件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> kubeadm-config.yaml</pre></td></tr></table></figure><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 修改项下面标出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kubeadm.k8s.io/v1beta2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">bootstrapTokens</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">groups</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">-</span> system<span class=\"token punctuation\">:</span>bootstrappers<span class=\"token punctuation\">:</span>kubeadm<span class=\"token punctuation\">:</span>default<span class=\"token punctuation\">-</span>node<span class=\"token punctuation\">-</span>token</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> abcdef.0123456789abcdef</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">ttl</span><span class=\"token punctuation\">:</span> 24h0m0s</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">usages</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">-</span> signing</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">-</span> authentication</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> InitConfiguration</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">localAPIEndpoint</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">advertiseAddress</span><span class=\"token punctuation\">:</span> 192.168.0.194     <span class=\"token comment\"># 本机 IP</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">bindPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6443</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key atrule\">nodeRegistration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">criSocket</span><span class=\"token punctuation\">:</span> /var/run/dockershim.sock</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> k8s<span class=\"token punctuation\">-</span>master         <span class=\"token comment\"># 本主机名</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">taints</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">effect</span><span class=\"token punctuation\">:</span> NoSchedule</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">-</span>role.kubernetes.io/master</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key atrule\">apiServer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token key atrule\">timeoutForControlPlane</span><span class=\"token punctuation\">:</span> 4m0s</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kubeadm.k8s.io/v1beta2</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key atrule\">certificatesDir</span><span class=\"token punctuation\">:</span> /etc/kubernetes/pki</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">clusterName</span><span class=\"token punctuation\">:</span> kubernetes</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">controllerManager</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>           <span class=\"token comment\"># 虚拟 IP 和 haproxy 端口（可以不填写）</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key atrule\">dns</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> CoreDNS</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key atrule\">etcd</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token key atrule\">local</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token key atrule\">dataDir</span><span class=\"token punctuation\">:</span> /var/lib/etcd</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key atrule\">imageRepository</span><span class=\"token punctuation\">:</span> registry.aliyuncs.com/google_containers     <span class=\"token comment\"># 镜像仓库源要根据自己实际情况修改</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterConfiguration</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">kubernetesVersion</span><span class=\"token punctuation\">:</span> v1.20.15      <span class=\"token comment\"># 修改版本，与前面版本一致，也可通过 kubeadm version 查看版本</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token key atrule\">networking</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token key atrule\">dnsDomain</span><span class=\"token punctuation\">:</span> cluster.local</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">podSubnet</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10.244.0.0/16\"</span>    <span class=\"token comment\"># 新增 pod 子网，固定该 IP 即可</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token key atrule\">serviceSubnet</span><span class=\"token punctuation\">:</span> 10.96.0.0/12</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token key atrule\">scheduler</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># 新增下面设置，固定即可</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kubeproxy.config.k8s.io/v1alpha1</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> KubeProxyConfiguration</pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> ipvs</pre></td></tr></table></figure><h2 id=\"运行初始化命令\"><a class=\"anchor\" href=\"#运行初始化命令\">#</a> 运行初始化命令</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubeadm init --config<span class=\"token operator\">=</span>kubeadm-config.yaml <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> kubeadm-init.log</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 正常运行结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Your Kubernetes control-plane has initialized successfully<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>To start using your cluster, you need to run the following as a regular user:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Alternatively, <span class=\"token keyword\">if</span> you are the root user, you can run:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KUBECONFIG</span><span class=\"token operator\">=</span>/etc/kubernetes/admin.conf</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>You should now deploy a pod network to the cluster.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Run <span class=\"token string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  https://kubernetes.io/docs/concepts/cluster-administration/addons/</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Then you can <span class=\"token function\">join</span> any number of worker nodes by running the following on each as root:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><h2 id=\"根据提示操作\"><a class=\"anchor\" href=\"#根据提示操作\">#</a> 根据提示操作</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在 master 上运行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 推送 node &#123;1..X&#125; 机器上，如果 /root/.kube/config 没有目录要手动创建</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">scp</span> /etc/kubernetes/admin.conf root@121.36.55.3:/root/.kube/config</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">scp</span> /etc/kubernetes/admin.conf root@124.70.19.106:/root/.kube/config</pre></td></tr></table></figure><h2 id=\"查看当前节点状态\"><a class=\"anchor\" href=\"#查看当前节点状态\">#</a> 查看当前节点状态</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get nodes</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME         STATUS     ROLES                  AGE     VERSION</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>k8s-master   NotReady   control-plane,master   9m27s   v1.20.11</pre></td></tr></table></figure><h1 id=\"将子节点加入到主节点下面在子节点上操作\"><a class=\"anchor\" href=\"#将子节点加入到主节点下面在子节点上操作\">#</a> 将子节点加入到主节点下面（在子节点上操作）</h1>\n<p>还是在主节点的 init 命令的输出日志下，有子节点的加入命令，在两台子节点服务器上运行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubeadm <span class=\"token function\">join</span> MasterIP地址:6443 --token xxxxxx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    --discovery-token-ca-cert-hash sha256:xxxxxx </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#正常运行结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>preflight<span class=\"token punctuation\">]</span> Running pre-flight checks</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">[</span>WARNING SystemVerification<span class=\"token punctuation\">]</span>: this Docker version is not on the list of validated versions: <span class=\"token number\">20.10</span>.7. Latest validated version: <span class=\"token number\">19.03</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>preflight<span class=\"token punctuation\">]</span> Reading configuration from the cluster<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>preflight<span class=\"token punctuation\">]</span> FYI: You can <span class=\"token function\">look</span> at this config <span class=\"token function\">file</span> with <span class=\"token string\">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Writing kubelet configuration to <span class=\"token function\">file</span> <span class=\"token string\">\"/var/lib/kubelet/config.yaml\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Writing kubelet environment <span class=\"token function\">file</span> with flags to <span class=\"token function\">file</span> <span class=\"token string\">\"/var/lib/kubelet/kubeadm-flags.env\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Starting the kubelet</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>kubelet-start<span class=\"token punctuation\">]</span> Waiting <span class=\"token keyword\">for</span> the kubelet to perform the TLS Bootstrap<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>This <span class=\"token function\">node</span> has joined the cluster:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>* Certificate signing request was sent to apiserver and a response was received.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>* The Kubelet was informed of the new secure connection details.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Run <span class=\"token string\">'kubectl get nodes'</span> on the control-plane to see this <span class=\"token function\">node</span> <span class=\"token function\">join</span> the cluster.</pre></td></tr></table></figure><h2 id=\"查看集群节点\"><a class=\"anchor\" href=\"#查看集群节点\">#</a> 查看集群节点</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl get nodes</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-node2 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get nodes</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>NAME         STATUS     ROLES                  AGE     VERSION</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>k8s-master   NotReady   control-plane,master   14m     v1.20.11</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>k8s-node1    NotReady   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>                 3m39s   v1.20.11</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>k8s-node2    NotReady   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>                 57s     v1.20.11</pre></td></tr></table></figure><h1 id=\"部署flannel网络主节点操作\"><a class=\"anchor\" href=\"#部署flannel网络主节点操作\">#</a> 部署 flannel 网络（主节点操作）</h1>\n<h2 id=\"安装flannel网络插件\"><a class=\"anchor\" href=\"#安装flannel网络插件\">#</a> 安装 flannel 网络插件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 先拉取镜像，此过程国内速度比较慢</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> pull quay.io/coreos/flannel:v0.14.0</pre></td></tr></table></figure><h3 id=\"配置flannel\"><a class=\"anchor\" href=\"#配置flannel\">#</a> 配置 flannel</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 去 https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml 弄一个 yml 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl create -f kube-flannel.yml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>podsecuritypolicy.policy/psp.flannel.unprivileged created</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>clusterrole.rbac.authorization.k8s.io/flannel created</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>clusterrolebinding.rbac.authorization.k8s.io/flannel created</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>serviceaccount/flannel created</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>configmap/kube-flannel-cfg created</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>daemonset.apps/kube-flannel-ds created</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 查看 pod, 可以看到 flannel 组件已经运行起来了。默认系统组件都安装在 kube-system 这个命名空间 (namespace) 下</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pod -n kube-system</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>NAME                                 READY   STATUS    RESTARTS   AGE</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>coredns-7f89b7bc75-6wmct             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          51m</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>coredns-7f89b7bc75-nvnnr             <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          51m</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>etcd-k8s-master                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          51m</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>kube-apiserver-k8s-master            <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          51m</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>kube-controller-manager-k8s-master   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          51m</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>kube-flannel-ds-dbwqc                <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          12m</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>kube-flannel-ds-pfk6t                <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          12m</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>kube-flannel-ds-q8tkd                <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          12m</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>kube-proxy-jcll5                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          40m</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>kube-proxy-l68cn                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          37m</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>kube-proxy-qwf5z                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          51m</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>kube-scheduler-k8s-master            <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          51m</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 再次查看 node, 发现状态已经变成了 Ready</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get node</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>NAME         STATUS   ROLES                  AGE   VERSION</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>k8s-master   Ready    control-plane,master   51m   v1.20.11</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>k8s-node1    Ready    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>                 40m   v1.20.11</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>k8s-node2    Ready    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>                 37m   v1.20.11</pre></td></tr></table></figure><p>如果想要卸载 flannel 则运行下面命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl delete -f kube-flannel.yml</pre></td></tr></table></figure><h1 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81MTU0MmIwYjIzOWI=\"> kubeadm 安装 k8s 集群（阿里云服务）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTYwMzQ2L2FydGljbGUvZGV0YWlscy8xMjA4NTEwODQ=\">kubeadm 安装 k8s 集群</span></li>\n</ol>\n",
            "tags": [
                "学习不止",
                "云原生",
                "云原生",
                "k8s"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/05/07/Java/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%932/",
            "url": "https://sprenedayf.com/2022/05/07/Java/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%932/",
            "title": "操作数据库方法总结2",
            "date_published": "2022-05-07T08:24:37.000Z",
            "content_html": "<h1 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h1>\n<p><a href=\"/2022/05/07/Java/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%931/\">上一篇文章</a>中介绍了 JDBC、JDBCTemplate 和数据库连接池，太原始了吧，我们想要做大做强，不上 ORM 框架怎么能行，走起！<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h1zxgwcev8j205k05k3yl.jpg\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"mybatis\"><a class=\"anchor\" href=\"#mybatis\">#</a> MyBatis</h1>\n<p><code>MyBatis</code>  是一个支持普通 SQL 查询，存储过程和高级映射的优秀持久层 (半) ORM 框架，它消除了几乎所有的 <code>JDBC</code>  代码和参数的手工设置以及对结果集的检索封装。 <code>MyBatis</code>  可以使用简单的 XML 或注解用于配置和原始映射，将接口和 Java 的 <code>POJO</code> （Plain Old Java Objects，普通的 Java 对象）映射成数据库中的记录。<br />\n细心的同学一定发现了，这里说的是半 ORM 框架，为什么是半？ <code>ORM（Object-Relational Mapping）</code> 对象关系映射，简单的说：<strong>ORM 就是建立实体类和数据库表之间的关系，从而达到操作实体类就相当于操作数据库表的目的</strong>。而我们的 MyBatis 还是需要写 sql 语句的嘛，只不过它帮我们封装了映射，所以只能算得上半 ORM 框架啦～</p>\n<h2 id=\"基本原理\"><a class=\"anchor\" href=\"#基本原理\">#</a> 基本原理</h2>\n<p>我之前的文章中有写过 <code>MyBatis</code>  封装结果集的原理，这里我不打算再走源码了，而是简单的了解一下整体思想就可以啦～(主要考虑到就这么干看源码很容易就忽略一些重点，本质上还是在了解流程，所以干脆就直接了解思想吧🤣)<br />\n 首先我们了解过 <code>JDBC</code>  的工作流程，并知道了 <code>JDBC</code>  有四个核心类：</p>\n<ul>\n<li><strong> <code>DriverManager</code> </strong>: 用于注册数据库连接</li>\n<li><strong> <code>Connection</code> </strong>: 与数据库连接对象</li>\n<li><strong> <code>Statement/PrepareStatement</code> </strong>: 操作数据库 SQL 语句的对象</li>\n<li><strong> <code>ResultSet</code> </strong>: 结果集<br />\n而 <code>MyBatis</code>  也有四大核心对象：</li>\n<li><strong> <code>SqlSession</code>  对象</strong>：该对象中包含了执行 SQL 语句的所有方法。类似于 <code>JDBC</code>  里面的 <code>Connection</code></li>\n<li><strong> <code>Executor</code>  接口</strong>：它将根据 <code>SqlSession</code>  传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。类似于 JDBC 里面的 <code>Statement/PrepareStatement</code></li>\n<li><strong> <code>MappedStatement</code>  对象</strong>：该对象是对映射 SQL 的封装，用于存储要映射的 SQL 语句的 id、参数等信息</li>\n<li><strong> <code>ResultHandler</code>  对象</strong>：用于对返回的结果进行处理，最终得到自己想要的数据格式或类型。可以自定义返回类型<br />\n MyBatis 的具体工作流程如下图展示：<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h208qx1302j20kd0n3abk.jpg\" alt=\"\" height=\"650px\" /></li>\n</ul>\n<ol>\n<li><strong>读取 MyBatis 的配置文件</strong>。 <code>mybatis-config.xml</code>  为 MyBatis 的全局配置文件，用于配置数据库连接信息。</li>\n<li><strong>加载映射文件</strong>。映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 <code>MyBatis</code>  配置文件 <code>mybatis-config.xml</code>  中加载。 <code>mybatis-config.xml</code>  文件可以加载多个映射文件，每个文件对应数据库中的一张表。</li>\n<li><strong>构造会话工厂</strong>。通过 <code>MyBatis</code>  的环境配置信息构建会话工厂 <code>SqlSessionFactory</code> 。</li>\n<li><strong>创建会话对象</strong>。由会话工厂创建 <code>SqlSession</code>  对象，该对象中包含了执行 SQL 语句的所有方法。</li>\n<li><strong>Executor 执行器</strong>。 <code>MyBatis</code>  底层定义了一个 <code>Executor</code>  接口来操作数据库，它将根据 <code>SqlSession</code>  传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。</li>\n<li><strong>MappedStatement 对象</strong>。在 <code>Executor</code>  接口的执行方法中有一个 <code>MappedStatement</code>  类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。</li>\n<li><strong>输入参数映射</strong>。输入参数类型可以是 <code>Map</code> 、 <code>List</code>  等集合类型，也可以是基本数据类型和 <code>POJO</code>  类型。输入参数映射过程类似于 <code>JDBC</code>  对 <code>preparedStatement</code>  对象设置参数的过程。</li>\n<li><strong>输出结果映射</strong>。输出结果类型可以是 <code>Map</code> 、 <code>List</code>  等集合类型，也可以是基本数据类型和 <code>POJO</code>  类型。输出结果映射过程类似于 <code>JDBC</code>  对结果集的解析过程。</li>\n</ol>\n<h2 id=\"spring实战\"><a class=\"anchor\" href=\"#spring实战\">#</a> Spring 实战</h2>\n",
            "tags": [
                "Java",
                "基础知识",
                "Java基础",
                "数据库"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/05/07/Java/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%931/",
            "url": "https://sprenedayf.com/2022/05/07/Java/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%931/",
            "title": "操作数据库方法总结1",
            "date_published": "2022-05-07T03:49:15.000Z",
            "content_html": "<h1 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h1>\n<p>最近一直在操作数据库，然后就发现自己竟然只是会用 Mybatis，知道 JDBCTemplate，对于为什么要用它们以及它们的出现都是为了解决什么情景只能磕磕巴巴的说出个大概，所以想着把 Java 操作数据库的方法进行个系统的梳理，做个总结，希望一套下来自己能够清醒一点～<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h1yptgqj1rj209a09lt8w.jpg\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>来说一下原始方法吧，JDBC 的全称是 <code>Java Database Connectivity</code> ，意为 Java 和数据库的连接。设想这样一个场景，我们的 Java 程序需要连接各种各样的数据库，难道我们要为每个数据库都写一套连接管理代码吗，累死了好吧。JDBC 是 SUN 公司提供的一套操作数据库的接口规范，定义了用来访问数据库的标准 Java 类库。为了开发方便，SUN 公司提供了一套接口，让数据库厂商实现这些接口，<strong>程序员只需要使用这个接口就可以操作不同的数据库</strong>，不需要关注底层数据库驱动的安装，从而大大简化和加快了开发过程。<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1ypzb0qfmj20fk09uq3g.jpg\" alt=\"\" height=\"400px\" /></p>\n<ul>\n<li><strong> <code>JDBC API</code> </strong>：即面向应用的 API，是一个抽象的接口，供<strong>应用程序开发人员</strong>使用，提供了程序到 JDBC 管理器的连接。</li>\n<li><strong> <code>JDBC Driver API</code> </strong>：即面向数据库驱动的 API，需要<strong>开发商</strong>去实现这个接口，提供了 JDBC 管理器到数据库驱动程序的连接。<br />\n我们要使用的主要就是下面四个核心类：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DriverManager</span>类<span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>DriverManager</span><span class=\"token punctuation\">)</span>： 用于注册驱动，创建连接对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Connection</span>接口<span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Connection</span><span class=\"token punctuation\">)</span>：     表示与数据库创建的连接。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Statement</span>接口<span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Statement</span><span class=\"token punctuation\">)</span>：       执行数据库SQL语句，并返回相应结果的对象。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ResultSet</span>接口<span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>ResultSet</span><span class=\"token punctuation\">)</span>：       结果集或一张虚拟表，用于存储表数据的对象。</pre></td></tr></table></figure><p>然后 JDBC 操作数据库的步骤如下：</p>\n<ol>\n<li>加载驱动</li>\n<li>创建数据库连接</li>\n<li>创建 sql 语句并执行</li>\n<li>处理执行结果</li>\n<li>释放资源</li>\n</ol>\n<h2 id=\"实操\"><a class=\"anchor\" href=\"#实操\">#</a> 实操</h2>\n<p>说了那么多，我们简单的上手一下，这个流程我相信大家肯定都灰常熟悉～</p>\n<ol>\n<li>数据表，这里我们用的数据库是 <code>database_Learn</code>  创建一个表 <code>users</code></li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>users<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span>    <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>gender<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> users<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'玛奇玛'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建一个 maven 项目，导入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.25<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建一个测试类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 使用 Jdbc 访问数据库需要以下几步:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 1. 加载驱动</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 2. 创建数据库连接</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 3. 创建 sql 语句并执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 4. 处理执行结果</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 5. 释放资源</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/database_Learn?characterEncoding=utf-8\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">PreparedStatement</span> statement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 1. 加载驱动程序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 2. 获得数据库链接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            conn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASSWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 3. 通过数据库的连接操作数据库，实现增删改查（使用 Statement 类）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">String</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"玛奇玛\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">String</span> sql<span class=\"token operator\">=</span><span class=\"token string\">\"select * from users where name=?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            statement <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            rs <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 4. 处理数据库的返回结果 (使用 ResultSet 类)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 5. 关闭资源</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>conn<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    conn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    rs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">chageUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">String</span> URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/database_Learn?characterEncoding=utf-8\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">String</span> PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">PreparedStatement</span> statement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 1. 加载驱动程序</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// 2. 获得数据库链接</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            conn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASSWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">// 3. 通过数据库的连接操作数据库，实现增删改查（使用 Statement 类）</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token class-name\">String</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"蕾塞\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">String</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token class-name\">String</span> sql<span class=\"token operator\">=</span><span class=\"token string\">\"insert into users(`name`,`age`,`gender`) values(?,?,?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            statement <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            statement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 5. 关闭资源</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>conn<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    conn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token function\">chageUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后你现在看到了，你每次操作数据库都要重复 1-5 这些步骤，而我们每次其实只有步骤 3 和步骤 4 是不同的，其他的都是重复步骤！这时候你可能会说，呵我用一个公共类或者公共方法把这些步骤封装一下不就行了？好，那我们来说说你的这个思路可能会有什么问题？</p>\n<ol>\n<li>如果我把 <code>Connection</code>  设置为全局变量，每次我都使用同一个连接，那么你这个应用程序是打算永远都只会有一个人使用吗？如果请求多了，而这个 <code>Connection</code>  连接还没有处理完之前的请求是不是就要排队等待？</li>\n<li><code>ResultSet</code>  设置为全局总行了吧？不行。如果你每次请求都创建不同的 <code>Connection</code> ，而 <code>ResultSet</code>  用同一个，就会导致在多个请求的情况下有的请求的结果丢失！</li>\n<li>这个原因当然是后话了，已经有框架帮我们解决重复建立和释放连接的问题了，你能保证你自己造的轮子比人家的好嘛？</li>\n</ol>\n<h1 id=\"jdbctemplate\"><a class=\"anchor\" href=\"#jdbctemplate\">#</a> JDBCTemplate</h1>\n<p><code>JDBCTemplate</code>  是 <code>Spring</code>  提供访问 <code>JDBC</code>  的一个模板，目的是使 <code>JDBC</code>  更加易于使用。 <code>JDBCTemplate</code>  处理了资源的建立和释放，帮助我们避免一些常见的错误，比如忘了总要关闭连接，程序员只需要提供 SQL 语句和提取结果。<br />\n因为是 <code>Spring</code>  提供的，我知道大家用 <code>SpringBoot</code>  多，但是我还是想从 <code>Spring</code>  使用 <code>JDBCTemplate</code>  开始说起，因为我觉得这样会理解的更深刻一些。<br />\n那么我们先在 maven 项目中导入以下依赖:</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.7.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.7.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-tx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.7.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.25<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"初试\"><a class=\"anchor\" href=\"#初试\">#</a> 初试</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* JDBCTemplate 最基础的用法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 准备数据源：spring 的内置数据源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">DriverManagerDataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DriverManagerDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/database_Learn?characterEncoding=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ds<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cljcljclj215\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 1. 创建 JdbcTemplate 对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">JdbcTemplate</span> jt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 给 jt 设置数据源</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        jt<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>ds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 2. 执行操作</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> jt<span class=\"token punctuation\">.</span><span class=\"token function\">queryForList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM users;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 输出查询结果</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到没有之前使用 <code>JDBC</code>  的时候那么多的代码，我们只需要创建 <code>JDBCTemplate</code>  然后给他个 sql 语句就行了，执行结果如下：<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1z00f0v69j20de05eweh.jpg\" alt=\"\" height=\"200px\" /></p>\n<h2 id=\"jdbctemplate在spring中的使用\"><a class=\"anchor\" href=\"#jdbctemplate在spring中的使用\">#</a> JDBCTemplate 在 Spring 中的使用</h2>\n<h3 id=\"基础使用\"><a class=\"anchor\" href=\"#基础使用\">#</a> 基础使用</h3>\n<p>首先我们要在 <code>resources</code>  目录下新增一个 <code>testBean.xml</code>  文件来配置一下：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/database_Learn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 配置 JdbcTemplate --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.core.JdbcTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 向 dataSource 注入数据源 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后我们想要使用的时候就可以这样:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 1. 获取容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testBean.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 2. 获取对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">JdbcTemplate</span> jt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">)</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbcTemplate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 3. 执行操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> maps <span class=\"token operator\">=</span> jt<span class=\"token punctuation\">.</span><span class=\"token function\">queryForList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM `users`\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> maps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>应该不难理解吧？我们都知道 Spring 有 IOC 控制反转，就是把 bean 的创建过程交给 Spring 容器来处理，要用的时候直接跟 Spring 容器拿就行了。</p>\n<h3 id=\"进阶\"><a class=\"anchor\" href=\"#进阶\">#</a> 进阶</h3>\n<p>上面的示例我们是利用了一个 Map 来接收数据，但是其实我们更多的都是用实体来接收数据的吧，这就需要我们将数据库查询到的数据和实体类之间创建一个映射关系。</p>\n<ol>\n<li>创建实体类 Users</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> gender<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGender</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建数据库到实体类的映射关系</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersRowMapper</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RowMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Users</span> <span class=\"token function\">mapRow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> resultSet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Users</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        u<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        u<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        u<span class=\"token punctuation\">.</span><span class=\"token function\">setGender</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建业务接口并实现对应的实现类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 新增用户</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取所有用户</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JdbcTemplate</span> jdbcTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setJdbcTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jdbcTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO `users`(`name`,`age`,`gender`) VALUES(?,?,?)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Types</span><span class=\"token punctuation\">.</span>VARCHAR<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Types</span><span class=\"token punctuation\">.</span>INTEGER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Types</span><span class=\"token punctuation\">.</span>VARCHAR<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">></span></span> res <span class=\"token operator\">=</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM `users`\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsersRowMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>在 <code>resources</code>  目录下新增一个 <code>bean.xml</code></li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/database_Learn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 配置业务 bean --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.sprenedayf.service.impl.UserServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 向 dataSource 注入数据源 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 1. 获取容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 2. 获取对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">UserService</span> service <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UserService</span><span class=\"token punctuation\">)</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 3. 执行操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span> user <span class=\"token operator\">:</span> users<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<h3 id=\"模板方法设计模式与回调机制\"><a class=\"anchor\" href=\"#模板方法设计模式与回调机制\">#</a> 模板方法设计模式与回调机制</h3>\n<p>在我们看 <code>JDBCTemplate</code>  源码之前，需要先了解一下模板设计模式。在 JDBC 中不变的部分是创建连接和销毁连接的部分，改变的部分是中间的 sql 操作，所以我们希望可以将不变的部分统一管理起来，只需要关注其中要变的部分。模板设计模式就可以很好的解决这个问题。</p>\n<h4 id=\"模板设计模式\"><a class=\"anchor\" href=\"#模板设计模式\">#</a> 模板设计模式</h4>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1z3k6fidtj20b808174s.jpg\" alt=\"\" height=\"400px\" /><br />\n模板设计模式是指在一个父类方法中定义一个算法的骨架，将某些步骤推迟到子类中实现，这样可以<span class=\"yellow\">让子类在不改变算法整体的结构情况下，重新定义算法中的某些步骤</span>。<br />\n有点抽象，不明白？我们来举个简单的例子立马就清楚了～比如我们现在有个游戏有两个结局，一个是 HE 一个是 BE，女主和我们说的话是一样的，但是根据我们的选择会产生不同的结局，所以这时候我们就可以把通用的剧情用一个类 <code>NormalDraft</code>  来保存，然后不同的结局就继承这个 <code>NormalDraft</code>  类来分别实现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span>  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NormalDraft</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 常规通用剧情  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">templateDraft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 女主：不可以留下来吗？</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 女主：我知道</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HappyEnding</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">NormalDraft</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我想我们可以回家了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当然，我所做的这一切就是为了能够留在这里！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BadEnding</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">NormalDraft</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"或许当这个世界上没有小怪兽的时候，我就会回来了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不行，作为光的化身，我要去拯救全世界！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> game <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 本人唯爱 BE，所以当然要走 BE 线了！！！</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">NormalDraft</span> draft <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadEnding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        draft<span class=\"token punctuation\">.</span><span class=\"token function\">templateDraft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结来说就是：<span class=\"yellow\">抽象模板类定义了一套工作流程，而具体实现类对工作流程中的某些特定步骤进行了实现</span></p>\n<h4 id=\"回调机制\"><a class=\"anchor\" href=\"#回调机制\">#</a> 回调机制</h4>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1zn2wu3gyj20fc06o0sz.jpg\" alt=\"\" height=\"350px\" /><br />\n什么是回调？现在有两个类 A 和 B ，A 调用 B，B 反过来又调用 A，这种调用机制就叫作 “回调”。在 Java 中需要使用回调函数的类对象来实现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ICallback</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">methodToCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICallback</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 前置通用代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        callback<span class=\"token punctuation\">.</span><span class=\"token function\">methodToCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 相当于是执行了 AClass 中定义的代码逻辑</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 后置通用代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">BClass</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        b<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ICallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 回调对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">methodToCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Call back me.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 继续执行 AClass 的后续代码</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"模板模式-vs-回调\"><a class=\"anchor\" href=\"#模板模式-vs-回调\">#</a> 模板模式 VS 回调</h4>\n<ul>\n<li>从应用场景上来看，<strong>同步回调跟模板模式几乎一致</strong>。它们都是在一个大的算法骨架中，自由替换其中的某个步骤，起到代码复用和扩展的目的。而异步回调跟模板模式有较大差别，更像是观察者模式。</li>\n<li>从代码实现上来看，回调和模板模式完全不同。<strong>回调基于组合关系</strong>来实现，把一个对象传递给另一个对象，是一种对象之间的关系；<strong>模板模式基于继承关系</strong>来实现，子类重写父类的抽象方法，是一种类之间的关系。</li>\n<li>回调相对于模板模式会更加灵活：\n<ul>\n<li>像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力。</li>\n<li>回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类。</li>\n<li>如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"query方法\"><a class=\"anchor\" href=\"#query方法\">#</a> query 方法</h3>\n<p>这里有一个大佬画得时序图我觉得非常直观，可以在后面我说完源码之后回来看一下，应该很好理解：<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1z2eyvy4ij20xc0or40z.jpg\" alt=\"\" /></p>\n<ol>\n<li><strong>query 方法</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ResultSetExtractor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> rse<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DataAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SQL must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>rse<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ResultSetExtractor must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Executing SQL query [\"</span> <span class=\"token operator\">+</span> sql <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 定义的回调类，本质上就是执行查询语句，然后将 ResultSet 关闭</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryStatementCallback</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StatementCallback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SqlProvider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">QueryStatementCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">doInStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Statement</span> stmt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">Object</span> var3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                rs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                var3 <span class=\"token operator\">=</span> rse<span class=\"token punctuation\">.</span><span class=\"token function\">extractData</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeResultSet</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> var3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> sql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 这里就是根据不同的回调方法来实现不同的操作</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatementCallback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryStatementCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>execute 方法</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatementCallback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DataAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Callback object must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 获取 DataSource 数据库连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Connection</span> con <span class=\"token operator\">=</span> <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtainDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Object</span> var11<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        stmt <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applyStatementSettings</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">doInStatement</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行 query 中定义的 QueryStatementCallback 的 doInStatement 代码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleWarnings</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        var11 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> var9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeStatement</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        stmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseConnection</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        con <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">translateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StatementCallback\"</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> var9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 关闭 Connection 和 Statement</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeStatement</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseConnection</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> var11<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行完这一句后返回到 query 方法中继续执行</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>就这么点核心代码了，是不是很简单？捋一下其实就是，我们的查询操作最终都是要通过 <code>query</code>  方法来执行， <code>query</code>  方法中定义了一个回调类，这个回调类主要操作就是定义 <code>ResultSet</code> ，执行 <code>sql</code>  查询，释放 <code>ResultSet</code> ；我们都知道 <code>JDBC</code>  操作中 <code>Connection</code>  和 <code>Statement</code>  都是重复的，只有 <code>ResultSet</code>  是变化的，所以在 <code>execute</code>  方法中就是来获取和释放 <code>Connection</code>  和 <code>Statement</code>  的；通过使用回调函数，将获取到的 <code>statement</code>  传入然后执行查询操作， <code>execute</code>  方法帮我们完成释放连接的操作，相当于是我们只需要关心 <code>sql</code>  逻辑即可，是不是方便很多啦？<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1zntsdbtbj20b70bs74r.jpg\" alt=\"\" height=\"150px\" /></p>\n<h3 id=\"update方法\"><a class=\"anchor\" href=\"#update方法\">#</a> update 方法</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1zos42of2j20sg0p3wgw.jpg\" alt=\"\" /></p>\n<ol>\n<li><strong>update 方法</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DataAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SQL must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Executing SQL update [\"</span> <span class=\"token operator\">+</span> sql <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 回调类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateStatementCallback</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StatementCallback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SqlProvider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">UpdateStatementCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">doInStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Statement</span> stmt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 修改了多少条</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SQL update affected \"</span> <span class=\"token operator\">+</span> rows <span class=\"token operator\">+</span> <span class=\"token string\">\" rows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> rows<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> sql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">updateCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatementCallback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateStatementCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>execute 方法</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatementCallback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DataAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Callback object must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 获取 DataSource 数据库连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Connection</span> con <span class=\"token operator\">=</span> <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtainDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Object</span> var11<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        stmt <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applyStatementSettings</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">doInStatement</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行 update 中定义的 UpdateStatementCallback 的 doInStatement 代码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleWarnings</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        var11 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> var9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeStatement</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        stmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseConnection</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        con <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">translateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StatementCallback\"</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> var9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 关闭 Connection 和 Statement</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeStatement</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseConnection</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> var11<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行完这一句后返回到 update 方法中继续执行</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现没有，其实这都是同一段 <code>execute</code>  代码啊！正式因为传入的 <code>callback</code>  不同所以才执行了不同的操作，实现了 <code>execute</code>  代码的复用！妙啊！<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1zosqx69mj205i05faa0.jpg\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"连接池\"><a class=\"anchor\" href=\"#连接池\">#</a> 连接池</h1>\n<p>好的， <code>JDBCTemplate</code>  帮我们解决了代码复用的问题，但是还有个问题呀，我们频繁的创建和销毁连接真的很没有必要有没有！明明我查询个数据可能只要 10ms 的时间，但是我创建和销毁连接却可能需要 100ms 的时间，得不偿失啊！所以这时候就需要我们的连接池了！</p>\n<div class=\"note info no-icon\">\n<p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序<strong>重复使用一个现有的数据库连接</strong>，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。</p>\n</div>\n<h2 id=\"c3p0\"><a class=\"anchor\" href=\"#c3p0\">#</a> C3P0</h2>\n<ol>\n<li>导入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- c3p0 连接池依赖 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>c3p0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>c3p0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.9.1.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.mchange<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mchange-commons-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.2.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>编写配置 xml 文件</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcUrl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/database_Learn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 配置 JdbcTemplate --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.core.JdbcTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 向 dataSource 注入数据源 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>测试</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 1. 获取容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testC3P0.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 2. 获取对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">JdbcTemplate</span> jt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">)</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbcTemplate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 3. 执行操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> maps <span class=\"token operator\">=</span> jt<span class=\"token punctuation\">.</span><span class=\"token function\">queryForList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM `users`\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> maps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到有很多的输出日志，里面这些参数都是可以配置的，可以自己探索一下<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1zw1oxsxbj226409mdn6.jpg\" alt=\"\" /></p>\n<h2 id=\"druid\"><a class=\"anchor\" href=\"#druid\">#</a> Druid</h2>\n<p>说起连接池感觉更熟悉的还是 Druid 吧，这里依然是先给个简单的上手示例：</p>\n<ol>\n<li>导入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>配置 xml 文件</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.druid.pool.DruidDataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>init<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 其实 driverClassName 可配可不配，可以根据 url 自动匹配 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/database_Learn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cljcljclj215<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的 filter:stat、日志用的 filter:log4j、防御 sql 注入的 filter:wall --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filters<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stat<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 最大连接池数量 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxActive<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 初始化时建立物理连接的个数。初始化发生在显示调用 init 方法，或者第一次 getConnection () 时 --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>initialSize<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 获取连接时最大等待时间 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxWait<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6000<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 最小连接池数量 --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>minIdle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>timeBetweenEvictionRunsMillis<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60000<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>minEvictableIdleTimeMillis<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300000<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>testWhileIdle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>testOnBorrow<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>testOnReturn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 是否缓存 preparedStatement，也就是 PSCache。PSCache 对支持游标的数据库性能提升巨大，比如说 oracle。在 mysql 下建议关闭 --></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>poolPreparedStatements<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxOpenPreparedStatements<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>asyncInit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 配置 JdbcTemplate --></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.core.JdbcTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 向 dataSource 注入数据源 --></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>测试</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 1. 获取容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testDruid.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 2. 获取对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">JdbcTemplate</span> jt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">)</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbcTemplate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 3. 执行操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> maps <span class=\"token operator\">=</span> jt<span class=\"token punctuation\">.</span><span class=\"token function\">queryForList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM `users`\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> maps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后来看看连接池的核心思想是什么吧？<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1zwqm0cfhj21080ommzc.jpg\" alt=\"\" /><br />\n本质上就是图上这个流程，具体的怎么创建和怎么回收的在现阶段暂不做了解，明白现在这些就可以啦～</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>这篇主要讲了一些稍微基础的数据库操作方法，可能现在项目中更多的都是利用 ORM 框架，但是在我整理总结这篇文章的时候还是收获了很多东西的，总算是理清了这些数据库操作方法之间的关系和区别，而且对其中的设计思想也清楚了很多～</p>\n<ul>\n<li>JDBC 是我们最原始的操作数据库的方式，每次都需要我们自己创建、销毁连接</li>\n<li>连接池是为了解决频繁创建和销毁连接带来的损耗，将数据库连接统一管理起来，其实 Java 中的各种池子基本上都是干这个的，统一管理～</li>\n<li>JDBCTemplate 是 Spring 帮我们将 JDBC 封装了一下，使用了模板设计模式思想，但是在 Java 中是利用回调函数来实现的，让我们可以把重心放在主要的业务逻辑中，可以与连接池一起使用～</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yMDJlMmRlOWJjOGE=\">模板模式 VS Callback 回调</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTg1Nzg2Njg4MTA2NjU5ODcw\">DruidDataSource 原理</span></li>\n</ol>\n",
            "tags": [
                "Java",
                "基础知识",
                "Java基础",
                "数据库"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/05/04/Java/%E8%AE%B0%E4%B8%80%E6%AC%A1MyBatis%E5%B0%81%E8%A3%85%E7%BB%93%E6%9E%9C%E9%9B%86java-lang-Integer-cannot-be-cast-to-java-lang-String%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://sprenedayf.com/2022/05/04/Java/%E8%AE%B0%E4%B8%80%E6%AC%A1MyBatis%E5%B0%81%E8%A3%85%E7%BB%93%E6%9E%9C%E9%9B%86java-lang-Integer-cannot-be-cast-to-java-lang-String%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "记一次MyBatis封装结果集java.lang.Integer cannot be cast to java.lang.String异常处理",
            "date_published": "2022-05-04T03:31:43.000Z",
            "content_html": "<h1 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h1>\n<p>项目中利用 Mybatis 来获取数据，使用 Map 来对结果进行封装，但是在获取某个具体的值时抛出 <code>java.lang.Integer cannot be cast to java.lang.String</code>  异常，在 debug 过程中对为什么要这样解决产生了疑惑，所以想记录一下～<br />\n 项目代码如下：</p>\n<ol>\n<li><strong>Dao.java</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getEntityByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> entityName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>Mapper.xml</strong></li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEntityByName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.util.HashMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SELECT entity_id, entity_table FROM entity WHERE entity_name=#&#123;entityName&#125;;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>使用</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entityInfo <span class=\"token operator\">=</span> DAO<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityByName</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> entityId <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>entityInfo<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entity_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 抛出异常</span></pre></td></tr></table></figure><h1 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h1>\n<p>先说结论，解决方法很简单，将使用处代码修改为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> entityId <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>entityInfo<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entity_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>虽然这时候 IDEA 会告诉你 <code>String.valueOf()</code>  方法很多余，但是相信我，真的不多余...<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h1w4epraafj20c80c6t96.jpg\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"原理解析\"><a class=\"anchor\" href=\"#原理解析\">#</a> 原理解析</h1>\n<h2 id=\"java中的泛型与类型擦除\"><a class=\"anchor\" href=\"#java中的泛型与类型擦除\">#</a> Java 中的泛型与类型擦除</h2>\n<p>之前对泛型并没有特别多的了解，类型擦除也是没有听说过，但是在解释这个问题上还是需要了解一下这方面的知识的～</p>\n<h3 id=\"java泛型的实现方法类型擦除\"><a class=\"anchor\" href=\"#java泛型的实现方法类型擦除\">#</a> Java 泛型的实现方法：类型擦除</h3>\n<p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，正确理解泛型概念的首要前提是理解类型擦除。Java 的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程称为<strong>类型擦除</strong>。</p>\n<ol>\n<li><strong>原始类型相等</strong>：通过 a 对象和 b 对象的 <code>getClass()</code>  方法获取他们的类的信息，最后发现结果为 <code>true</code> 。说明泛型类型 <code>String</code>  和 <code>Integer</code>  都被擦除掉了，只剩下原始类型。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>通过反射添加其他类型元素</strong>：定义了一个 <code>ArrayList</code>  泛型类型实例化为 <code>Integer</code>  对象，如果直接调用 <code>add()</code>  方法，那么只能存储整数数据，不过当我们利用反射调用 <code>add()</code>  方法的时候，却可以存储字符串，这说明了 <code>Integer</code>  泛型实例在编译之后被擦除掉了，只保留了原始类型。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这样调用 add 方法只能存储整形，因为泛型类型的实例为 Integer</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token string\">\"asd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类型擦除后保留的原始类型\"><a class=\"anchor\" href=\"#类型擦除后保留的原始类型\">#</a> 类型擦除后保留的原始类型</h3>\n<p><strong>原始类型</strong> 就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型，无论何时定义一个泛型，相应的原始类型都会被自动提供，类型变量擦除，并使用其限定类型（无限定的变量用 Object）替换。</p>\n<ol>\n<li><strong>原始类型 Object</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span>  value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Pair 的原始类型为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span>  value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为在 <code>Pair&lt;T&gt;</code>  中，T 是一个无限定的类型变量，所以用 <code>Object</code>  替换，其结果就是一个普通的类，如同泛型加入 Java 语言之前的已经实现的样子。在程序中可以包含不同类型的 <code>Pair</code> ，如 <code>Pair&lt;String&gt;</code>  或 Pair <code>&lt;Integer&gt;</code> ，但是擦除类型后他们的就成为原始的 <code>Pair</code>  类型了，原始类型都是 <code>Object</code> <br />\n<span class=\"yellow\"> 所以我们的集合类，如 ArrayList 类型擦除后的原始类型为 Object，通过反射就可以存储各种类型</span><br />\n但是如果用这样声明的话那原始类型就是 <code>Comparable</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>要区分<strong>原始类型</strong>和<strong>泛型变量</strong>的类型。在调用泛型方法时，可以指定泛型，也可以不指定泛型。</p>\n<ul>\n<li>在不指定泛型的情况下，泛型变量的类型为该方法中的几种类型的<strong>同一父类的最小级</strong>，直到  <code>Object</code> 。</li>\n<li>在指定泛型的情况下，该方法的几种类型必须是<strong>该泛型的实例的类型或者其子类</strong>。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/** 不指定泛型的时候 */</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这两个参数都是 Integer，所以 T 为 Integer 类型  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Number</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这两个参数一个是 Integer，以风格是 Float，所以取同一父类的最小级，为 Number  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"asd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这两个参数一个是 Integer，以风格是 Float，所以取同一父类的最小级，为 Object  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/** 指定泛型的时候 */</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定了 Integer，所以只能为 Integer 类型或者其子类  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译错误，指定了 Integer，不能为 Float  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Number</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定为 Number，所以可以为 Integer 和 Float  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 这是一个简单的泛型方法  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> x<span class=\"token punctuation\">,</span><span class=\"token class-name\">T</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>Object 泛型</strong><br />\n注意看这个例子，我们这个问题的解释主要就是要看明白这个例子，如果不指定泛型，那么什么都能存</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ArrayList</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"121\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">viewDetail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Map</span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>map3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 编译错误</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>map4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 编译错误</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>泛型是后加入的，早期的版本没有，但是 java 的开发者希望不能因为加入泛型就要修改成千上万的现有应用，所以默认他可以通融老版本不加泛型的变量，这就是为什么我们的 map1 不会出错了。就是说<span class=\"yellow\">如果我们的泛型类不指定泛型，那么可以和任何指定泛型的变量赋值</span></p>\n<h3 id=\"类型擦除的问题\"><a class=\"anchor\" href=\"#类型擦除的问题\">#</a> 类型擦除的问题</h3>\n<div class=\"note info no-icon\">\n<p>Q: 既然说类型变量会在编译的时候擦除掉，那为什么我们往 ArrayList 创建的对象中添加整数会报错呢？不是说泛型变量 String 会在编译的时候变为 Object 类型吗？为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？<br />\nA: Java 编译器是通过先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。</p>\n</div>\n<p>来看这两种情况：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一种 情况，与完全使用泛型一样效果</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ArrayList</span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二种 情况，没有效果</span></pre></td></tr></table></figure><p>因为类型检查就是编译时完成的， <code>new ArrayList()</code>  只是在内存中开辟了一个存储空间，可以存储任何类型对象，而<strong>真正设计类型检查的是它的引用</strong>，因为我们是使用它引用 <code>list1</code>  来调用它的方法，比如说调用 <code>add</code>  方法，所以 <code>list1</code>  引用能完成泛型类型的检查。而引用 <code>list2</code>  没有使用泛型，所以不行。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译通过  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译错误  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回类型就是 String  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译通过  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译通过  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回类型就是 Object  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译通过  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译错误  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"mybatis结果集封装源码浅析\"><a class=\"anchor\" href=\"#mybatis结果集封装源码浅析\">#</a> MyBatis 结果集封装源码浅析</h2>\n<p>前面说了那么多，终于开始看我们的 MyBatis 源码了，用了 MyBatis 那么多次，竟然从来没有关心过它底层是怎么实现的，真是惭愧，借着这个机会简单了解下吧～</p>\n<ol>\n<li><strong> <code>DefaultResultSetHandler</code>  的 <code>handleResultSets</code>  方法</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleResultSets</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Statement</span> stmt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ErrorContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">activity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handling results\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>   <span class=\"token function\">object</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 要返回的结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> multipleResults <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 迭代变量，结果集的个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> resultSetCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 获取第一个结果集，并包装成 ResultSetWrapper 对象，</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// ResultSetWrapper 对象含有已映射和未映射的列名和属性的对应关系</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">ResultSetWrapper</span> rsw <span class=\"token operator\">=</span> <span class=\"token function\">getFirstResultSet</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 获取所有的 ResultMap</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResultMap</span><span class=\"token punctuation\">></span></span> resultMaps <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span>getResultMaps    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// ResultMap 的个数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> resultMapCount <span class=\"token operator\">=</span> resultMaps<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 校验：如果结果集有数据，但是没有定义返回的结果类型，就会报错</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">validateResultMapsCount</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMapCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rsw <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> resultMapCount <span class=\"token operator\">></span> resultSetCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 依次获取 ResultMap</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">ResultMap</span> resultMap <span class=\"token operator\">=</span> resultMaps<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>resultSetCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 处理结果集，这里是重点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">handleResultSet</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> multipleResults<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 获取下一个结果集</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      rsw <span class=\"token operator\">=</span> <span class=\"token function\">getNextResultSet</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">cleanUpAfterHandlingResultSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      resultSetCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">collapseSingleResultList</span><span class=\"token punctuation\">(</span>multipleResults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong> <code>handleResultSet(rsw, resultMap, multipleResults, null)</code> </strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleResultSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSetWrapper</span> rsw<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultMap</span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> multipleResults<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultMapping</span> parentMapping<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentMapping <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">handleRowValues</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RowBounds</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">,</span> parentMapping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultHandler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token comment\">// 如果结果处理器为空，则使用默认的结果处理器，没有自定义的情况下，都是走这个流程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">DefaultResultHandler</span> defaultResultHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultResultHandler</span><span class=\"token punctuation\">(</span>objectFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 处理每一行的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token function\">handleRowValues</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> defaultResultHandler<span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// 将处理结果放到 list 集中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                multipleResults<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>defaultResultHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">handleRowValues</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> resultHandler<span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// issue #228 (close resultsets)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">closeResultSet</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">.</span><span class=\"token function\">getResultSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong> <code>handleRowValues</code> </strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleRowValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSetWrapper</span> rsw<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultMap</span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> resultHandler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RowBounds</span> rowBounds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultMapping</span> parentMapping<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 如果有嵌套的 ResultMap</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">hasNestedResultMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">ensureNoRowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">checkResultHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 处理含有嵌套 ResultMap 的结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">handleRowValuesForNestedResultMap</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> resultHandler<span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">,</span> parentMapping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 处理不含有嵌套 ResultMap 的结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">handleRowValuesForSimpleResultMap</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> resultHandler<span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">,</span> parentMapping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><strong> <code>handleRowValuesForSimpleResultMap</code> </strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleRowValuesForSimpleResultMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSetWrapper</span> rsw<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultMap</span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> resultHandler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RowBounds</span> rowBounds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultMapping</span> parentMapping<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DefaultResultContext</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> resultContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultResultContext</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> rsw<span class=\"token punctuation\">.</span><span class=\"token function\">getResultSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 略过偏移的行数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">skipRows</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldProcessMoreRows</span><span class=\"token punctuation\">(</span>resultContext<span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">isClosed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ResultMap</span> discriminatedResultMap <span class=\"token operator\">=</span> <span class=\"token function\">resolveDiscriminatedResultMap</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 获取行数据，应在此深追，从 debugger 看，getRowValue 是解析属性 mapping 的函数 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Object</span> rowValue <span class=\"token operator\">=</span> <span class=\"token function\">getRowValue</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> discriminatedResultMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 存储对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">storeObject</span><span class=\"token punctuation\">(</span>resultHandler<span class=\"token punctuation\">,</span> resultContext<span class=\"token punctuation\">,</span> rowValue<span class=\"token punctuation\">,</span> parentMapping<span class=\"token punctuation\">,</span> resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong> <code>getRowValue</code> </strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getRowValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSetWrapper</span> rsw<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultMap</span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> columnPrefix<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 懒加载相关</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ResultLoaderMap</span> lazyLoader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResultLoaderMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 创建行数据对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 这里 java.util.Map 就会被实例化为 new HashMap () 没有指定范型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Object</span> rowValue <span class=\"token operator\">=</span> <span class=\"token function\">createResultObject</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> lazyLoader<span class=\"token punctuation\">,</span> columnPrefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rowValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">hasTypeHandlerForResultObject</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取元数据，为了赋值 mapping 对应的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">MetaObject</span> metaObject <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">newMetaObject</span><span class=\"token punctuation\">(</span>rowValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">boolean</span> foundValues <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>useConstructorMappings<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 到这里 也就是说 MetaObject 被实例化成功，</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 其中的 objectWrapper 则被实例化成了 MapWrapper</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// MapWrapper 中有个 Map&lt;String, Object> map 属性</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//rowValue 则被赋值给了 map</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 而 map 则可以作为 rowValue 的引用胡作非为</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldApplyAutomaticMappings</span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            foundValues <span class=\"token operator\">=</span> <span class=\"token function\">applyAutomaticMappings</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> metaObject<span class=\"token punctuation\">,</span> columnPrefix<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> foundValues<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//applyPropertyMappings: 应用属性映射</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        foundValues <span class=\"token operator\">=</span> <span class=\"token function\">applyPropertyMappings</span><span class=\"token punctuation\">(</span>rsw<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> metaObject<span class=\"token punctuation\">,</span> lazyLoader<span class=\"token punctuation\">,</span> columnPrefix<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> foundValues<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        foundValues <span class=\"token operator\">=</span> lazyLoader<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> foundValues<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        rowValue <span class=\"token operator\">=</span> foundValues <span class=\"token operator\">||</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">isReturnInstanceForEmptyRow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> rowValue <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> rowValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 实例化 MetaObject</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">MetaObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> object<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectFactory</span> objectFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectWrapperFactory</span> objectWrapperFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReflectorFactory</span> reflectorFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>originalObject <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objectFactory <span class=\"token operator\">=</span> objectFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objectWrapperFactory <span class=\"token operator\">=</span> objectWrapperFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reflectorFactory <span class=\"token operator\">=</span> reflectorFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 各式各样</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ObjectWrapper</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objectWrapper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectWrapper</span><span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objectWrapperFactory<span class=\"token punctuation\">.</span><span class=\"token function\">hasWrapperFor</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objectWrapper <span class=\"token operator\">=</span> objectWrapperFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getWrapperFor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// Map 的实例化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objectWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapWrapper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objectWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CollectionWrapper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objectWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanWrapper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapWrapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseWrapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设定了范型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MapWrapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaObject</span> metaObject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map <span class=\"token operator\">=</span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>晕了？别慌我们捋一捋～<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h1w7ry2g7cj20c80c8dg4.jpg\" alt=\"\" height=\"150px\" /><br />\n 其实就是这么一回事：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myResultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//myResultMap, 我 MyBatis 要返回的那个 Map</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Map</span> rowValue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//rowValue, 没有使用泛型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> metaObject <span class=\"token operator\">=</span> rowValue<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//metaObject, 使用泛型但是是 Object 可以存任何类型数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>metaObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entity_id\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>metaObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entity_table\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tableName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>myResultMap <span class=\"token operator\">=</span> rowValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> myResultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entity_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错一行</span></pre></td></tr></table></figure><p>这样是不是就清楚多了？说白了其实就是<strong>利用了一个不用泛型的 Map 作为中转站，把 <code>&lt;String,Object&gt;</code>  的 Map 赋值给了 <code>&lt;String,String&gt;</code>  的 Map</strong></p>\n<h2 id=\"object转string方法\"><a class=\"anchor\" href=\"#object转string方法\">#</a> Object 转 String 方法</h2>\n<p>okkkk，来到了我们的最后一步了，我知道了我的 myResultMap 获取的是其实是个 <code>Object</code>  对象了，那么怎么转化成 <code>String</code>  对象呢？<br />\n我们先来看个小示例哈～</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先定 3 个变量 : Integer 一个，String 内容为字母的一个，String 内容为数字的一个</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> integerNumAAA <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> alphaBBB <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> stringNumCCC <span class=\"token operator\">=</span> <span class=\"token string\">\"321\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 没用泛型，什么都能存</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">,</span> integerNumAAA <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BBB\"</span><span class=\"token punctuation\">,</span> alphaBBB <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CCC\"</span><span class=\"token punctuation\">,</span> stringNumCCC <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 塞好后接下来进行取值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">Integer</span> getAAA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 可以看到塞进去的时候是 Integer 类型的话，拿出来的时候用强转可以顺利拿到值；</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Integer</span> getCCC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CCC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 这个会报错</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 意思就是，如果你 map.put 的时候是 String 类型的，但是内容还是数字的话就会报错</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 备注：这里报的 String→Integer 强转的报错，和本文的都是 ClsasCastException 强转问题</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 解决</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 也是先转为 String 类型后再用 Integer.parseInt 转即可，如下:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stringNumCCC \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这就是说<span class=\"yellow\">我的 Map 原来存的什么类型，如果我用那个类型来取是不会有问题的，如果我用别的类型来取，就会发生类型转换，就容易出错！</span></p>\n<ol>\n<li><strong>(String)Object</strong><br />\n 将 <code>Object</code>  类型的对象强制转换为 <code>String</code>  类型，对于空格、空字符串、null 都可以转换，但是<span class=\"yellow\"> <code>Object</code>  对象的值类型不是字符串，比如 <code>Integer</code>  类型时，会存在类型转换异常错误</span>这也是我开头的代码出错的原因！！！</li>\n<li><strong>Object.toString()</strong><br />\n 对空格、空字符串、其他数据类型都可以进行转换，<strong>值为 null 时的空指针异常</strong></li>\n<li><strong>String.valueOf(Object)</strong><br />\n 可以对 null、空格、空字符串、其他数据类型进行转换，是一个比较安全的转换方法。当值为 null 的时候该方法会转换为 &quot;null&quot;, 这个值会影响业务后续的非空判断。什么意思？</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Strin</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>Object + &quot;&quot;</strong><br />\n 此方法是利用字符串的拼接特点将其他类型的数据转换为字符串，它和 <code>Stirng.valueOf(object)</code>  类似不用考虑空格、空字符串、null、和其他数据类型，但是需要注意当值为 null 的时候会转换为 &quot;null&quot;</li>\n</ol>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>好了，说完了，所有要理解这个问题发生的原因和解决方法的东西都说完了，在我一开头的程序中，如果不使用 <code>String.valueOf()</code>  方法，你查看 <code>.class</code>  文件的时候会看到它自动调用了 <code>String(Object)</code>  方法，而我也说过了，这个转换方法在转换不是 <code>String</code>  类型的数据的时候会抛出标题所说的异常信息～</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3VxaW5nbG9uZy9wLzk0NTYxOTMuaHRtbCMxamF2YSVFNiVCMyU5QiVFNSU5RSU4QiVFNyU5QSU4NCVFNSVBRSU5RSVFNyU4RSVCMCVFNiU5NiVCOSVFNiVCMyU5NSVFRiVCQyU5QSVFNyVCMSVCQiVFNSU5RSU4QiVFNiU5MyVBNiVFOSU5OSVBNA==\">Java 泛型类型擦除及类型擦除带来的问题</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTI0NTYwODc=\">MyBatis 一个有意思的东西</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpdXhpbmZhMTIzL2FydGljbGUvZGV0YWlscy8xMDg1MjE3MzE/c3BtPTEwMDEuMjEwMS4zMDAxLjY2NTAuMyZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQmxvZ0NvbW1lbmRGcm9tQmFpZHUlN0VSYXRlLTMucGNfcmVsZXZhbnRfcGF5Y29sdW1uX3YzJmFtcDtkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUJsb2dDb21tZW5kRnJvbUJhaWR1JTdFUmF0ZS0zLnBjX3JlbGV2YW50X3BheWNvbHVtbl92MyZhbXA7dXRtX3JlbGV2YW50X2luZGV4PTY=\">MyBatis 原理：结果集封装详解</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbGFPcmFuZ2UvYXJ0aWNsZS9kZXRhaWxzLzEyNDA3MzYwNQ==\">【异常】java.lang.Integer cannot be cast to java.lang.String</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuNTFjdG8uY29tL2FydGljbGUvNjYxMzc1Lmh0bWw=\">一篇带你 Object 转 String</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemhhbmdjaGVuZzEvcC8xMTQ5NTg0NC5odG1s\">java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer map 里 string 转 integer 错误</span></li>\n</ol>\n",
            "tags": [
                "Java",
                "经验总结",
                "Java基础",
                "经验总结",
                "MyBatis"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/05/01/big-data/clickhouse%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E5%8F%8A%E5%AD%98%E5%82%A8%E6%B5%85%E6%9E%90/",
            "url": "https://sprenedayf.com/2022/05/01/big-data/clickhouse%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E5%8F%8A%E5%AD%98%E5%82%A8%E6%B5%85%E6%9E%90/",
            "title": "clickhouse数据存储原理浅析",
            "date_published": "2022-05-01T06:59:22.000Z",
            "content_html": "<h1 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h1>\n<p>        最近做项目有个需求，想对 clickhouse 中的数据添加几个标签，但是总记着之前草草看过说 clickhouse 这种 OLAP 引擎的更新和删除数据操作是灾难性的，所以决定看看 clickhouse 的存储原理，然后再斟酌一下技术方案吧～<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h1t0zy9q7gj206y06wt8l.jpg\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>        首先要清楚一点，clickhouse 是列式存储，列式存储一般来说更适合 OLAP 场景，查询分析性能上是要比行式存储要快的，为什么呢？这里简单的说一下吧...</p>\n<ol>\n<li>我们都知道数据库里数据存储是按页来的，行式存储和列式存储顾名思义就是一个按照一行一行来存，一个按照一列一列来存，对比如下图所示：<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t1j5ky14j21b40o677x.jpg\" alt=\"\" height=\"500px\" /><br />\n        然后你想啊，你做查询分析的时候总不是把所有的列都一股脑的取出来吧？这些列都放在一起，你要拿到内存中的页也少了，寻址次数也少了，效率自然就上去了不是～</li>\n<li>因为我们一列数据的数据类型是相同的，所以放在一起存储的时候就更方便做数据的压缩，这样我们在传输数据的时候网络时间也可以节约很多，所以也可以说是一方面的优势</li>\n</ol>\n<h1 id=\"clickhouse表引擎与建表\"><a class=\"anchor\" href=\"#clickhouse表引擎与建表\">#</a> clickhouse 表引擎与建表</h1>\n<p>首先先来看一下 clickhouse 中的建表语句：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>db<span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>table_name <span class=\"token punctuation\">[</span><span class=\"token keyword\">ON</span> CLUSTER cluster<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name1 <span class=\"token punctuation\">[</span>type1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">NULL</span><span class=\"token operator\">|</span><span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span><span class=\"token operator\">|</span>MATERIALIZED<span class=\"token operator\">|</span>EPHEMERAL<span class=\"token operator\">|</span>ALIAS expr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name2 <span class=\"token punctuation\">[</span>type2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">NULL</span><span class=\"token operator\">|</span><span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span><span class=\"token operator\">|</span>MATERIALIZED<span class=\"token operator\">|</span>EPHEMERAL<span class=\"token operator\">|</span>ALIAS expr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">engine</span></pre></td></tr></table></figure><p>基本上和 MySQL 建表一样对吧，这里需要注意几个地方：</p>\n<ol>\n<li>在 clickhouse 中建表需要设定表引擎，clickhouse 设定了合并数、外部存储、内存、文件、接口和其他 6 大类 20 多种表引擎，总有一种适合你</li>\n<li>clickhouse 中设定默认值有这么几种关键字 <code>DEFAULT|MATERIALIZED|EPHEMERAL|ALIAS</code> ，其中最常用的就是 DEFAULT。<span class=\"red\">在数据写入的时候只有 DEFAULT 类型的字段可以出现在 INSERT 中，在数据查询时只有 DEFAULT 类型的字段可以通过 SELECT * 选择，在数据存储时只有 DEFAULT 和 MATERIALIZED 类型的字段可以持久化</span></li>\n</ol>\n<h1 id=\"合并树家族mergetree\"><a class=\"anchor\" href=\"#合并树家族mergetree\">#</a> 合并树家族 (MergeTree)</h1>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h1t61v05aaj20lq07mmxn.jpg\" alt=\"\" height=\"250px\" /><br />\n        在生产环境中大多数都是使用的 MergeTree 表引擎家族：</p>\n<ul>\n<li><strong>只有合并树系列的表引擎才支持主键索引、数据分区、数据副本和数据采样等特性</strong></li>\n<li><strong>只有此系列的表引擎支持 ALTER 相关操作</strong><br />\n然后我们就以 MergeTree 为例讲一下 clickhouse 存储那些事儿～<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1t668ucs9j20c80c8t9j.jpg\" alt=\"\" height=\"150px\" /></li>\n</ul>\n<h2 id=\"mergetree的创建方式\"><a class=\"anchor\" href=\"#mergetree的创建方式\">#</a> MergeTree 的创建方式</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>db_name<span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>table_name<span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name1 <span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span><span class=\"token operator\">|</span>MATERIALIZED<span class=\"token operator\">|</span>ALIAS expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  name2 <span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span><span class=\"token operator\">|</span>MATERIALIZED<span class=\"token operator\">|</span>ALIAS expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  省略<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> MergeTree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> expr<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> expr<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> expr<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>SAMPLE <span class=\"token keyword\">BY</span> expr<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>SETTINGS name<span class=\"token operator\">=</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> 省略<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这里需要说一下一些主要参数：</p>\n<ol>\n<li>\n<p><strong>PARTITION BY</strong> [选填]<br />\n 分区键，用于指定表数据以何种标准进行分区。分区键既可以是单个列字段，也可以通过元组的形式使用多个列字段，同时它也支持使用列表达式。<span class=\"blue\">如果不声明分区键，则 ClickHouse 会生成一个名为 all 的分区</span>。合理使用数据分区，可以有效减少查询时数据文件的扫描范围</p>\n</li>\n<li>\n<p><strong>ORDER BY</strong> [必填]<br />\n 排序键，用于指定在一个数据片段内，数据以何种标准排序。默认情况下主键（PRIMARY KEY）与排序键相同。排序键既可以是单个列字段，例如 ORDER BY CounterID，也可以通过元组的形式使用多个列字段，例如 ORDER BY（CounterID,EventDate）。当使用多个列字段排序时，以 ORDER BY（CounterID,EventDate）为例，在单个数据片段内，数据首先会以 CounterID 排序，相同 CounterID 的数据再按 EventDate 排序。</p>\n</li>\n<li>\n<p><strong>PRIMARY KEY</strong> [选填]<br />\n 主键，顾名思义，声明后会依照主键字段生成一级索引，用于加速表查询。默认情况下，主键与排序键<br />\n (ORDER BY) 相同，所以通常直接使用 ORDER BY 代为指定主键，无须刻意通过 PRIMARY KEY 声明。所以在一般情况下，在单个数据片段内，数据与一级索引以相同的规则升序排列。与其他数据库不同，MergeTree 主键允许存在重复数据（ReplacingMergeTree 可以去重）</p>\n</li>\n<li>\n<p><strong>SAMPLE BY</strong> [选填]<br />\n 抽样表达式，用于声明数据以何种标准进行采样。如果使用了此配置项，那么在主键的配置中也需要声明同样的表达式</p>\n</li>\n<li>\n<p><strong>SETTINGS：index_granularity</strong> [选填]<br />\n index_granularity 对于 MergeTree 而言是一项非常重要的参数，它表示索引的粒度，默认值为 8192。也就是说，MergeTree 的索引在默认情况下，每间隔 8192 行数据才生成一条索引</p>\n</li>\n</ol>\n<h2 id=\"mergetree的存储结构\"><a class=\"anchor\" href=\"#mergetree的存储结构\">#</a> MergeTree 的存储结构</h2>\n<p>MergeTree 表引擎中的数据是拥有物理存储的，数据会按照分区目录的形式保存到磁盘之上，其完整的存储结构如下图:<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1t6eznu0rj20hy0kr3za.jpg\" alt=\"\" height=\"550px\" /><br />\n 可以看出，一张数据表的完整物理结构分为 3 个层级，依次是数据表目录、分区目录及各分区下具体的数据文件:</p>\n<ol>\n<li>\n<p><strong>分区目录：partition</strong><br />\n 余下各类数据文件（primary.idx、 [Column].mrk、[Column].bin 等）都是以分区目录的形式被组织存放的，属于相同分区的数据，最终会被合并到同一个分区目录，而不同分区的数据，永远不会被合并在一起。</p>\n</li>\n<li>\n<p><strong>校验文件：checksums.txt</strong><br />\n 使用二进制格式存储。它保存了余下各类文件 (primary.idx、count.txt 等) 的 size 大小及 size 的哈希值，用于快速校验文件的完整性和正确性。</p>\n</li>\n<li>\n<p><strong>列信息文件：columns.txt</strong><br />\n 使用明文格式存储。用于保存此数据分区下的列字段信息，例如：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> columns.txt </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>columns <span class=\"token function\">format</span> version: <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">4</span> columns: </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'ID'</span> String </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'URL'</span> String </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">'Code'</span> String </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">'EventTime'</span> Date</pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>计数文件：count.txt</strong><br />\n 使用明文格式存储。用于记录当前数据分区目录下数据的总行数，例如：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> count.txt </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">8</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>\n<p><strong>一级索引文件：primary.idx</strong><br />\n 使用二进制格式存储，用于存放稀疏索引，一张 MergeTree 表只能声明一次一级索引（通过 <code>ORDER BY</code>  或者 <code>PRIMARY KEY</code> ）。借助稀疏索引，在数据查询的时能够排除主键条件范围之外的数据文件，从而有效减少数据扫描范围，加速查询速度。</p>\n</li>\n<li>\n<p><strong>数据文件：[Column].bin</strong><br />\n 使用压缩格式存储，默认为 LZ4 压缩格式，用于存储某一列的数据。由于 MergeTree 采用列式存储，所以每一个列字段都拥有独立的.bin 数据文件，并以列字段名称命名（例如 CounterID.bin、EventDate.bin 等）。</p>\n</li>\n<li>\n<p><strong>列字段标记文件：[Column].mrk</strong><br />\n 使用二进制格式存储，标记文件中保存了.bin 文件中数据的偏移量信息。标记文件与稀疏索引对齐，又与.bin 文件一一对应，所以 MergeTree 通过标记文件建立了 primary.idx 稀疏索引与.bin 数据文件之间的映射关系。即<span class=\"red\">首先通过稀疏索引（primary.idx）找到对应数据的偏移量信息（.mrk），再通过偏移量直接从.bin 文件中读取数据</span>。由于.mrk 标记文件与.bin 文件一一对应，所以 MergeTree 中的每个列字段都会拥有与其对应的.mrk 标记文件（例如 CounterID.mrk、EventDate.mrk 等）。</p>\n</li>\n<li>\n<p><strong>[Column].mrk2</strong><br />\n 如果使用了自适应大小的索引间隔，则标记文件会以.mrk2 命名。它的工作原理和作用与.mrk 标记文件相同。</p>\n</li>\n<li>\n<p><strong>partition.dat 与 minmax_[Column].idx</strong><br />\n 如果使用了分区键，例如 <code>PARTITION BY EventTime</code> ，则会额外生成 <code>partition.dat</code>  与 <code>minmax</code>  索引文件，它们均使用二进制格式存储。 <code>partition.dat</code>  用于保存当前分区下分区表达式最终生成的值；而 <code>minmax</code>  索引用于记录当前分区下分区字段对应原始数据的最小和最大值。例如 EventTime 字段对应的原始数据为 2019-05-01、2019-05-05，分区表达式为 PARTITION BY toYYYYMM (EventTime)。 <code>partition.dat</code>  中保存的值将是 2019-05，而 <code>minmax</code>  索引中保存的值将会是 2019-05-012019-05-05。</p>\n</li>\n<li>\n<p><strong>skp_idx_[Column].idx 与 skp_idx_[Column].mrk</strong><br />\n 如果在建表语句中声明了二级索引，则会额外生成相应的二级索引与标记文件，它们同样也使用二进制存储。二级索引在 ClickHouse 中又称跳数索引，目前拥有 minmax、set、ngrambf_v1 和 tokenbf_v1 四种类型。这些索引的<br />\n最终目标与一级稀疏索引相同，都是为了进一步减少所需扫描的数据范围，以加速整个查询过程。<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t6ocodtbj20k00fz776.jpg\" alt=\"\" height=\"450px\" /></p>\n</li>\n</ol>\n<h2 id=\"数据分区\"><a class=\"anchor\" href=\"#数据分区\">#</a> 数据分区</h2>\n<h3 id=\"数据的分区规则\"><a class=\"anchor\" href=\"#数据的分区规则\">#</a> 数据的分区规则</h3>\n<p>针对取值数据类型的不同，分区 ID 的生成逻辑目前拥有四种规则：</p>\n<ol>\n<li>\n<p>不指定分区键<br />\n如果不使用分区键，即不使用 <code>PARTITION BY</code>  声明任何分区表达式，则分区 ID 默认取名为 all，所有的数据都会被写入这个 all 分区。</p>\n</li>\n<li>\n<p>使用整型<br />\n如果分区键取值属于整型（兼容 UInt64，包括有符号整型和无符号整型），且无法转换为日期类型 YYYYMMDD 格式，则直接按照该整型的<strong>字符形式</strong>输出，作为分区 ID 的取值。</p>\n</li>\n<li>\n<p>使用日期类型<br />\n如果分区键取值属于日期类型，或者是能够转换为 YYYYMMDD 格式的整型，则使用<strong>按照 YYYYMMDD 进行格式化</strong>后的字符形式输出，并作为分区 ID 的取值。</p>\n</li>\n<li>\n<p>使用其他类型<br />\n如果分区键取值既不属于整型，也不属于日期类型，例如 String、Float 等，则通过 128 位<strong> Hash 算法</strong>取其 Hash 值作为分区 ID 的取值<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1t7749dn3j20gk06v74t.jpg\" alt=\"\" height=\"350px\" /><br />\n如果分区字段采用了多个，则会利用 '-' 符号一次拼接，例如使用 <code>PARTITION BY (length(Code),EventTime)</code>  来分区，则分区 ID 会是 <code>2-20190501</code>  的形式</p>\n</li>\n</ol>\n<h3 id=\"分区目录的命名规则\"><a class=\"anchor\" href=\"#分区目录的命名规则\">#</a> 分区目录的命名规则</h3>\n<p>完整的分区目录命名公式为： <code>PartitionID_MinBlockNum_MaxBlockNum_Level</code> ，比如：<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h1t79t6zt7j20gk06ywet.jpg\" alt=\"\" height=\"150px\" /></p>\n<ol>\n<li>\n<p><strong>PartitionID</strong>：分区 ID。</p>\n</li>\n<li>\n<p><strong>MinBlockNum 和 MaxBlockNum</strong><br />\n 顾名思义，最小数据块编号与最大数据块编号。这里简单来说就是说，你这里有一个全局的 index 变量，初始化为 1，然后你每执行一次 INSERT 语句就会创建一个新的分区（MergeTree 的特性），每创建一个分区这个 index 变量的值就会 + 1，每个分区一开始的 <code>MinBlockNum</code>  和 <code>MaxBlockNum</code>  是相等的都为 index。当进行分区合并的时候，就会取相同的 <code>PartitionID</code> ，相同分区中的最小 <code>MinBlockNum</code>  作为新的 <code>MinBlockNum</code> ，同理 <code>MaxBlockNum</code> 。每合并一次我们这个分区的 <code>level</code>  就自增一次</p>\n</li>\n<li>\n<p><strong>Level</strong><br />\n 合并的层级，可以理解为某个分区被合并过的次数，或者这个分区的年龄。数值越高表示年龄越大。对于每一个新创建的分区目录而言，其初始值均为 0。之后，以分区为单位，如果相同分区发生合并动作，则在相应分区内计数累积加 1。</p>\n</li>\n</ol>\n<h3 id=\"分区目录的合并过程\"><a class=\"anchor\" href=\"#分区目录的合并过程\">#</a> 分区目录的合并过程</h3>\n<p>** 每一批数据的写入（一次 INSERT 语句），MergeTree 都会生成一批新的分区目录。** 即便不同批次写入的数据属于相同分区，也会生成不同的分区目录。对于同一个分区而言，也会存在多个分区目录的情况。在之后的某个时刻（写入后的 10～15 分钟，也可以手动执行 <code>optimize</code>  查询语句），ClickHouse 会通过后台任务再将属于相同分区的多个目录合并成一个新的目录。已经存在的旧分区目录并不会立即被删除，而是在之后的某个时刻通过后台任务被删除（默认 8 分钟）。属于同一个分区的多个目录，在合并之后会生成一个全新的目录，目录中的索引和数据文件也会相应地进行合并。<br />\n新目录名称的合并方式遵循以下规则：</p>\n<ul>\n<li><code>MinBlockNum</code> ：取同一分区内所有目录中最小的 MinBlockNum 值</li>\n<li><code>MaxBlockNum</code> ：取同一分区内所有目录中最大的 MaxBlockNum 值</li>\n<li><code>Level</code> ：取同一分区内最大 Level 值并加 1<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h1t7o4wec6j20md08t0tp.jpg\" alt=\"\" height=\"450px\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t7owepdbj20nd0buq44.jpg\" alt=\"\" height=\"450px\" /></li>\n</ul>\n<h2 id=\"一级索引\"><a class=\"anchor\" href=\"#一级索引\">#</a> 一级索引</h2>\n<p>数据以 <code>index_granularity</code>  的粒度（默认固定索引粒度 8192）被标记成多个小空间，其中每个空间最多 8192 行数据。这段空间的具体区间就是 <code>MarkRange</code> , 并且通过 start 和 end 表示具体的范围<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t7uviuh4j20n309oq3v.jpg\" alt=\"\" height=\"450px\" /></p>\n<h3 id=\"索引数据的生成规则\"><a class=\"anchor\" href=\"#索引数据的生成规则\">#</a> 索引数据的生成规则</h3>\n<p>由于是稀疏索引，所以 MergeTree 需要间隔 index_granularity 行数据才会生成一条索引记录，其索引值会依据声明的主键字段获取。例如：hits_v1 使用年月分区 <code>（PARTITION BYtoYYYYMM(EventDate)）</code> ，所以 2014 年 3 月份的数据最终会被划分到同一个分区目录内。如果使用 <code>CounterID</code>  作为主键 <code>（ORDER BY CounterID）</code> ，则每间隔 8192 行数据就会取一次 CounterID 的值作为索引值，索引数据最终会被写入 <code>primary.idx</code>  文件进行保存<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h1t7xij4n7j20pb09tt9i.jpg\" alt=\"\" height=\"450px\" /><br />\n如果使用多个主键，例如 <code>ORDER BY (CounterID, EventDate)</code> ，则每间隔 8192 行可以同时取 <code>CounterID</code>  与 <code>EventDate</code>  两列的值作为索引值:<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t7yk1gcuj20p509b756.jpg\" alt=\"\" height=\"450px\" /></p>\n<h3 id=\"索引的查询过程\"><a class=\"anchor\" href=\"#索引的查询过程\">#</a> 索引的查询过程</h3>\n<p>MergeTree 按照 <code>index_granularity</code>  的间隔粒度，将一段完整的数据划分成多个小的间隔数据段，一个具体的数段就是 <code>MarkRange</code> 。 <code>MarkRange</code>  与索引编号对应，使用 start 和 end 表示具体的范围，通过 start 及 end 对应的索引编号取值，即能得到它所对应的数值区间。<br />\n索引查询其实就是两个数值区间的交集判断：<br />\n(1) 一个区间是由基于主键的查询条件转换而来的条件区间<br />\n (2) 一个区间是 MarkRange 对应的数值区间<br />\n索引查询过程：</p>\n<ol>\n<li><strong>生成查询条件区间</strong>：将查询条件转换为条件区间</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">where</span> ID <span class=\"token operator\">=</span> <span class=\"token string\">'A003'</span>\t\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'A003'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A003'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">where</span> ID <span class=\"token operator\">></span> <span class=\"token string\">'A000'</span>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">'A000'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'+inf'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">where</span> ID <span class=\"token operator\">LIKE</span> <span class=\"token string\">'A006%'</span>\t\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'A006'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A007'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>递归交集判断</strong>：以递归的形式，依次对 MarkRange 的数值区间与条件区间做交集判断。\n<ul>\n<li>如果不存在交集，则直接通过剪枝算法优化此整段 MarkRange</li>\n<li>如果存在交集，且 <code>MarkRange</code>  步长大于 8（end-start）, 则将此区间进一步拆分成 8 个子区间 (由 <code>merge_tree_coarse_index_granularity</code>  指定，默认为 8)，并重复此规则，继续做递归交集判断</li>\n<li>如果存在交集，且 <code>MarkRange</code>  不可再分割（步长小于 8），则记录 <code>MarkRange</code>  并返回</li>\n</ul>\n</li>\n<li><strong>合并 MarkRange 区间</strong>：将最终匹配的 MarkRange 聚在一起，合并它们的范围<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h1t8f2qpqcj219i0kmadc.jpg\" alt=\"\" height=\"550px\" /></li>\n</ol>\n<h2 id=\"数据存储\"><a class=\"anchor\" href=\"#数据存储\">#</a> 数据存储</h2>\n<h3 id=\"各列独立存储\"><a class=\"anchor\" href=\"#各列独立存储\">#</a> 各列独立存储</h3>\n<p><code>MergeTree</code>  中，数据按列存储。具体到每个列字段，每个列字段都拥有一个与之对应的 <code>.bin</code>  数据文件（物理存储）。 <code>.bin</code>  文件只会保存当前分区片段内的这一部分数据。大致流程是：<strong>数据压缩 -&gt; 按照 <code>ORDER BY</code>  的声明排序 -&gt; 数据以多个压缩数据块的形式被组织并写入 <code>.bin</code>  文件</strong></p>\n<h3 id=\"压缩数据块\"><a class=\"anchor\" href=\"#压缩数据块\">#</a> 压缩数据块</h3>\n<p>一个压缩数据块由<strong>头信息</strong>和<strong>压缩数据</strong>两部分组成。头信息固定使用 9 位字节表示，具体由 1 个 UInt8（1 字节）整型和 2 个 UInt32（4 字节）整型组成，分别代表使用的<strong>压缩算法类型</strong>、<strong>压缩后的数据大小</strong>和<strong>压缩前的数据大小</strong>。<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1t8ij4yt1j20l70gjq41.jpg\" alt=\"\" /><br />\nMergeTree 在数据具体写入过程中，会按照索引粒度，按批次获取数据并进行处理。</p>\n<ol>\n<li>多对一<br />\n单个批次数据 <code>SIZE &lt; 64KB</code> ; 如果单个批次数据小于 64KB，则继续获取下一批数据，直至累积到 SIZE &gt;= 64KB 时，生成下一个压缩数据块；</li>\n<li>一对一<br />\n单个批次数据 <code>64KB &lt;= SIZE &lt;= 1MB</code> : 如果单个批次数据大小恰好在 64KB 与 1MB 之间，则直接生成下一个压缩数据块</li>\n<li>一对多<br />\n单个批次数据  <code>SIZE &gt; 1MB</code> ; 如果单个批次数据直接超过 1MB，则首先按照 1MB 大小截断并生成下一个数据块。剩余数据继续按照大小判断执行。<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h1t8l8gcy0j20qa0bpgmx.jpg\" alt=\"\" /></li>\n</ol>\n<h2 id=\"数据标记\"><a class=\"anchor\" href=\"#数据标记\">#</a> 数据标记</h2>\n<h3 id=\"数据标记的生成规则\"><a class=\"anchor\" href=\"#数据标记的生成规则\">#</a> 数据标记的生成规则</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t8mkx3sxj217l0kvacu.jpg\" alt=\"\" /><br />\n可以看出数据标记特征：</p>\n<ol>\n<li>数据标记文件和索引区间是对齐的。都是按照 <code>index_granularity</code>  的粒度间隔划分。</li>\n<li>数据标记文件和.bin 文件也是一一对应。每一个列字段 [column].bin 文件都有一个对应的 [column].mrk 数据标记文件，用于记录数据在.bin 文件中偏移量信息。<br />\n一行标记数据使用元组表示，包含两个整型数据的偏移信息（压缩文件中偏移量，解压缩块中的偏移量）。标记数据与一级索引不同，它不能常驻内存，而是使用 LRU（最近最少使用）缓存策略加快其取用速度。<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h1t8si3uiyj20vi0u0k06.jpg\" alt=\"\" height=\"350px\" /></li>\n</ol>\n<h3 id=\"数据标记的工作方式\"><a class=\"anchor\" href=\"#数据标记的工作方式\">#</a> 数据标记的工作方式</h3>\n<p>在 MergeTree 读取数据时，必须通过标记数据的位置信息找到所需要的数据。查找过程大致分为<strong>读取压缩数据块</strong>和<strong>读取数据</strong>两个步骤：<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t8u5r76gj210w0kmtat.jpg\" alt=\"\" /><br />\nMergeTree 如何定位压缩数据块并读取数据：</p>\n<ol>\n<li><strong>读取压缩数据块</strong>：在查询某一列数据 MergeTree 无须一次性加载整个.bin 文件。借助标记文件中的压缩文件偏移量加载指定的数据压缩块。</li>\n<li><strong>读取数据</strong>：解压后的数据，MergeTree 并不需要一次性扫描整段解压数据，借住标记文件中保存的数据块中偏移量以 <code>index_granularity</code>  的粒度加载特定一小段</li>\n</ol>\n<p>看了这么多是不是晕乎乎的，这几个之间到底什么关系，clickhouse 到底从头到尾的存储流程是什么样的<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/75c23013ly8h1t8xno7oqj207i07it8q.jpg\" alt=\"\" height=\"150px\" /><br />\n那来捋一捋～</p>\n<h2 id=\"对于分区-索引-标记和压缩数据的协同总结\"><a class=\"anchor\" href=\"#对于分区-索引-标记和压缩数据的协同总结\">#</a> 对于分区、索引、标记和压缩数据的协同总结</h2>\n<h3 id=\"写入过程\"><a class=\"anchor\" href=\"#写入过程\">#</a> 写入过程</h3>\n<ol>\n<li>生成分区目录（伴随每一次 insert 操作，生成一个新的分区目录）；</li>\n<li>在后续的某个时刻，合并相同分区的目录；</li>\n<li>按照 <code>index_granularity</code>  索引粒度，分别生成 <code>primary.idx</code>  索引文件、二级索引、每一列字段的 <code>.mrk</code>  数据标记和 <code>.bin</code>  压缩数据文件。<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t8z4if1ej20qc0f3q4g.jpg\" alt=\"\" /></li>\n</ol>\n<h3 id=\"查询过程\"><a class=\"anchor\" href=\"#查询过程\">#</a> 查询过程</h3>\n<p>索引的查询步骤在上面提到过，是利用 <code>MarkRange</code>  来完成，递归来查询，直到找到最终的范围。找到了范围之后我们就需要直到怎么取出这部分数据，这时候就用到了 <code>.mrk</code>  标记文件和 <code>.bin</code>  数据压缩文件，因为标记文件和索引区间是一一对应的，所以在找出了要用到哪些 <code>MarkRange</code>  之后，就相当于是找到了 <code>.mrk</code>  标记文件中要用到哪些数据元组，利用<em>压缩文件偏移量</em>找到要哪些压缩快加载到内存中，然后利用<em>解压缩块的偏移量</em>找到对应的数据。<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/75c23013ly8h1t90dnrkqj20rt0g2ta3.jpg\" alt=\"\" /><br />\n索引文件，标记文件，压缩快之间的关系如下图所示：</p>\n<ol>\n<li><strong>多对一</strong>：当一个 <code>index_granularity</code>  内的数据大小 size 小于 64KB 时会出现这种关系<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/75c23013ly8h1t98pkxl6j20pg0bb3zk.jpg\" alt=\"\" /></li>\n<li><strong>一对一</strong>：当一个 <code>index_granularity</code>  内的数据大小 size 大于等于 64KB 小于等于 1MB 时会出现这种关系<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1t99gmeh1j20ow0aemxw.jpg\" alt=\"\" /></li>\n<li><strong>一对多</strong>：当一个 <code>index_granularity</code>  内的数据大小 size 大于 1MB 时会出现这种关系<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/75c23013ly8h1t9ddamysj20pm0b4aay.jpg\" alt=\"\" /></li>\n</ol>\n",
            "tags": [
                "大数据",
                "查询分析",
                "Clickhouse",
                "大数据",
                "查询引擎",
                "Clickhouse"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/04/24/life/%E4%B8%80%E7%AF%87%E4%B8%8D%E7%9F%A5%E9%81%93%E8%AF%A5%E8%B5%B7%E4%BB%80%E4%B9%88%E5%90%8D%E5%AD%97%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/",
            "url": "https://sprenedayf.com/2022/04/24/life/%E4%B8%80%E7%AF%87%E4%B8%8D%E7%9F%A5%E9%81%93%E8%AF%A5%E8%B5%B7%E4%BB%80%E4%B9%88%E5%90%8D%E5%AD%97%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/",
            "title": "一篇不知道该起什么名字的碎碎念",
            "date_published": "2022-04-24T03:12:03.000Z",
            "content_html": "<h1 id=\"起\"><a class=\"anchor\" href=\"#起\">#</a> 起</h1>\n<p>最近对女本子文学上了头....<br />\n 起因是突然接收到了一份安利是一部小说 ——《余生为期》，想着闲来无事就看看小说吧，而且都说这是一个 HE 的小说，所以想来也可以看的比较开心的，没想到，狠狠的被虐到了...<br />\n 不能否认的是确实很甜，但是她们之间错过的那 6 年，包括和家里人的冲突，这一切真的看的好压抑，甚至会觉得她们恋爱中的那些甜蜜也不过是为了承受后期的这些 &quot;腥风血雨&quot;。而这些，我似乎都经历过...<br />\n 我没有书中的萧宛青和林羡经历那么多，也没有那么幸运的可以像她们一样能最终得到父母的支持，小说终究还是小说，把生活中的矛盾放大，让作者的理想实现，而现实生活的大多数，只能因为书中的写实伤感，对书中的完美感叹... 所以一整个人真的是十分低落了...</p>\n<h1 id=\"承\"><a class=\"anchor\" href=\"#承\">#</a> 承</h1>\n<p>成年人哪有时间暗自神伤，但是《余生为期》真的很上头，所以我决定看看最近口碑不错的《夏日重现》让自己赶紧从小说中抽身。不得不说，画风真的很精美，故事也十分好，确实让我忘了萧阿姨的存在<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1knkaivkjj30k00ciwg5.jpg\" alt=\"\" /><br />\n在这里还是要说一下感恩的心。<br />\n但是还是忘不了那部小说给我带来的思考，所以我决定还是入一下女本子坑，此时又收到了另一部安利 ——《终将成为你》</p>\n<h1 id=\"转\"><a class=\"anchor\" href=\"#转\">#</a> 转</h1>\n<p>如果说我的低落是《余生为期》这部小说带来的，那么现在能够努力去打起精神就是《终将成为你》带来的。<br />\n虽然《终将成为你》讲述的是 <code>七海灯子</code> 和 <code>小糸侑</code> 之间的感情，但我觉得这部漫画给我带来的不仅仅是一段恋爱故事。<br />\n七海灯子的自我挣扎与救赎、成长与自我发现，真的是深深的带动了我。谁不是一直在扮演不同的角色呢，只不过灯子的目标很明确，她就是要成为姐姐，成为她眼中的姐姐，而我并没有一个具体的人，想要成为那个人，只是不断地挣扎，努力的生活。<br />\n灯子真的很幸运啊，她遇到了一个带着她改变的侑，她接受灯子的全部，用温柔带领少女走出了<span class=\"red\">要成为谁</span>的阴影，让她彻彻底底地成为了七海灯子这个人。<br />\n当然漫画给我带来的感动不仅仅是七海灯子和小糸侑这一对，其他角色的塑造也是相当成功，真的很幸运能够遇到这样一部漫画！<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1knxxi54nj30q60ijwj8.jpg\" alt=\"\" /></p>\n<h1 id=\"合\"><a class=\"anchor\" href=\"#合\">#</a> 合</h1>\n<p>看完小说和漫画的我，当时是十分羡慕其中的角色的。一开始羡慕林羡能够拥有温柔的萧阿姨，后来却又觉得萧阿姨能够拥有林羡才是最幸运的事。羡慕灯子能够拥有温柔的侑，一直守护在她的身边，接纳那个矛盾的她。<span class=\"red\">为什么我不能够拥有这些呢？</span>理解的家人，支持的同伴，温柔而又强大的另一半。<br />\n想多了，又感觉释怀，毕竟那是虚构的故事，掺杂了多少美好的愿望才写成的故事。我是很希望可以有一个温柔的 &quot;姐姐&quot; 能够陪我长大，但是如果没有，<span class=\"red\">我希望自己能够成为那样温柔又强大的存在</span>。<br />\n现在回头想想，不管是我追星也好，看漫画也好，总是会通过她们来观察自己，也总是希望自己也能像她们那样坚强和勇敢。在心情低落的时候、在走不出来的时候、在遇到难题的时候... 总是会想她们会怎么做呢？会这样自怨自艾吗？会这样放弃吗？会这样抱有遗憾吗？<br />\n一味地希望能够从别人那里汲取温暖和陪伴，不如我也能够成为那样的存在吧，只要我再努力一点，再坚持一下，一定也能够成为她们那样优秀的人吧。<br />\n但是人都会累，会希望自己也能够得到理解和支持，就让我自私的从不认识我的你们身上汲取一点力量吧.....</p>\n",
            "tags": [
                "生活杂谈",
                "絮絮叨叨"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/04/19/Java/Kafka%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%851/",
            "url": "https://sprenedayf.com/2022/04/19/Java/Kafka%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%851/",
            "title": "Kafka学习之旅1",
            "date_published": "2022-04-19T07:38:06.000Z",
            "content_html": "<h1 id=\"消息队列\"><a class=\"anchor\" href=\"#消息队列\">#</a> 消息队列</h1>\n<p>kafka 是消息队列中间件，那我们先简单了解下消息队列能干嘛吧</p>\n<h2 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<h3 id=\"异步处理\"><a class=\"anchor\" href=\"#异步处理\">#</a> 异步处理</h3>\n<p>比如电商网站中，新的用户注册时，需要将用户的信息保存到数据库中，同时还需要额外发送注册的邮件通知、以及短信注册码给用户。但因为发送邮件、发送注册短信需要连接外部的服务器，需要额外等待一段时间，此时，就可以使用消息队列来进行异步处理，从而实现快速响应。<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/006yBBDDly8h1f34y78c0j31l60nu78c.jpg\" alt=\"\" height=\"350px\" /></p>\n<h3 id=\"系统解耦\"><a class=\"anchor\" href=\"#系统解耦\">#</a> 系统解耦</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1f35oqmagj31l80pqq96.jpg\" alt=\"\" height=\"350px\" /></p>\n<h3 id=\"流量削峰\"><a class=\"anchor\" href=\"#流量削峰\">#</a> 流量削峰</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/006yBBDDly8h1f36hvh3ij31i80puafa.jpg\" alt=\"\" height=\"350px\" /></p>\n<h3 id=\"日志处理\"><a class=\"anchor\" href=\"#日志处理\">#</a> 日志处理</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/006yBBDDly8h1f374ob91j31l00kmmzg.jpg\" alt=\"\" height=\"350px\" /></p>\n<h2 id=\"消息队列两种模式\"><a class=\"anchor\" href=\"#消息队列两种模式\">#</a> 消息队列两种模式</h2>\n<h3 id=\"点对点\"><a class=\"anchor\" href=\"#点对点\">#</a> 点对点</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/006yBBDDly8h1f38zfeugj319409cgmf.jpg\" alt=\"\" height=\"250px\" /><br />\n点对点模式特点：</p>\n<ul>\n<li>每个消息只有一个接收者（Consumer）(即一旦被消费，消息就不再在消息队列中)</li>\n<li>发送者和接收者间没有依赖性，发送者发送消息之后，不管有没有接收者在运行，都不会影响到发送者下次发送消息；</li>\n<li>接收者在成功接收消息之后需向队列应答成功，以便消息队列删除当前接收的消息；</li>\n</ul>\n<h3 id=\"发布订阅\"><a class=\"anchor\" href=\"#发布订阅\">#</a> 发布订阅</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1f3aduxz3j319a0cqq4e.jpg\" alt=\"\" height=\"250px\" /><br />\n发布 / 订阅模式特点：</p>\n<ul>\n<li>每个消息可以有多个订阅者；</li>\n<li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。</li>\n<li>为了消费消息，订阅者需要提前订阅该角色主题，并保持在线运行；</li>\n</ul>\n<h1 id=\"kafka介绍\"><a class=\"anchor\" href=\"#kafka介绍\">#</a> kafka 介绍</h1>\n<p>上面简单说了下消息队列相关的东西，是不是磨拳擦踵想了解下 kafka 了呢<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/006yBBDDly8h1f3j457ndj30c80c8t94.jpg\" alt=\"\" height=\"150px\" /><br />\n Kafka 是由 Apache 软件基金会开发的一个开源流平台，由 Scala 和 Java 编写。</p>\n<h2 id=\"集群结构\"><a class=\"anchor\" href=\"#集群结构\">#</a> 集群结构</h2>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/006yBBDDly8h1f5at09uyj31co0u0zmd.jpg\" alt=\"\" height=\"450px\" /><br />\nKafka 中有些核心概念需要明确一下：</p>\n<ul>\n<li><strong>生产者（Producer）</strong>：生产者是向 topic 发布新消息的 Kafka 客户端。生产者可以将数据发布到所选择的 topic 中。生产者负责将记录分配到 topic 中的哪一个 partition 中。</li>\n<li><strong>消费者（Consumer）</strong>：消费者是从 topic 订阅新消息的 Kafka 客户端。消费者通过检查消息的偏移量来区分消息是否已读。</li>\n<li><strong>消息</strong>：kafka 的数据单元被称为消息，消息由字节数组组成。</li>\n<li><strong>Broker</strong> - 一个独立的 Kafka 服务器被称为 Broker。Broker 接受来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存；消费者向 Broker 请求消息，Broker 负责返回已提交的消息。</li>\n<li><strong>主题（Topic）</strong>：kafka 中消息订阅和发送都是基于某个 topic。就比如不同 topic 有 red velvet、twice 等，消费者可以根据自己感兴趣的 topic 来订阅消息，比如我对 red velvet 感兴趣，那么我就订阅该 topic 的消息。生产者会将不同女团的消息放到对应的 topic 中，然后消费者根据自己的订阅就可以只接收该女团的消息。\n<ul>\n<li>不同主题的消息是物理隔离的；</li>\n<li>同一个主题的消息保存在一个或多个 Broker 上。但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处。</li>\n<li>主题有一个或多个分区。</li>\n</ul>\n</li>\n<li><strong>分区（Partition）</strong>：大多数消息系统，同一个 topic 下的消息，存储在一个队列。分区的概念就是把这个队列划分为若干个小队列，每一个小队列就是一个分区。<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1f5ndo01rj313a0u0mzd.jpg\" alt=\"\" height=\"450px\" /><br />\n无分区时，一个 topic 只有一个消费者在消费这个消息队列。采用分区后，如果有两个分区，最多两个消费者同时消费，消费的速度肯定会更快。也就是说<span class=\"red\">分区的设计大大的提升了 kafka 的吞吐量</span>！！<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1f5q8dqvmj31h70u0tax.jpg\" alt=\"\" height=\"450px\" /><br />\n结合上图说一下需要注意的地方：\n<ul>\n<li>一个 partition 只能被同组的一个 consumer 消费</li>\n<li>同一个组里的一个 consumer 可以消费多个 partition</li>\n<li>消费效率最高的情况是 partition 和 consumer 数量相同。这样确保每个 consumer 专职负责一个 partition。</li>\n<li>consumer 数量不能大于 partition 数量。由于第一点的限制，当 consumer 多于 partition 时，就会有 consumer 闲置。</li>\n</ul>\n</li>\n<li><strong>副本（Replica）</strong>：Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余。每个分区的数据都会有多份副本，以此来保证 Kafka 的高可用。<br />\ntopic、partition、replica 的关系如下图所示：<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/006yBBDDly8h1f5z60abdj30u007kmxr.jpg\" alt=\"\" height=\"300px\" /><br />\ntopic 下会划分多个 partition，每个 partition 都有自己的 replica，其中只有一个是 leader replica，其余的是 follower replica。<br />\n消息进来的时候会先存入 leader replica，然后从 leader replica 复制到 follower replica。只有复制全部完成时，consumer 才可以消费此条消息。这是为了确保意外发生时，数据可以恢复。consumer 的消费也是从 leader replica 读取的。<br />\n由此可见，leader replica 做了大量的工作。所以如果不同 partition 的 leader replica 在 kafka 集群的 broker 上分布不均匀，就会造成负载不均衡。kafka 通过轮询算法保证 leader replica 是均匀分布在多个 broker 上。\n<ul>\n<li>Replica 均匀分配在 Broker 上，同一个 partition 的 replica 不会在同一个 borker 上</li>\n<li>同一个 partition 的 Replica 数量不能多于 broker 数量。多个 replica 为了数据安全，一台 server 存多个 replica 没有意义。server 挂掉，上面的副本都要挂掉。</li>\n<li>分区的 leader replica 均衡分布在 broker 上。此时集群的负载是均衡的。这就叫做分区平衡</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Java",
                "中间件",
                "Kafka",
                "框架",
                "中间件",
                "Kafka"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/04/19/Java/Kafka%E7%9A%84%E5%AE%89%E8%A3%85/",
            "url": "https://sprenedayf.com/2022/04/19/Java/Kafka%E7%9A%84%E5%AE%89%E8%A3%85/",
            "title": "Kafka的安装",
            "date_published": "2022-04-19T03:22:00.000Z",
            "content_html": "<h1 id=\"利用docker安装\"><a class=\"anchor\" href=\"#利用docker安装\">#</a> 利用 Docker 安装</h1>\n<p>之前我说过，我希望能够快速开始实践，所以选择了利用 docker 来安装组件，docker-compose 来解决通信问题，这次也一样，先用 docker 安装一个 kafka 集群来上手玩玩，之后有时间会再从头到尾搭建一遍集群的。</p>\n<h2 id=\"创建一个docker网络\"><a class=\"anchor\" href=\"#创建一个docker网络\">#</a> 创建一个 docker 网络</h2>\n<p>通过 <code>docker network create zookeeper_network</code>  命令创建一个名为 <code>zookeeper_network</code>  的 Docker 网络<br />\n这时候你利用 <code>docker network ls</code>  可以看到创建出来了<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1f0wunn90j30wm08egms.jpg\" alt=\"\" height=\"250px\" /></p>\n<h2 id=\"搭建zookeeper集群\"><a class=\"anchor\" href=\"#搭建zookeeper集群\">#</a> 搭建 zookeeper 集群</h2>\n<p>为了解耦，我们把 zookeeper 集群和 kafka 集群成两个 docker-compose.yml 文件</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> zookeeper_network</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">zoo1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> zookeeper<span class=\"token punctuation\">:</span>3.7.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> zoo1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> zoo1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">-</span> 2181<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/zookeeper/zoo1/data:/data\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/zookeeper/zoo1/datalog:/datalog\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token key atrule\">ZOO_MY_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">ZOO_SERVERS</span><span class=\"token punctuation\">:</span> server.1=0.0.0.0<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.2=zoo2<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.3=zoo3<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token key atrule\">zoo2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> zookeeper<span class=\"token punctuation\">:</span>3.7.0</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> zoo2</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> zoo2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">-</span> 2182<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/zookeeper/zoo2/data:/data\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/zookeeper/zoo2/datalog:/datalog\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">ZOO_MY_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token key atrule\">ZOO_SERVERS</span><span class=\"token punctuation\">:</span> server.1=zoo1<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.2=0.0.0.0<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.3=zoo3<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token key atrule\">zoo3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> zookeeper<span class=\"token punctuation\">:</span>3.7.0</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> zoo3</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> zoo3</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">-</span> 2183<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/zookeeper/zoo3/data:/data\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/zookeeper/zoo3/datalog:/datalog\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token key atrule\">ZOO_MY_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token key atrule\">ZOO_SERVERS</span><span class=\"token punctuation\">:</span> server.1=zoo1<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.2=zoo2<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.3=0.0.0.0<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181</pre></td></tr></table></figure><p>然后利用 <code>docker-compose up -d</code>  启动 zookeeper 集群</p>\n<h2 id=\"搭建kafka集群\"><a class=\"anchor\" href=\"#搭建kafka集群\">#</a> 搭建 kafka 集群</h2>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> zookeeper_network</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">kafka1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wurstmeister/kafka<span class=\"token punctuation\">:</span>2.12<span class=\"token punctuation\">-</span>2.4.1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> kafka1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> kafka1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9092:9092\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">external_links</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo3</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_BROKER_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//0.0.0.0<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//192.168.0.225<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span>    <span class=\"token comment\">## 宿主机 IP</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_HOST_NAME</span><span class=\"token punctuation\">:</span> kafka1</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_PORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9092</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ZOOKEEPER_CONNECT</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zoo1:2181,zoo2:2181,zoo3:2181\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/kafka/kafka1/data/:/kafka\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token key atrule\">kafka2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wurstmeister/kafka<span class=\"token punctuation\">:</span>2.12<span class=\"token punctuation\">-</span>2.4.1</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> kafka2</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> kafka2</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9093:9092\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token key atrule\">external_links</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo1</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo2</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo3</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_BROKER_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//0.0.0.0<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//192.168.0.225<span class=\"token punctuation\">:</span><span class=\"token number\">9093</span>    <span class=\"token comment\">## 宿主机 IP</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_HOST_NAME</span><span class=\"token punctuation\">:</span> kafka2</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_PORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9093</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ZOOKEEPER_CONNECT</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zoo1:2181,zoo2:2181,zoo3:2181\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/kafka/kafka2/data/:/kafka\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token key atrule\">kafka3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wurstmeister/kafka<span class=\"token punctuation\">:</span>2.12<span class=\"token punctuation\">-</span>2.4.1</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> kafka3</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> kafka3</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9094:9092\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token key atrule\">external_links</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo1</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo2</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo3</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_BROKER_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//0.0.0.0<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//192.168.0.225<span class=\"token punctuation\">:</span><span class=\"token number\">9094</span>   <span class=\"token comment\">## 宿主机 IP</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_HOST_NAME</span><span class=\"token punctuation\">:</span> kafka3</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ADVERTISED_PORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9094</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_ZOOKEEPER_CONNECT</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zoo1:2181,zoo2:2181,zoo3:2181\"</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/kafka_learn/kafka/kafka3/data/:/kafka\"</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token key atrule\">kafka-manager</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Kafka 图形管理界面</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> sheepkiller/kafka<span class=\"token punctuation\">-</span>manager<span class=\"token punctuation\">:</span>latest</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> kafka<span class=\"token punctuation\">-</span>manager</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> kafka<span class=\"token punctuation\">-</span>manager</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9000:9000\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span>            <span class=\"token comment\"># 连接本 compose 文件创建的 container</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">-</span> kafka1</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token punctuation\">-</span> kafka2</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token punctuation\">-</span> kafka3</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token key atrule\">external_links</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 连接外部 compose 文件创建的 container</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo1</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo2</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token punctuation\">-</span> zoo3</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      <span class=\"token key atrule\">ZK_HOSTS</span><span class=\"token punctuation\">:</span> zoo1<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>zoo2<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span><span class=\"token punctuation\">,</span>zoo3<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      <span class=\"token key atrule\">KAFKA_BROKERS</span><span class=\"token punctuation\">:</span> kafka1<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>kafka2<span class=\"token punctuation\">:</span><span class=\"token number\">9093</span><span class=\"token punctuation\">,</span>kafka3<span class=\"token punctuation\">:</span><span class=\"token number\">9094</span></pre></td></tr></table></figure><p>然后利用 <code>docker-compose up -d</code>  启动 kafka 集群</p>\n<h2 id=\"测试一下\"><a class=\"anchor\" href=\"#测试一下\">#</a> 测试一下</h2>\n<ol>\n<li>首先我们用 <code>docker ps</code>  看看启动起来没有<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/006yBBDDly8h1f15k3xdrj32ew0iujwj.jpg\" alt=\"\" height=\"400px\" /><br />\n看样子是没问题了</li>\n<li>利用 <code>服务器ip:9000</code>  的形式访问一下我们的 kafka manager 界面，配置一下我们的集群<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/006yBBDDly8h1f17cgqhfj30ws0qiq4m.jpg\" alt=\"\" height=\"450px\" /></li>\n<li>创建一个 topic 来测试一下，创建 topic 名为 test，设置 partition 为 3，replica 数为 3<span class=\"red\">【这里注意，你的同一个 partition 的 Replica 数量不能多于 broker 数量，因为多了也是在同一个 broker 上放两个副本，挂了也是都没了没意义啊】</span><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1f1d5b6nvj31ri0cgabp.jpg\" alt=\"\" height=\"350px\" /><br />\n可以看到不同 partition 的 leader 是均匀分布在 broker 上的，并且每个 partition 的副本在每个 broker 上都有</li>\n<li>启动生产者和消费者，这里我用 kafka1 来当生产者，kafka2 来当消费者</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it kafka1 /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kafka-console-producer.sh --broker-list kafka1:9092,kafka2:9092,kafka3:9092 --topic <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span>msg1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span>msg2</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it kafka2 /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kafka-console-consumer.sh --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092 --topic <span class=\"token builtin class-name\">test</span> --from-beginning</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>msg1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>msg2</pre></td></tr></table></figure><p>你自己演示下，生产者那边生产了一消息后，消费者这边就出现一条新消息</p>\n<h2 id=\"20220420更新修正\"><a class=\"anchor\" href=\"#20220420更新修正\">#</a> 2022.04.20 更新修正</h2>\n<p>上面搭建的 kafka 集群进入容器里面进行生产者和消费者测试都是没有问题的，但是在我利用 kafka tools 连接和利用 java 连接的时候发现无论如何都连接不上，所以考虑到是我外界应用无法连接 docker 内的应用，开始 debug。<br />\n我用的是华为云的服务器，公网 ip 是 123.xxxxxx 内网 ip 是 192.xxxxxx，上面我的配置是 <code>KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.0.225:9093</code>  这里用了内网 ip，那么我们现在改成公网 ip 试一试，发现出现了新的问题 <code>Broker may not be available</code> .........<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1fzns8wf7j30d30d33z3.jpg\" alt=\"\" height=\"150px\" /><br />\n 行吧，抱着不解决就不睡觉的心思，耐心去看了解决方案和文档，发现了答案 ——</p>\n<h3 id=\"docker与直接部署的区别\"><a class=\"anchor\" href=\"#docker与直接部署的区别\">#</a> docker 与直接部署的区别</h3>\n<p>直接部署的时候我们 kafka 的参数设置是这样的形式:</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">broker.id</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 监听端口指定为 9093</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">PLAINTEXT://:9093</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 对外部暴露端口     本机 IP: 端口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">PLAINTEXT://192.168.206.155:9093</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">num.network.threads</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token attr-name\">num.io.threads</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token attr-name\">socket.send.buffer.bytes</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">102400</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token attr-name\">socket.receive.buffer.bytes</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">102400</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token attr-name\">socket.request.max.bytes</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">104857600</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token attr-name\">log.dirs</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/tmp/kafka-logs-1</span></pre></td></tr></table></figure><p>而我们 docker-compose.yml 文件中配置项是这样的形式：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">KAFKA_BROKER_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">KAFKA_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//0.0.0.0<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">KAFKA_ADVERTISED_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//192.168.0225<span class=\"token punctuation\">:</span><span class=\"token number\">9093</span>    <span class=\"token comment\">## 宿主机 IP</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">KAFKA_ADVERTISED_HOST_NAME</span><span class=\"token punctuation\">:</span> kafka2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">KAFKA_ADVERTISED_PORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9093</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">KAFKA_ZOOKEEPER_CONNECT</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zoo1:2181,zoo2:2181,zoo3:2181\"</span></pre></td></tr></table></figure><p>所以其实就是在原来 kafka 配置上全部大写， <code>.</code>  变 <code>_</code> ，然后加了个 KAFKA 前缀</p>\n<h3 id=\"listeners与advertisedlisteners的区别\"><a class=\"anchor\" href=\"#listeners与advertisedlisteners的区别\">#</a> listeners 与 advertised.listeners 的区别</h3>\n<p>可以看到我们在配置的时候设置了两个 listener，那么他们分别是干嘛的呢？</p>\n<div class=\"note info no-icon\">\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovL2FkdmVydGlzZWQuaG9zdC5uYW1l\">advertised.host.name</span></strong>: DEPRECATED: only used when advertised.listeners or listeners are not set. Use advertised.listeners instead. Hostname to publish to ZooKeeper for clients to use. In IaaS environments, this may need to be different from the interface to which the broker binds. If this is not set, it will use the value for <span class=\"exturl\" data-url=\"aHR0cDovL2hvc3QubmFtZQ==\">host.name</span> if configured. Otherwise it will use the value returned from java.net.InetAddress.getCanonicalHostName().<br />\n<strong>advertised.listeners</strong>: Listeners to publish to ZooKeeper for clients to use, if different than the listeners config property. In IaaS environments, this may need to be different from the interface to which the broker binds. If this is not set, the value for listeners will be used. Unlike listeners it is not valid to advertise the 0.0.0.0 meta-address.</p>\n</div>\n<p>解释以下就是说如果没有设置任何的 <code>listener</code>  参数，那么就会利用 hostname 和 port 来上报使用，如果设置了 <code>listener</code>  参数就利用 <code>listener</code>  参数中的值来使用，而 <code>listeners</code>  和 <code>advertised.listeners</code>  是为了区分内网和外网的，如果只有内网就可以只是用 <code>listeners</code> ，如果涉及了外网，比如要在云服务器上部署使用就需要用到 <code>advertised.listeners</code>  参数了。<br />\n那么我们现在内网设置的内容是 <code>KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092</code> ，想要外网访问就可以设置为 <code>KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://&lt;服务器ip&gt;:&lt;暴露端口&gt;</code> 。 <code>advertised.listeners</code> ， 用于开发给用户，如果没有设定，直接使用 <code>listeners</code> , 而我们的 <code>listeners</code>  是监控的 <code>0.0.0.0</code>  这外界怎么可能访问的通嘛！<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1g0c1pgdij30c80d0mxh.jpg\" alt=\"\" height=\"150px\" /></p>\n<h3 id=\"java程序与advertisedlisteners的关系\"><a class=\"anchor\" href=\"#java程序与advertisedlisteners的关系\">#</a> java 程序与 advertised.listeners 的关系</h3>\n<p>这个问题我们首先需要知道 zookeeper 在 kafka 中的用处，我简单的提一个现在和我们现在密切相关的用处 ——<strong>Broker 注册</strong><br />\n Broker 是分布式部署并且相互之间相互独立，但是需要有一个注册系统能够将整个集群中的 Broker 管理起来，此时就使用到了 Zookeeper。在 Zookeeper 上会有一个专门用来进行 Broker 服务器列表记录的节点： <code>/brokers/ids</code> <br />\n 我们来验证一下，首先利用 <code>docker exec -it zoo1 /bin/sh</code>  进入到 zoo1 节点中，然后 <code>zkCli.sh</code>  一下，利用 <code>ls /brokers/ids</code>  命令来查看我们 yml 文件中创建的三个 broker 节点<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1g0y1dt4kj30qs02ajrd.jpg\" alt=\"\" height=\"100px\" /><br />\n然后我们看看每个节点里面都存了什么数据 <code>get /brokers/ids/1</code></p>\n<pre><code>&#123;&quot;listener_security_protocol_map&quot;:&#123;&quot;PLAINTEXT&quot;:&quot;PLAINTEXT&quot;&#125;,&quot;endpoints&quot;:[&quot;PLAINTEXT://123.xxxxxxx:9092&quot;],&quot;jmx_port&quot;:-1,&quot;host&quot;:&quot;123.xxxxxxxx&quot;,&quot;timestamp&quot;:&quot;1650424784738&quot;,&quot;port&quot;:9092,&quot;version&quot;:4&#125;\n</code></pre>\n<p><span class=\"red\">Kafka 客户端在连接 Broker 的时候，Broker 将客户端发来的请求附加信息与 Broker 启动时上报给 Zookeeper 的 listeners 参数信息、host（来自 listeners 的中间域名或主机名部分）、port (来自 listeners 的端口部分) 进行了验证，认证通过建立连接执行请求，反之建立连接失败</span><br />\n【就是说如果你在 <code>advertised.listeners</code>  中配置了什么内容在 zookeeper 节点中就是 endpoints 中的内容，然后连接的时候就严格按照 endpoints 中的内容来进行匹配，不同就不让你连】<br />\n这样就很好的解释了为什么有的博客里面说要用 <code>advertised.listeners=PLAINTEXT://kafka1:9092</code>  来配置在 java 程序中就需要配置为 <code>kafka1:9092</code>  了！<br />\n通俗一点来讲：</p>\n<ul>\n<li>如果你的配置文件中是 <code>advertised.listeners=PLAINTEXT://123.xxxxxx:9092</code> ，那么你 java 配置中就需要用 <code>props.put(&quot;bootstrap.servers&quot;, &quot;123.xxxxx:9092&quot;);</code></li>\n<li>如果你的配置文件中是 <code>advertised.listeners=PLAINTEXT://kafka1:9092</code> ，那么你 java 配置中就需要用 <code>props.put(&quot;bootstrap.servers&quot;, &quot;kafka1:9092&quot;);</code>  但是需要多一步，因为你这里写的是 kafka1，你的 java 程序并不知道要去哪里找这个 ip 来发送请求，所以你的这个 java 程序要在哪运行，就要<strong>修改那个机器的 hosts 文件</strong>，加上 ip 和主机名的映射才行！ <code>123.xxxxxx kafka1</code></li>\n</ul>\n<h3 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h3>\n<p>其实我利用公网 ip 和利用主机名来访问的两种形式都试过了，都是可以成功的，至于上面说的利用公网 ip 会导致出现 <code>Broker may not be available</code>  的问题，我姑且把他归罪于网络动荡问题，因为我大半夜的用公网 ip 的形式有这个问题，但是白天想不明白又用公网 ip 测试了一遍又成了....<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1g1duwdojj301u021a9t.jpg\" alt=\"\" height=\"150px\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ol>\n<li>如果需要外网访问 kafka，或者部署在云服务器上要使用，一定要配置 <code>advertised.listeners</code>  参数，并且一定要用公网 ip！</li>\n<li>不论是采用公网 ip 形式还是主机名形式，java 中的连接字符串一定要和 <code>advertised.listeners</code>  中 <code>PLAINTEXT://</code>  后面的内容完全相同才行！</li>\n</ol>\n",
            "tags": [
                "Java",
                "中间件",
                "Kafka",
                "框架",
                "中间件",
                "Kafka"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/04/18/Java/Zookeeper%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%852%E2%80%94%E2%80%94%E5%AE%9E%E8%B7%B5/",
            "url": "https://sprenedayf.com/2022/04/18/Java/Zookeeper%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%852%E2%80%94%E2%80%94%E5%AE%9E%E8%B7%B5/",
            "title": "Zookeeper的学习之旅2——实践",
            "date_published": "2022-04-18T02:30:12.000Z",
            "content_html": "<p>之前介绍了 Zookeeper 的<a href=\"/2022/04/15/Java/Zookeeper%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%851/\">一些知识</a>，是不是摩拳擦掌想要敲两行代码了～<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1do6bhawdj305g05g3yh.jpg\" alt=\"\" height=\"150px\" /></p>\n<h1 id=\"shell命令\"><a class=\"anchor\" href=\"#shell命令\">#</a> Shell 命令</h1>\n<h2 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h2>\n<p><code>ls /</code>  查看根节点下的节点列表<br />\n <code>ls /app1</code>  查看 app1 节点下的结点列表<br />\n <code>get /app1</code>   查看结点的数据和属性<br />\n <code>stat /app1</code>  查看结点的属性</p>\n<h2 id=\"创建\"><a class=\"anchor\" href=\"#创建\">#</a> 创建</h2>\n<p>创建结点并写入数据：</p>\n<p><code>create [-s] [-e] path data</code>  其中 -s 为有序结点，-e 临时结点（默认是持久结点）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create /hadoop <span class=\"token string\">\"123456\"</span>  <span class=\"token comment\"># 此时，如果 quit 退出后再./ZkCient.sh 登入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                         <span class=\"token comment\"># 再用输入 get /hadoop 获取，结点依然存在 (永久结点)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t       </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>create -s /a <span class=\"token string\">\"a\"</span>         <span class=\"token comment\"># 创建一个持久化有序结点，创建的时候可以观察到返回的数据带上了一个 id       </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>create -s /b <span class=\"token string\">\"b\"</span>         <span class=\"token comment\"># 返回的值，id 递增了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>create -s -e /aa <span class=\"token string\">\"aa\"</span>    <span class=\"token comment\"># 依然还会返回自增的 id，quit 后再进来，继续创建，id 依然是往后推的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>create /aa/xx            <span class=\"token comment\"># 继续创建结点，可以看到 pZxid 变化了</span></pre></td></tr></table></figure><h2 id=\"更新\"><a class=\"anchor\" href=\"#更新\">#</a> 更新</h2>\n<p>更新结点的命令是 <code>set</code> ，可以直接进行修改，如下：</p>\n<p><code>set path [version]</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">set</span> /hadoop <span class=\"token string\">\"345\"</span>        <span class=\"token comment\"># 修改结点值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> /hadoop <span class=\"token string\">\"hadoop-x\"</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 也可以基于版本号进行更改，类似于乐观锁，当传入版本号 (dataVersion)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         <span class=\"token comment\"># 和当前结点的数据版本号不一致时，zookeeper 会拒绝本次修改</span></pre></td></tr></table></figure><h2 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h2>\n<p>删除结点的语法如下：</p>\n<p><code>delete path [version]</code>  和  <code>set</code>  方法相似，也可以传入版本号</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>delete /hadoop           <span class=\"token comment\"># 删除结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>delete /hadoop <span class=\"token number\">1</span>         <span class=\"token comment\"># 乐观锁机制，与 set 方法一致</span></pre></td></tr></table></figure><p>要想删除某个结点及其所有后代结点，可以使用递归删除，命令为  <code>rmr path</code></p>\n<h1 id=\"javaapi操作\"><a class=\"anchor\" href=\"#javaapi操作\">#</a> JavaAPI 操作</h1>\n<p>上面简单介绍了一下 Zookeeper 的 Shell 操作，接下来我们正式进入 JavaAPI 阶段。Java 连接 Zookeeper 有挺多方式的 ——Zookeeper 客户端、ZKClient 和 Curator 都可以做到，但是 Zookeeper 与安生 API 使用起来太不方便了，ZKClient 又几乎没什么参考文档，所以我选择 Curator 来操作咯～</p>\n<h2 id=\"curator介绍\"><a class=\"anchor\" href=\"#curator介绍\">#</a> Curator 介绍</h2>\n<p><code>curator</code>  是 <code>Netflix</code>  公司开源的一个  <code>zookeeper</code>  客户端，后捐献给  <code>apache</code> ， <code>curator</code>  框架在 <code>zookeeper</code>  原生 <code>API</code>  接口上进行了包装，解决了很多 <code>zooKeeper</code>  客户端非常底层的细节开发。提供 <code>zooKeeper</code>  各种应用场景 (比如：分布式锁服务、集群领导选举、共享计数器、缓存机制、分布式队列等的抽象封装，实现了 <code>Fluent</code>  风格的 APl 接口，是最好用，最流行的 <code>zookeeper</code>  的客户端<br />\n要使用 curator 也很简单，需要导入以下依赖：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;<span class=\"token tag\">!--</span> curator<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;dependency<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &lt;groupId<span class=\"token punctuation\">></span>org.apache.curator&lt;/groupId<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &lt;artifactId<span class=\"token punctuation\">></span>curator<span class=\"token punctuation\">-</span>framework&lt;/artifactId<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &lt;version<span class=\"token punctuation\">></span>4.0.0&lt;/version<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;/dependency<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;dependency<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &lt;groupId<span class=\"token punctuation\">></span>org.apache.curator&lt;/groupId<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &lt;artifactId<span class=\"token punctuation\">></span>curator<span class=\"token punctuation\">-</span>recipes&lt;/artifactId<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    &lt;version<span class=\"token punctuation\">></span>4.0.0&lt;/version<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&lt;/dependency<span class=\"token punctuation\">></span></pre></td></tr></table></figure><h2 id=\"建立连接\"><a class=\"anchor\" href=\"#建立连接\">#</a> 建立连接</h2>\n<p>第一种方式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 建立连接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 重试策略</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">RetryPolicy</span> retryPolicy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExponentialBackoffRetry</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 第一种方式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @param connectString  连接字符串 地址和端口</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param sessionTimeoutMs  会话超时时间 单位 ms</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param ConnectTimeoutMs  连接超时时间 单位 ms</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param retryPolicy  重试策略</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">CuratorFramework</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">CuratorFrameworkFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123.60.208.239:2181,123.60.208.239:2182,123.60.208.239:2183\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> retryPolicy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 开启连接</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二种方式：（其实就是链式编程啦）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 建立连接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 重试策略</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">RetryPolicy</span> retryPolicy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExponentialBackoffRetry</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 第二种方式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">CuratorFramework</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">CuratorFrameworkFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connectString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123.60.208.239:2181\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionTimeoutMs</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">connectionTimeoutMs</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">retryPolicy</span><span class=\"token punctuation\">(</span>retryPolicy<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">namespace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sprenedf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 开启连接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>session</code>  重连策略</p>\n<ul>\n<li><code>RetryPolicy retry Policy = new RetryOneTime(3000);</code>\n<ul>\n<li>说明：三秒后重连一次，只重连一次</li>\n</ul>\n</li>\n<li><code>RetryPolicy retryPolicy = new RetryNTimes(3,3000);</code>\n<ul>\n<li>说明：每三秒重连一次，重连三次</li>\n</ul>\n</li>\n<li><code>RetryPolicy retryPolicy = new RetryUntilElapsed(1000,3000);</code>\n<ul>\n<li>说明：每三秒重连一次，总等待时间超过个 <code>10</code>  秒后停止重连</li>\n</ul>\n</li>\n<li><code>RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000,3)</code>\n<ul>\n<li>说明：这个策略的重试间隔会越来越长\n<ul>\n<li>公式： <code>baseSleepTImeMs * Math.max(1,random.nextInt(1 &lt;&lt; (retryCount + 1)))</code>\n<ul>\n<li><code>baseSleepTimeMs</code>  =  <code>1000</code></li>\n<li><code>maxRetries</code>  =  <code>3</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建-2\"><a class=\"anchor\" href=\"#创建-2\">#</a> 创建</h2>\n<p>创建节点这里基本可以分为四种：</p>\n<ol>\n<li>基本创建</li>\n<li>创建节点 带有数据</li>\n<li>设置节点的类型</li>\n<li>创建多级节点 /app1/p1</li>\n</ol>\n<h3 id=\"基本创建\"><a class=\"anchor\" href=\"#基本创建\">#</a> 基本创建</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基本创建</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCreate1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"带有数据\"><a class=\"anchor\" href=\"#带有数据\">#</a> 带有数据</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 带有数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCreate2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"spring day!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"设置节点类型\"><a class=\"anchor\" href=\"#设置节点类型\">#</a> 设置节点类型</h3>\n<p>注意我这里设置 while (true) 是因为这里设置的结点类型是临时的，如果当前会话结束，我是看不到状态的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置节点类型，默认类型为持久型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCreate3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>EPHEMERAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>curator 中可以选择的 mode 类型如下：<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/006yBBDDly8h1dqhrc2upj30t607oab1.jpg\" alt=\"\" height=\"250px\" /></p>\n<h3 id=\"创建多级节点\"><a class=\"anchor\" href=\"#创建多级节点\">#</a> 创建多级节点</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建多级节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCreate4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">creatingParentContainersIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app4/p1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里如果不加 <code>creatingParentContainersIfNeeded()</code>  会创建失败</p>\n<h2 id=\"查询-2\"><a class=\"anchor\" href=\"#查询-2\">#</a> 查询</h2>\n<p>创建节点这里基本可以分为三种：</p>\n<ol>\n<li>查询数据：get</li>\n<li>查询子节点：ls</li>\n<li>查询节点状态信息：ls -s</li>\n</ol>\n<h3 id=\"查询数据\"><a class=\"anchor\" href=\"#查询数据\">#</a> 查询数据</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGet1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"查询子节点\"><a class=\"anchor\" href=\"#查询子节点\">#</a> 查询子节点</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询子节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGet2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"查询节点状态信息\"><a class=\"anchor\" href=\"#查询节点状态信息\">#</a> 查询节点状态信息</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询节点状态信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGet3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Stat</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">storingStatIn</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个 Stat 里面的东西将来想要取出来，就可以用 getXXX () 的形式来取<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1dw7u8yv4j30ls0gmgn2.jpg\" alt=\"\" height=\"300px\" /></p>\n<h2 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h2>\n<p>最最最简单的就是这样的形式来做修改：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      client<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"theonly\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是我们考虑这样的情况：如果有多个 client 来修改这个数据，那么会产生丢失修改的问题，怎么解决呢？我们应该都知道 CAS 操作吧，简单来说就是有一个版本号或者时间戳的东西，我们在做修改前通过对比版本号信息就知道我们是否能够正常的修改。这里也是这样：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSetForVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Stat</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">storingStatIn</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> version <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withVersion</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"theonly\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"删除-2\"><a class=\"anchor\" href=\"#删除-2\">#</a> 删除</h2>\n<p>删除节点这里基本可以分为三种：</p>\n<ol>\n<li>删除单个节点</li>\n<li>删除带有子节点的节点</li>\n<li>必须成功的删除</li>\n<li>回调</li>\n</ol>\n<h3 id=\"删除单个节点\"><a class=\"anchor\" href=\"#删除单个节点\">#</a> 删除单个节点</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除单个节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"删除带有子节点的节点\"><a class=\"anchor\" href=\"#删除带有子节点的节点\">#</a> 删除带有子节点的节点</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除带有子节点的节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deletingChildrenIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"必须成功的删除\"><a class=\"anchor\" href=\"#必须成功的删除\">#</a> 必须成功的删除</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 必须成功的删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">guaranteed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"回调\"><a class=\"anchor\" href=\"#回调\">#</a> 回调</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 回调</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inBackground</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BackgroundCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CuratorFramework</span> curatorFramework<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CuratorEvent</span> curatorEvent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被删除啦啦啦~~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>curatorEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果如下：<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1dwo9rvvuj31uu02uaaq.jpg\" alt=\"\" /></p>\n<h2 id=\"watch事件监听\"><a class=\"anchor\" href=\"#watch事件监听\">#</a> Watch 事件监听</h2>\n<ul>\n<li>Zookeeper 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，Zookeeper 服务端会将事件推送到感兴趣的客户端上去，该机制是 Zookeeper 实现分布式协调服务的重要特性。</li>\n<li>Zookeeper 中引入 Watcher 机制来实现<strong>发布 / 订阅</strong>功能，能够让多个订阅者同时监听某一个对象，当一个对象自身状态变化时，会通知所有订阅者</li>\n<li>Curator 引入 Cache 来实现对 Zookeeper 服务段时间的监听</li>\n<li>Curator 提供了三种 watcher：\n<ul>\n<li><code>NodeCache</code> ：只监听某一个特定节点</li>\n<li><code>PathChildrenCache</code> ：监控一个 ZNode 的子节点</li>\n<li><code>TreeCache</code> ：可以监控包含该节点和他所有子节点（包括孙子节点）的所有节点</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nodecache\"><a class=\"anchor\" href=\"#nodecache\">#</a> NodeCache</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// NodeCache</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testNodeCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 1. 创建 NodeCache 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">NodeCache</span> nodeCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeCache</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 2. 注册监听</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nodeCache<span class=\"token punctuation\">.</span><span class=\"token function\">getListenable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeCacheListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">nodeChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"节点变化了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 3. 开启监听 如果设置为 true，则开启监听时，加载缓冲数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    nodeCache<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果我们想要获取中间数据，则如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// NodeCache</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testNodeCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 1. 创建 NodeCache 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">NodeCache</span> nodeCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeCache</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span><span class=\"token string\">\"/app1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 2. 注册监听</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nodeCache<span class=\"token punctuation\">.</span><span class=\"token function\">getListenable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeCacheListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">nodeChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"节点变化了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> nodeCache<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 3. 开启监听 如果设置为 true，则开启监听时，加载缓冲数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    nodeCache<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"pathchildrencache\"><a class=\"anchor\" href=\"#pathchildrencache\">#</a> PathChildrenCache</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// PathChildrenCache</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testPathChildrenCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">PathChildrenCache</span> pathChildrenCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathChildrenCache</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/app2\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    pathChildrenCache<span class=\"token punctuation\">.</span><span class=\"token function\">getListenable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PathChildrenCacheListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">childEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CuratorFramework</span> curatorFramework<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PathChildrenCacheEvent</span> pathChildrenCacheEvent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子节点变化了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pathChildrenCacheEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    pathChildrenCache<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>简单操作一番，可以看到输出如下：<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/006yBBDDly8h1dxkc35vjj31ps0ai41n.jpg\" alt=\"\" height=\"300px\" /><br />\n可以看到这里面有类型，那我们可以根据不同的类型来对不同的操作做出反应：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// PathChildrenCache</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testPathChildrenCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">PathChildrenCache</span> pathChildrenCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathChildrenCache</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/app2\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    pathChildrenCache<span class=\"token punctuation\">.</span><span class=\"token function\">getListenable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PathChildrenCacheListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">childEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CuratorFramework</span> curatorFramework<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PathChildrenCacheEvent</span> pathChildrenCacheEvent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子节点变化了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pathChildrenCacheEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">PathChildrenCacheEvent<span class=\"token punctuation\">.</span>Type</span> type <span class=\"token operator\">=</span> pathChildrenCacheEvent<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PathChildrenCacheEvent<span class=\"token punctuation\">.</span>Type</span><span class=\"token punctuation\">.</span>CHILD_UPDATED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 如果是 update 操作</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> pathChildrenCacheEvent<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pathChildrenCache<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"treecache\"><a class=\"anchor\" href=\"#treecache\">#</a> TreeCache</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TreeCache</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTreeCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">TreeCache</span> treeCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeCache</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span><span class=\"token string\">\"/app3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    treeCache<span class=\"token punctuation\">.</span><span class=\"token function\">getListenable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeCacheListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">childEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CuratorFramework</span> curatorFramework<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeCacheEvent</span> treeCacheEvent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"节点变化啦\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeCacheEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    treeCache<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到运行结果如下：<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1dz5bmz7lj31qa0gq0wv.jpg\" alt=\"\" height=\"300px\" /></p>\n<h2 id=\"实现分布式锁\"><a class=\"anchor\" href=\"#实现分布式锁\">#</a> 实现分布式锁</h2>\n<p>之前我们已经提到过了 Zookeeper 是如何实现分布式锁的，接下来我们代码来模拟一下【场景就 12306 买票吧】：</p>\n<h3 id=\"原始代码\"><a class=\"anchor\" href=\"#原始代码\">#</a> 原始代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author difendDF</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @date 2022/04/18 5:09 下午</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ticket12306</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tickets <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 票数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tickets <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>tickets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              tickets<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author difendDF</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @date 2022/04/18 5:11 下午</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">Ticket12306</span> ticket12306 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ticket12306</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 创建客户端</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>ticket12306<span class=\"token punctuation\">,</span> <span class=\"token string\">\"携程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>ticket12306<span class=\"token punctuation\">,</span> <span class=\"token string\">\"飞猪\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样的代码没有任何的锁，没有并发控制，会导致超卖的问题，所以我们接下来对其改造一下，利用上 Zookeeper 的分布式锁。</p>\n<div class=\"note primary no-icon\">\n<p>这里有些人可能还是会有疑问，我 java 不是提供了 synchronized 关键字和 Lock 吗，为什么要用到分布式锁？<br />\n这是因为 java 那是在一个 jvm 中生效的，对多线程起作用，我们现在相当于是有多个 jvm 部署，那么单个 jvm 锁是没有办法锁住其他 jvm 上的程序的，例子是用多线程模拟的多进程，一定不要混淆了！！！</p>\n</div>\n<h3 id=\"zookeeper实现\"><a class=\"anchor\" href=\"#zookeeper实现\">#</a> zookeeper 实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author difendDF</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @date 2022/04/18 5:09 下午</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ticket12306</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tickets <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 票数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">InterProcessMutex</span> lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Ticket12306</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 重试策略</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">RetryPolicy</span> retryPolicy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExponentialBackoffRetry</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">CuratorFramework</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">CuratorFrameworkFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connectString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123.60.208.239:2181\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">sessionTimeoutMs</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">connectionTimeoutMs</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">retryPolicy</span><span class=\"token punctuation\">(</span>retryPolicy<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">namespace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sprenedf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 开启连接</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      client<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterProcessMutex</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              lock<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tickets <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>tickets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                  tickets<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>              <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                  lock<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                  e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到运行结果如下：<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1e05h2ybnj312k0u0wly.jpg\" alt=\"\" height=\"400px\" /><br />\n虽然有异常，但是对程序接着往下运行没影响的啊！而且这个顺序不管你运行多少遍都是这样，我们的目的达到了！<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/006yBBDDly8h1e07zzv40j308c08c3yk.jpg\" alt=\"\" height=\"150px\" /></p>\n",
            "tags": [
                "Java",
                "中间件",
                "Zookeeper",
                "框架",
                "中间件",
                "Zookeeper"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/04/15/Java/Zookeeper%E7%9A%84%E5%AE%89%E8%A3%85/",
            "url": "https://sprenedayf.com/2022/04/15/Java/Zookeeper%E7%9A%84%E5%AE%89%E8%A3%85/",
            "title": "Zookeeper的安装",
            "date_published": "2022-04-15T08:08:32.000Z",
            "content_html": "<h1 id=\"利用docker安装\"><a class=\"anchor\" href=\"#利用docker安装\">#</a> 利用 Docker 安装</h1>\n<p>本质上我是希望可以快速开始进行 Zookeeper 的相关实践，所以用 Docker 来帮我创建三个容器，利用 docker-compose 来帮我解决容器间的通信问题，<s>这样我就不用自己去配三个机器啦（误）</s></p>\n<h2 id=\"单节点\"><a class=\"anchor\" href=\"#单节点\">#</a> 单节点</h2>\n<ol>\n<li>创建一个文件夹用来将容器内的数据文件和本地文件夹绑定</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> zookeeper <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> zookeeper</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> data</pre></td></tr></table></figure><ol start=\"2\">\n<li>run 一个容器</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run -d -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span><span class=\"token string\">\"Asia/Shanghai\"</span> -p <span class=\"token number\">2181</span>:2181 -v <span class=\"token environment constant\">$PWD</span>/data:/data --name zookeeper --restart always zookeeper:3.7.0</pre></td></tr></table></figure><p>参数说明：</p>\n<pre><code>-e TZ=&quot;Asia/Shanghai&quot; # 指定上海时区 \n-d # 表示在一直在后台运行容器\n-p 2181:2181 # 对端口进行映射，将本地2181端口映射到容器内部的2181端口\n--name # 设置创建的容器名称\n-v # 将本地目录(文件)挂载到容器指定目录；\n--restart always #始终重新启动zookeeper\n</code></pre>\n<h2 id=\"集群\"><a class=\"anchor\" href=\"#集群\">#</a> 集群</h2>\n<p>单节点多没意思，单节点用 zookeeper 这不是<s>脱裤子放屁吗（bushi</s>！</p>\n<ol>\n<li>安装 docker-compose，这边建议利用 miniconda 来安装，上传一个安装包，bash 运行一下，然后 pip install 一下就成了</li>\n<li>写个 docker-compose.yml 文件</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">zoo1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> zookeeper<span class=\"token punctuation\">:</span>3.7.0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> zoo1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> zoo1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">-</span> 2181<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">ZOO_MY_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">ZOO_SERVERS</span><span class=\"token punctuation\">:</span> server.1=0.0.0.0<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.2=zoo2<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.3=zoo3<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">zoo2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> zookeeper<span class=\"token punctuation\">:</span>3.7.0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> zoo2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> zoo2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> 2182<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">ZOO_MY_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">ZOO_SERVERS</span><span class=\"token punctuation\">:</span> server.1=zoo1<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.2=0.0.0.0<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.3=zoo3<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token key atrule\">zoo3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> zookeeper<span class=\"token punctuation\">:</span>3.7.0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> zoo3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> zoo3</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">-</span> 2183<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token key atrule\">ZOO_MY_ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">ZOO_SERVERS</span><span class=\"token punctuation\">:</span> server.1=zoo1<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.2=zoo2<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181 server.3=0.0.0.0<span class=\"token punctuation\">:</span>2888<span class=\"token punctuation\">:</span>3888;2181</pre></td></tr></table></figure><p>此配置文件表示，Docker 需要启动三个 zookeeper 实例，并将 2181，2182，2183 三个端口号映射到容器内的 2181 这个端口上。<br />\n <code>ZOO_MY_ID</code> ：表示 zk 服务的 ID, 取值为 1-255 之间的整数，且必须唯一<br />\n <code>ZOO_SERVERS</code> ：表示 zk 集群的主机列表</p>\n<ol start=\"3\">\n<li>启动集群</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker-compose</span> up -d</pre></td></tr></table></figure><p>这时候我们看一下我们的 docker 容器<br />\n<img data-src=\"https://s1.ax1x.com/2022/04/15/LGIvwT.png\" alt=\"LGIvwT.png\" /></p>\n<ol>\n<li>进去看看 zookeeper 状态</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it zoo1 /bin/sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>zkServer.sh status</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it zoo2 /bin/sh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>zkServer.sh status</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it zoo3 /bin/sh</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>zkServer.sh status</pre></td></tr></table></figure><p>应该可以看到：<br />\n<img data-src=\"https://s1.ax1x.com/2022/04/15/LGokOx.png\" alt=\"LGokOx.png\" height=\"200px\" /></p>\n",
            "tags": [
                "Java",
                "中间件",
                "Zookeeper",
                "框架",
                "中间件",
                "Zookeeper"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/04/15/Java/Zookeeper%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%851/",
            "url": "https://sprenedayf.com/2022/04/15/Java/Zookeeper%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%851/",
            "title": "Zookeeper的学习之旅1",
            "date_published": "2022-04-15T07:36:37.000Z",
            "content_html": "<h1 id=\"zookeeper简介\"><a class=\"anchor\" href=\"#zookeeper简介\">#</a> Zookeeper 简介</h1>\n<h2 id=\"zookeeper是什么\"><a class=\"anchor\" href=\"#zookeeper是什么\">#</a> Zookeeper 是什么？</h2>\n<p>之前我对 Zookeeper 的了解仅限于在了解其他组件的时候总是会提到它，比如：在看 Nacos 注册中心的时候，就会提到 Zookeeper 也可以做注册中心；在看配置中心的时候，也有人提到 Zookeeper 可以做配置中心；在了解 Redis 的过程中，会有人说 Zookeeper 和 Redis 一样都可以实现分布式锁；甚至在我看 clickhouse 的时候，书中都跟我说 clickhouse 的集群是依赖于 zookeeper 的...... 好家伙，你这无处不在啊！那么 Zookeeper 到底是什么？</p>\n<p>Zookeeper 为分布式应用<strong>提供高效且可靠的分布式协调服务</strong>，主要用来解决分布式集群中应用系统的一致性问题，它提供了类似于文件系统的目录节点树方式的数据存储。但是 Zookeeper 并不是专门用来存储数据的，它的作用主要是用来<strong>维护和监控存储数据的状态变化。通过监控这些数据状态的变化，从而可以达到基于数据的集群管理。</strong></p>\n<h2 id=\"zookeeper能干什么\"><a class=\"anchor\" href=\"#zookeeper能干什么\">#</a> Zookeeper 能干什么</h2>\n<ul>\n<li>配置管理\n<ul>\n<li>集群节点可以通过中心源获取启动配置</li>\n<li>更简单的部署</li>\n</ul>\n</li>\n<li>分布式集群管理\n<ul>\n<li>节点加入 / 离开</li>\n<li>节点的实时状态</li>\n</ul>\n</li>\n<li>命名服务，如：DNS</li>\n<li>分布式同步：如锁、栅栏、队列</li>\n<li>分布式系统的选主</li>\n<li>中心化和高可靠的数据注册</li>\n</ul>\n<h2 id=\"需要注意的点\"><a class=\"anchor\" href=\"#需要注意的点\">#</a> 需要注意的点</h2>\n<ul>\n<li>Zookeeper 将<strong>数据全量存储在内存中</strong>，所以性能很高。由于 Zookeeper 的<strong>所有更新和删除操作都是基于事务的</strong>，因此 ZooKeeper 在读多写少的应用场景中有性能表现较好，如果写操作频繁，性能会大大下滑。</li>\n<li>对于来自客户端的每个更新请求，Zookeeper 都会分配一个全局唯一的递增 ID，这个 ID 反映了所有事务请求的先后顺序。</li>\n</ul>\n<h1 id=\"核心概念\"><a class=\"anchor\" href=\"#核心概念\">#</a> 核心概念</h1>\n<h2 id=\"数据模型\"><a class=\"anchor\" href=\"#数据模型\">#</a> 数据模型</h2>\n<p><strong>ZooKeeper 的数据模型是一个树形结构的文件系统。</strong><br />\n树中的节点被称为 <code>znode</code> ，其中根节点为 <code>/</code> ，每个节点上都会保存自己的数据和节点信息。ZooKeeper 的设计目标是实现协调服务，而不是真的作为一个文件存储，因此 <code>znode</code>  存储数据的大小被限制在 <code>1MB</code>  以内。<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1auhgrgj3j30fe0fedg1.jpg\" alt=\"\" height=\"200px\" /><br />\nZooKeeper 的数据访问具有<strong>原子性</strong>。其读写操作都是要么全部成功，要么全部失败。 <code>znode</code>  通过路径被引用。 <code>znode</code>  节点路径必须是绝对路径。<br />\nznode 有两种类型：</p>\n<ul>\n<li><strong>临时的（  <code>EPHEMERAL</code>  ）</strong> - 客户端会话结束时，ZooKeeper 就会删除临时的  <code>znode</code> 。不允许有子节点。</li>\n<li><strong>持久的（  <code>PERSISTENT</code>  ）</strong> - 除非客户端主动执行删除操作，否则 ZooKeeper 不会删除持久的  <code>znode</code> 。</li>\n</ul>\n<h2 id=\"节点信息\"><a class=\"anchor\" href=\"#节点信息\">#</a> 节点信息</h2>\n<p><code>znode</code>  上有一个<strong>顺序标志（  <code>SEQUENTIAL</code>  ）</strong>。如果在创建  <code>znode</code>  时，设置了顺序标志（  <code>SEQUENTIAL</code>  ），那么 ZooKeeper 会使用计数器为  <code>znode</code>  添加一个单调递增的数值，即  <code>zxid</code> 。ZooKeeper 正是利用  <code>zxid</code>  实现了严格的顺序访问控制能力。</p>\n<div class=\"note info\">\n<p>顺序标志这块稍微注意一下哈，以后提到 Zookeeper 的分布式锁的时候就会用到这个～</p>\n</div>\n<p>每个 <code>znode</code>  节点都维护了一个 <code>Stat</code>  的数据结构来存放节点的状态信息。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态属性</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">czxid</td>\n<td style=\"text-align:center\">数据节点创建时的事务 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ctime</td>\n<td style=\"text-align:center\">数据节点创建时的时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mzxid</td>\n<td style=\"text-align:center\">数据节点最后一次更新时的事务 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mtime</td>\n<td style=\"text-align:center\">数据节点最后一次更新时的时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pzxid</td>\n<td style=\"text-align:center\">数据节点的子节点最后一次被修改时的事务 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cversion</td>\n<td style=\"text-align:center\">子节点的更改次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">version</td>\n<td style=\"text-align:center\">节点数据的更改次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">aversion</td>\n<td style=\"text-align:center\">节点的 ACL 的更改次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ephemeralOwner</td>\n<td style=\"text-align:center\">如果节点是临时节点，则表示创建该节点的会话的 SessionID；如果节点是持久节点，则该属性值为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dataLength</td>\n<td style=\"text-align:center\">数据内容的长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">numChildren</td>\n<td style=\"text-align:center\">数据节点当前的子节点个数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"集群角色\"><a class=\"anchor\" href=\"#集群角色\">#</a> 集群角色</h2>\n<p>Zookeeper 的集群角色有三种，每个服务器充当这三个集群角色中的一种：</p>\n<ul>\n<li><strong>Leader</strong> - 它负责 <strong>发起并维护与各 Follwer 及 Observer 间的心跳</strong>。<span class=\"red\">所有</span>的<strong>写操作</strong>必须要通过 Leader 完成再由 Leader 将写操作广播给其它服务器。一个 Zookeeper 集群同一时间只会有一个实际工作的 Leader。</li>\n<li><strong>Follower</strong> - 它会<strong>响应 Leader 的心跳</strong>。Follower 可直接处理并返回客户端的<span class=\"red\">读请求</span>，同时<strong>会将写请求转发给 Leader 处理</strong>，并且负责在 Leader 处理写请求时对请求进行<strong>投票</strong>。一个 Zookeeper 集群可能同时存在多个 Follower。</li>\n<li><strong>Observer</strong> - 角色与 Follower 类似，但是无投票权。【因为 follower 处理读请求好忙啊，需要个 Observer 来帮帮忙，但是你只是帮忙，你不是自家人不能投票】</li>\n</ul>\n<h2 id=\"acl\"><a class=\"anchor\" href=\"#acl\">#</a> ACL</h2>\n<p><strong>ZooKeeper 采用 ACL（Access Control Lists）策略来进行权限控制。</strong></p>\n<ul>\n<li>每个  <code>znode</code>  创建时都会带有一个 ACL 列表，用于决定谁可以对它执行何种操作。</li>\n</ul>\n<p>ACL 依赖于 ZooKeeper 的客户端认证机制。ZooKeeper 提供了以下几种认证方式：</p>\n<ul>\n<li><strong>digest</strong> - 用户名和密码 来识别客户端</li>\n<li><strong>sasl</strong> - 通过 kerberos 来识别客户端</li>\n<li><strong>ip</strong> - 通过 IP 来识别客户端</li>\n</ul>\n<p>ZooKeeper 定义了如下五种权限：</p>\n<ul>\n<li><strong>CREATE</strong> - 允许创建子节点；</li>\n<li><strong>READ</strong> - 允许从节点获取数据并列出其子节点；</li>\n<li><strong>WRITE</strong> - 允许为节点设置数据；</li>\n<li><strong>DELETE</strong> - 允许删除子节点；</li>\n<li><strong>ADMIN</strong> - 允许为节点设置权限。</li>\n</ul>\n<h1 id=\"zookeeper工作原理\"><a class=\"anchor\" href=\"#zookeeper工作原理\">#</a> Zookeeper 工作原理</h1>\n<h2 id=\"读请求\"><a class=\"anchor\" href=\"#读请求\">#</a> 读请求</h2>\n<p>Leader/Follower/Observer 都可直接处理读请求，从本地内存中读取数据并返回给客户端即可。Follower/Observer 越多，整体系统的读请求吞吐量越大。<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/006yBBDDly8h1boywovc7j310m0kpdh0.jpg\" alt=\"\" height=\"300px\" /></p>\n<h2 id=\"写请求\"><a class=\"anchor\" href=\"#写请求\">#</a> 写请求</h2>\n<h3 id=\"写leader\"><a class=\"anchor\" href=\"#写leader\">#</a> 写 Leader</h3>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/006yBBDDly8h1bp1tmau2j30sj0kp0tw.jpg\" alt=\"\" height=\"300px\" /><br />\n总结来说，向 Leader 进行写操作的步骤如下：</p>\n<ol>\n<li>客户端向 Leader 发送写请求</li>\n<li>Leader 将写请求以事务 Proposal 的形式发送给所有的 Follower 并等待 ACK</li>\n<li>Follower 收到 Leader 的事务 Proposal 后返回 ACK</li>\n<li>当 Leader 收到过半数的 ACK（自己默认有一个 ACK）后向所有的 Follower 和 Observer 发送 Commit</li>\n<li>Leader 将处理结果返回给客户端</li>\n</ol>\n<div class=\"note info no-icon\">\n<p>这里需要注意几点：</p>\n<ol>\n<li>Leader 的 ACK 只需要 Follower 的，Observer 无权参与</li>\n<li>Leader 的 Commit 是要 Follower 和 Observer 都参与的</li>\n<li>Leader 自身就有一个 ACK，过半数的计算别忘了它自己的这一票</li>\n</ol>\n</div>\n<h3 id=\"写follower或observer\"><a class=\"anchor\" href=\"#写follower或observer\">#</a> 写 Follower 或 Observer</h3>\n<p>前面提到过，Follower 和 Observer 只能处理读请求，写请求全部要交给 Leader 来处理，所以需要将写请求转发给 Leader，除了这个多出来的转发步骤外，其他流程都与上面相同。</p>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<p>为了保证事务的顺序一致性，ZooKeeper 采用了<strong>递增的事务 id 号（zxid）来标识事务</strong>。Leader 服务会<strong>为每一个 Follower 服务器分配一个单独的队列</strong>，然后将事务 Proposal 依次放入队列中，并根据 FIFO (先进先出) 的策略进行消息发送。Follower 服务在接收到 Proposal 后，会将其<strong>以事务日志的形式写入本地磁盘中，并在写入成功后反馈给 Leader 一个 Ack 响应</strong>。当 Leader 接收到超过半数 Follower 的 Ack 响应后，就会广播一个 Commit 消息给所有的 Follower 以通知其进行事务提交，之后 Leader 自身也会完成对事务的提交。而每一个 Follower 则在接收到 Commit 消息后，完成事务的提交。</p>\n<h2 id=\"观察\"><a class=\"anchor\" href=\"#观察\">#</a> 观察</h2>\n<p><strong>ZooKeeper 允许客户端监听它关心的 znode，当 znode 状态发生变化（数据变化、子节点增减变化）时，ZooKeeper 服务会通知客户端。</strong>【所以说 Zookeeper 也可以完成消息的推送】<br />\n客户端和服务端保持连接一般有两种形式：</p>\n<ul>\n<li>客户端向服务端不断<strong>轮询</strong></li>\n<li>服务端向客户端<strong>推送</strong>状态【Zookeeper 采用】</li>\n</ul>\n<h2 id=\"会话\"><a class=\"anchor\" href=\"#会话\">#</a> 会话</h2>\n<p>ZooKeeper 客户端通过 TCP 长连接连接到 ZooKeeper 服务集群。会话 (Session) 从第一次连接开始就已经建立，之后通过心跳检测机制来保持有效的会话状态。一旦一台客户端与一台服务器建立连接，这台服务器会为这个客户端创建一个新的会话。每个会话都会有一个超时时间，若服务器在超时时间内没有收到任何请求，则相应会话被视为过期。<strong>一旦会话过期，就无法再重新打开，且任何与该会话相关的临时 znode 都会被删除</strong>。</p>\n<h1 id=\"zab协议\"><a class=\"anchor\" href=\"#zab协议\">#</a> ZAB 协议</h1>\n<p>大名鼎鼎的 Paxos 算法知道吧？奥，Zookeeper 没有采用。<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/006yBBDDly8h1bpyohtcej30d60d6jrv.jpg\" alt=\"\" height=\"150px\" /><br />\nZookeeper 采用了名为<strong> ZAB</strong> 的一致性协议。ZAB 协议是 Zookeeper 专门设计的一种支持崩溃恢复的原子广播协议，是 ZooKeeper 的数据一致性和高可用解决方案。</p>\n<p>ZAB 协议定义了两个可以无限循环的流程：</p>\n<ul>\n<li><strong>选举 Leader</strong> - 用于故障恢复，从而保证高可用。</li>\n<li><strong>原子广播</strong> - 用于主从同步，从而保证数据一致性。</li>\n</ul>\n<h2 id=\"选举leader\"><a class=\"anchor\" href=\"#选举leader\">#</a> 选举 Leader</h2>\n<p>在介绍具体的选举 Leader 步骤之前，我们需要先看点东西。<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/006yBBDDly8h1bw275nd2j30x00u0mz7.jpg\" alt=\"\" height=\"150px\" /></p>\n<p>服务器状态：</p>\n<ul>\n<li><strong>LOOKING</strong> - 不确定 Leader 状态。该状态下的服务器认为当前集群中没有 Leader，会发起 Leader 选举</li>\n<li><strong>FOLLOWING</strong> - 跟随者状态。表明当前服务器角色是 Follower，并且它知道 Leader 是谁</li>\n<li><strong>LEADING</strong> - 领导者状态。表明当前服务器角色是 Leader，它会维护与 Follower 间的心跳</li>\n<li><strong>OBSERVING</strong> - 观察者状态。表明当前服务器角色是 Observer，与 Folower 唯一的不同在于不参与选举，也不参与集群写操作时的投票</li>\n</ul>\n<p>投票的重要数据结构：</p>\n<ul>\n<li><strong>服务器 ID (myid)</strong>：编号越大在选举算法中权重越大</li>\n<li><strong>事务 ID (zxid)</strong>：值越大说明数据越新，权重越大</li>\n<li><strong>逻辑时钟 (epoch-logicalclock)</strong>：同一轮投票过程中的逻辑时钟值是相同的，每投完一次值会增加</li>\n</ul>\n<p>那么我们就开始介绍我们的选举流程，选举的话可以分为两种大类型：（1）服务器启动时的选举；（2）运行过程中的选举</p>\n<h3 id=\"服务器启动时选举\"><a class=\"anchor\" href=\"#服务器启动时选举\">#</a> 服务器启动时选举</h3>\n<p>每个节点启动的时候都 LOOKING 观望状态，接下来就开始进行选举主流程。</p>\n<ol>\n<li>每个 Server 发出一个选票。初始化选票都是选自己，每次投票都会包含所推举服务器的 myid 和 zxid，使用 (myid,zxid) 来表示，然后将选票发给集群中的其他机器</li>\n<li>接收来自各个服务器的投票。集群中的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票（epoch）、是否来自 LOOKING 状态的服务器</li>\n<li>处理投票。针对每一次投票，服务器都需要将其他服务器的投票和自己的投票进行对比，对比规则如下【其实在初始情况下，大家都没有 zxid，epoch 也都一样，所以就是说谁的 myid 越大谁就是 leader 啦】：</li>\n</ol>\n<ul>\n<li>优先比较 epoch</li>\n<li>检查 zxid，zxid 比较大的服务器优先作为 leader</li>\n<li>如果 zxid 相同，那么就比较 myid，myid 较大的服务器作为 leader 服务器</li>\n</ul>\n<ol start=\"4\">\n<li>统计投票。每次投票后，服务器统计投票信息，判断是都有过半机器接收到相同的投票信息。</li>\n<li>改变服务器状态。一旦确定了 leader，每个服务器响应更新自己的状态，如果是 follower，那么就变更为 FOLLOWING，如果是 Leader，变更为 LEADING。</li>\n</ol>\n<h3 id=\"运行过程中的选举\"><a class=\"anchor\" href=\"#运行过程中的选举\">#</a> 运行过程中的选举</h3>\n<p>在集群运行过程中，我们的 Leader 可能会挂掉，如果挂了就需要选出来一个新的 Leader，流程如下：</p>\n<ol>\n<li>变更状态。Leader 挂后，余下的非 Observer 服务器都会讲自己的服务器状态变更为 LOOKING，然后开始进入 Leader 选举过程。</li>\n<li>每个 Server 会发出一个投票。在运行期间，每个服务器上的 ZXID 可能不同，此时假定 Server1 的 ZXID 为 123，Server3 的 ZXID 为 122；在第一轮投票中，Server1 和 Server3 都会投自己，产生投票 (1, 123)，(3, 122)，然后各自将投票发送给集群中所有机器。</li>\n<li>接收来自各个服务器的投票。</li>\n<li>处理投票。所以这时候我们的 Server1 将会变成新的 Leader</li>\n</ol>\n<ul>\n<li>优先比较 epoch</li>\n<li>检查 zxid，zxid 比较大的服务器优先作为 leader</li>\n<li>如果 zxid 相同，那么就比较 myid，myid 较大的服务器作为 leader 服务器</li>\n</ul>\n<ol start=\"5\">\n<li>统计投票。</li>\n<li>改变服务器的状态。如果是 Follower，那么就变更为 FOLLOWING，如果是 Leader，就变更为 LEADING。</li>\n</ol>\n<div class=\"note info no-icon\">\n<p>要使 Leader 获得多数 Server 的支持，则 ZooKeeper 集群节点数<strong>必须是奇数</strong>。且存活的节点数目不得少于  <code>N + 1</code>  。</p>\n</div>\n<h2 id=\"原子广播atomic-broadcast\"><a class=\"anchor\" href=\"#原子广播atomic-broadcast\">#</a> 原子广播（Atomic Broadcast）</h2>\n<p>ZAB 协议的原子广播要求：<strong>所有的写请求都会被转发给 Leader，Leader 会以原子广播的方式通知 Follow。当半数以上的 Follow 已经更新状态持久化后，Leader 才会提交这个更新，然后客户端才会收到一个更新成功的响应。</strong></p>\n<h1 id=\"zookeeper的应用\"><a class=\"anchor\" href=\"#zookeeper的应用\">#</a> Zookeeper 的应用</h1>\n<blockquote>\n<p>ZooKeeper 可以用于发布 / 订阅、负载均衡、命令服务、分布式协调 / 通知、集群管理、Master 选举、分布式锁和分布式队列等功能 。</p>\n</blockquote>\n<h2 id=\"命名服务\"><a class=\"anchor\" href=\"#命名服务\">#</a> 命名服务</h2>\n<p>在分布式系统中，通常需要一个全局唯一的名字，如生成全局唯一的订单号等，ZooKeeper 可以通过顺序节点的特性来生成全局唯一 ID，从而可以对分布式系统提供命名服务。</p>\n<h2 id=\"配置管理\"><a class=\"anchor\" href=\"#配置管理\">#</a> 配置管理</h2>\n<p>利用 ZooKeeper 的观察机制，可以将其作为一个高可用的配置存储器，允许分布式应用的参与者检索和更新配置文件。</p>\n<h2 id=\"分布式锁\"><a class=\"anchor\" href=\"#分布式锁\">#</a> 分布式锁</h2>\n<p>可以通过 ZooKeeper 的临时节点和 Watcher 机制来实现分布式排它锁。<br />\n核心思想：<strong>当客户端需要获取锁，就在该锁节点下创建节点，使用完锁，就删除节点</strong><br />\n<img data-src=\"https://tva4.sinaimg.cn/large/006yBBDDly8h1bxlf0gduj31260iyq4x.jpg\" alt=\"\" height=\"350px\" /></p>\n<p>比如我们现在系统内的锁就是 lock 节点，那么 zookeeper 分布式锁流程：</p>\n<ol>\n<li>客户端获取锁时，在 lock 节点下创建<span class=\"red\">临时顺序</span>节点</li>\n<li>客户端获取 lock 下所有的子节点，之后如果发现自己创建的子节点的序号是最小的，则认为自己获取到了锁；如果使用完了就删除自己创建的结点</li>\n<li>如果客户端发现自己并不是 lock 所有子节点中序号最小的，就说明没有获取到锁，此时客户端需要找到逼自己小的那个节点，并对其注册时间监听器，监听删除事件</li>\n<li>如果发现比自己小的那个节点被删除了，则客户端会收到 Watcher 的通知，此时客户端再次去判断自己创建的结点是否是 lock 子节点中序号最小的，如果是就获取到锁；如果不是就重复上述步骤继续获取比自己小的一个节点并注册监听。</li>\n</ol>\n<div class=\"note info no-icon\">\n<p>这里需要注意几个问题：</p>\n<ol>\n<li>为什么创建的是临时顺序节点？<br />\n顺序节点很好理解，我们需要按照生成序号的顺序来决定获取锁的先后顺序嘛；那么注意思考为什么不用持久节点而用临时的呢？我用了持久节点然后每次获取锁之后显示的删除不就行了？其实是因为如果我的客户端获取到了锁之后突然宕机了，这时候它创建的节点就一直不会被删除，导致其他客户端永远不能获取锁，而我们临时节点的删除是当会话结束的时候就自动删除，当你客户端突然出问题了，你创建的临时节点也可以被删除，从而保证系统能够正常工作下去</li>\n<li>监听节点删了为什么不能直接获取锁还要接着再判断一次呢？<br />\n还是那个问题，如果我监听的那个节点的客户端不是因为获取完了锁删除的，而是因为宕机了自动删除了怎么办？所以当监听到的结点删除了之后我们需要再次判断自己是不是有这个资格拿到锁</li>\n</ol>\n</div>\n<p>参考链接：</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdW53dS5naXRodWIuaW8vYmlnZGF0YS10dXRvcmlhbC96b29rZWVwZXIvWm9vS2VlcGVyJUU1JThFJTlGJUU3JTkwJTg2Lmh0bWwjXzEtem9va2VlcGVyLSVFNyVBRSU4MCVFNCVCQiU4Qg==\">Zookeeper 原理</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL3pvb2tlZXBlci1sZWFkZXIuaHRtbA==\">Zookeeper Leader 选举原理</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMU03NDExMzdxWT9wPTE5\">黑马程序员快速入门 zookeeper 技术</span></li>\n</ol>\n",
            "tags": [
                "Java",
                "中间件",
                "Zookeeper",
                "框架",
                "中间件",
                "Zookeeper"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/04/14/Java/Spring-Boot-Druid-Mybatis%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/",
            "url": "https://sprenedayf.com/2022/04/14/Java/Spring-Boot-Druid-Mybatis%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/",
            "title": "Spring Boot+Druid+Mybatis配置多数据源",
            "date_published": "2022-04-14T07:33:12.000Z",
            "content_html": "<h1 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h1>\n<p>项目现在有一个需求，需要从 mysql 中查询一些元数据，从 clickhouse 中查询一些聚合分析数据，所以需要在项目中配置两个数据源，本来是打算用 <code>JDBCTemplate</code>  来创建数据库连接解决，但是内心希望是可以利用连接池来帮助我解决这个需求，毕竟连接池可以帮我们管理连接，而且 clickhouse 也可以利用 Mybatis，正好不用把 sql 写到 java 代码里面了，统一放在 xml 文件里面更好管理。不多废话，直接开始：<br />\n本文采用的是 Druid 连接池，主要考虑到 Druid 自带了监控等功能，我们项目的查询上也没有极致的性能要求。</p>\n<h1 id=\"导入依赖\"><a class=\"anchor\" href=\"#导入依赖\">#</a> 导入依赖</h1>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- clickhouse 连接 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.clickhouse<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>clickhouse-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.3.2-patch7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- druid 多数据源配置 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">&lt;!-- mysql 连接 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">&lt;!-- mybatis 配置 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"配置属性\"><a class=\"anchor\" href=\"#配置属性\">#</a> 配置属性</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">#最大活跃数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">maxActive</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">#初始化数量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">initialSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">#最大连接等待超时时间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">maxWait</span><span class=\"token punctuation\">:</span> <span class=\"token number\">120000</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">validation-query</span><span class=\"token punctuation\">:</span> select 1;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">filter</span><span class=\"token punctuation\">:</span> stat<span class=\"token punctuation\">,</span>wall</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">jdbc-url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//你的mysql地址<span class=\"token punctuation\">:</span>3306/数据库<span class=\"token punctuation\">?</span>characterEncoding=utf8<span class=\"token important\">&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Shanghai</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 你的连接密码</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">clickhouse</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.clickhouse.jdbc.ClickHouseDriver</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">jdbc-url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>clickhouse<span class=\"token punctuation\">:</span>//你的clickhouse地址<span class=\"token punctuation\">:</span><span class=\"token number\">8123</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 连接名 默认为 default</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 你的连接密码</span></pre></td></tr></table></figure><p>与此同时为了能够在控制台打印出我们查询的语句，所以我们可以把 sql 打印出来，还是在你的 yml 文件中配置:</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">com.pig4cloud.pig.tagchbi.dao</span><span class=\"token punctuation\">:</span> debug</pre></td></tr></table></figure><h1 id=\"编写配置类\"><a class=\"anchor\" href=\"#编写配置类\">#</a> 编写配置类</h1>\n<p>这里你有几个数据源就要写几个配置类，比如我项目中有 mysql 和 clickhouse 两个数据源，所以我就写了 <code>MysqlConfig</code>  和 <code>ClickhouseConfig</code>  两个配置类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// MysqlConfig</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author difendDF</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/04/05 10:47 上午</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span>    <span class=\"token comment\">// 注册到容器中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 这里配置你的 DAO 文件的位置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"com.pig4cloud.pig.tagchbi.dao.clickhouse\"</span><span class=\"token punctuation\">,</span>sqlSessionTemplateRef <span class=\"token operator\">=</span> <span class=\"token string\">\"ClickhouseSessionTemplate\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickhouseConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 配置多数据源 关键就在这里 这里配置了不同的数据源扫描不同 mapper</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 这里配置你的 mapper.xml 文件的位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> MAPPER_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:mapper/clickhouse/*.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @desc: sqlSession 配置</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param: []</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @return: org.apache.ibatis.session.Configuration</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     **/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"configurationClickhouse\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span>Configuration</span> <span class=\"token function\">configurationClickhouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span>Configuration</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span>Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 开启驼峰映射</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setMapUnderscoreToCamelCase</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> configuration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"clickhouseDataSource\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.clickhouse\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置配置</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">clickhouseDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DataSourceBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"clickhouseSessionFactory\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">clickhouseSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clickhouseDataSource\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactoryBean</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token function\">configurationClickhouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setTypeAliasesPackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.pig4cloud.pig.tagchbi.dao.clickhouse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClickhouseConfig</span><span class=\"token punctuation\">.</span>MAPPER_LOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"clickhouseTransactionManager\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSourceTransactionManager</span> <span class=\"token function\">clickhouseTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clickhouseDataSource\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"ClickhouseSessionTemplate\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">clickhouseSqlSessionTemplate</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clickhouseSessionFactory\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span>sqlSessionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span>    <span class=\"token comment\">// 注册到容器中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"com.pig4cloud.pig.tagchbi.dao.mysql\"</span><span class=\"token punctuation\">,</span>sqlSessionTemplateRef <span class=\"token operator\">=</span> <span class=\"token string\">\"MysqlSessionTemplate\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MysqlConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 配置多数据源 关键就在这里 这里配置了不同的数据源扫描不同 mapper</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> MAPPER_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:mapper/mysql/*.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @desc: sqlSession 配置</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param: []</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @return: org.apache.ibatis.session.Configuration</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"configurationMysql\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span>Configuration</span> <span class=\"token function\">configurationMysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span>Configuration</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span>Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 开启驼峰映射</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setMapUnderscoreToCamelCase</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> configuration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"MysqlDataSource\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Primary</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.mysql\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置配置</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">mysqlDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DataSourceBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"MysqlSessionFactory\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Primary</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">mysqlSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MysqlDataSource\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactoryBean</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token function\">configurationMysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setTypeAliasesPackage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.pig4cloud.pig.tagchbi.dao.mysql\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        bean<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlConfig</span><span class=\"token punctuation\">.</span>MAPPER_LOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"MysqlTransactionManager\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Primary</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSourceTransactionManager</span> <span class=\"token function\">mysqlTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MysqlDataSource\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"MysqlSessionTemplate\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token annotation punctuation\">@Primary</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionTemplate</span> <span class=\"token function\">mysqlSqlSessionTemplate</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MysqlSessionFactory\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionTemplate</span><span class=\"token punctuation\">(</span>sqlSessionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @desc: 数据源 1 的事务管理</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     * @param: [dataSource]</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * @return: org.springframework.jdbc.datasource.DataSourceTransactionManager</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     **/</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"dataSourceTransactionManagerMysql\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token annotation punctuation\">@Primary</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSourceTransactionManager</span> <span class=\"token function\">dataSourceTransactionManagerMysql</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MysqlDataSource\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>项目路径如图所示<br />\n<img data-src=\"https://s1.ax1x.com/2022/04/14/LlbXqK.png\" alt=\"LlbXqK.png\" title=\"项目结构\" height=\"200px\" /></p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>在需要使用的位置，直接 Autowired 你写的 DAO 接口，然后在相应的 xml 文件中写 sql 语句就可以正常使用了。</p>\n<h1 id=\"小tips\"><a class=\"anchor\" href=\"#小tips\">#</a> 小 Tips</h1>\n<ol>\n<li>因为我在配置多数据源前已经用 Mybatis 操作了 mysql 数据库，在配置了多数据源之后发现表和实体之间的映射出现了问题，判断是驼峰命名出现了问题，这时候我在 yml 配置文件中加入 <code>type-aliases-package: com.pig4cloud.pig.tagchbi.dao\t#使用驼峰注解映射</code> 是无效的。这是因为你项目中有多个数据源，而 mybatis 不知道你这个配置要给哪个数据源用，所以我就在每个数据源的配置文件中单独加了一行代码 <code>configuration.setMapUnderscoreToCamelCase(true);</code>  来保证驼峰命名开启</li>\n<li>虽然考虑到 Druid 的监控，但是现在项目中暂时没有开启，如果要开启，可以在 yml 配置文件中写入</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 池中维护的最小空闲连接数，默认为 0 个。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span> <span class=\"token comment\"># 池中最大连接数，包括闲置和使用中的连接，默认为 8 个。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">filter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">stat</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 配置 StatFilter ，对应文档 https://github.com/alibaba/druid/wiki/% E9%85%8D% E7% BD% AE_StatFilter</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">log-slow-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 开启慢查询记录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">slow-sql-millis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span> <span class=\"token comment\"># 慢 SQL 的标准，单位：毫秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">stat-view-servlet</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 配置 StatViewServlet ，对应文档 https://github.com/alibaba/druid/wiki/% E9%85%8D% E7% BD% AE_StatViewServlet% E9%85%8D% E7% BD% AE</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否开启 StatViewServlet</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">login-username</span><span class=\"token punctuation\">:</span> sprenedayf <span class=\"token comment\"># 账号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">login-password</span><span class=\"token punctuation\">:</span> theonly <span class=\"token comment\"># 密码</span></pre></td></tr></table></figure><p>然后就可以通过 <code>localhost:8080/druid</code>  来访问到监控页面</p>\n",
            "tags": [
                "Java",
                "框架",
                "Spring Boot",
                "框架"
            ]
        },
        {
            "id": "https://sprenedayf.com/2022/04/10/computer-science/linux%E5%AD%A6%E4%B9%A01/",
            "url": "https://sprenedayf.com/2022/04/10/computer-science/linux%E5%AD%A6%E4%B9%A01/",
            "title": "linux学习1",
            "date_published": "2022-04-10T09:55:31.000Z",
            "content_html": "<h1 id=\"linux学习\"><a class=\"anchor\" href=\"#linux学习\">#</a> linux 学习</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZG9uZ3llOTUvcC8xMjQzNDQ0OC5odG1s\">Linux 实战 100 讲</span></p>\n</blockquote>\n<h2 id=\"文件基本属性\"><a class=\"anchor\" href=\"#文件基本属性\">#</a> 文件基本属性</h2>\n<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p>\n<ul>\n<li>当为 <strong>d</strong> 则是目录</li>\n<li>当为 <strong>-</strong> 则是文件；</li>\n<li>若是 <strong>l</strong> 则表示为链接文档 (link file)；</li>\n<li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备 (可随机存取装置)；</li>\n<li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标 (一次性读取装置)。</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2022/04/10/LA4UhR.png\" alt=\"LA4UhR.png\" /></p>\n<p>文件的权限字符为： <strong>-rwxrwxrwx</strong> ， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>\n<ul>\n<li>r:4</li>\n<li>w:2</li>\n<li>x:1</li>\n</ul>\n<p>每种身份 (owner/group/others) 各自的三个权限 (r/w/x) 分数是需要累加的，例如当权限为： <strong>-rwxrwx---</strong> 分数则是：</p>\n<ul>\n<li>owner = rwx = 4+2+1 = 7</li>\n<li>group = rwx = 4+2+1 = 7</li>\n<li>others= --- = 0+0+0 = 0</li>\n</ul>\n<h2 id=\"处理目录有关命令\"><a class=\"anchor\" href=\"#处理目录有关命令\">#</a> 处理目录有关命令</h2>\n<ul>\n<li>ls（英文全拼：list files）: 列出目录及文件名</li>\n<li>cd（英文全拼：change directory）：切换目录</li>\n<li>pwd（英文全拼：print work directory）：显示目前的目录</li>\n<li>mkdir（英文全拼：make directory）：创建一个新的目录</li>\n<li>rmdir（英文全拼：remove directory）：删除一个空的目录</li>\n<li>cp（英文全拼：copy file）: 复制文件或目录</li>\n<li>rm（英文全拼：remove）: 删除文件或目录</li>\n<li>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># mkdir test1/test2/test3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mkdir: cannot create directory ‘test1/test2/test3’: No such <span class=\"token function\">file</span> or directory</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># mkdir mkdir -p test1/test2/test3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># tree</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>├── <span class=\"token function\">mkdir</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>└── test1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    └── test2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        └── test3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">4</span> directories, <span class=\"token number\">0</span> files</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># mkdir -m 711 testm</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># ll</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>total <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">5</span> root root <span class=\"token number\">4096</span> Sep <span class=\"token number\">17</span> <span class=\"token number\">14</span>:15 ./</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>drwx------ <span class=\"token number\">6</span> root root <span class=\"token number\">4096</span> Sep <span class=\"token number\">17</span> <span class=\"token number\">14</span>:13 <span class=\"token punctuation\">..</span>/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> Sep <span class=\"token number\">17</span> <span class=\"token number\">14</span>:14 mkdir/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>drwxr-xr-x <span class=\"token number\">3</span> root root <span class=\"token number\">4096</span> Sep <span class=\"token number\">17</span> <span class=\"token number\">14</span>:14 test1/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>drwx--x--x <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> Sep <span class=\"token number\">17</span> <span class=\"token number\">14</span>:15 testm/</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># rmdir: 删除空的目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># tree</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>├── test1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│   └── test2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│       └── test3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>└── testm</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4</span> directories, <span class=\"token number\">0</span> files</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># rmdir testm</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># tree</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>└── test1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    └── test2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        └── test3</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">3</span> directories, <span class=\"token number\">0</span> files</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>root@difend:~/test<span class=\"token comment\"># rmdir test1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>rmdir: failed to remove <span class=\"token string\">'test1'</span><span class=\"token builtin class-name\">:</span> Directory not empty</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cp [-adfilprsu] 来源档 (source) 目标档 (destination)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>选项与参数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；<span class=\"token punctuation\">(</span>常用<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-d：若来源档为连结档的属性<span class=\"token punctuation\">(</span>link <span class=\"token function\">file</span><span class=\"token punctuation\">)</span>，则复制连结档属性而非文件本身；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-f：为强制<span class=\"token punctuation\">(</span>force<span class=\"token punctuation\">)</span>的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-i：若目标档<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">)</span>已经存在时，在覆盖时会先询问动作的进行<span class=\"token punctuation\">(</span>常用<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-l：进行硬式连结<span class=\"token punctuation\">(</span>hard <span class=\"token function\">link</span><span class=\"token punctuation\">)</span>的连结档创建，而非复制文件本身；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>-p：连同文件的属性一起复制过去，而非使用默认属性<span class=\"token punctuation\">(</span>备份常用<span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>-r：递归持续复制，用於目录的复制行为；<span class=\"token punctuation\">(</span>常用<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-s：复制成为符号连结档 <span class=\"token punctuation\">(</span>symbolic <span class=\"token function\">link</span><span class=\"token punctuation\">)</span>，亦即『捷径』文件；</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>-u：若 destination 比 <span class=\"token builtin class-name\">source</span> 旧才升级 destination ！</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># rm [-fir] 文件或目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 选项与参数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-i ：互动模式，在删除前会询问使用者是否动作</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-r ：递归删除</pre></td></tr></table></figure><h2 id=\"linux文件内容查看\"><a class=\"anchor\" href=\"#linux文件内容查看\">#</a> Linux 文件内容查看</h2>\n<p>Linux 系统中使用以下命令来查看文件的内容：</p>\n<ul>\n<li>cat 由第一行开始显示文件内容</li>\n<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>\n<li>nl  显示的时候，顺道输出行号！</li>\n<li>more 一页一页的显示文件内容</li>\n<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>\n<li>head 只看头几行</li>\n<li>tail 只看尾巴几行</li>\n</ul>\n<h2 id=\"用户和用户组管理\"><a class=\"anchor\" href=\"#用户和用户组管理\">#</a> 用户和用户组管理</h2>\n<h3 id=\"添加新用户\"><a class=\"anchor\" href=\"#添加新用户\">#</a> 添加新用户</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> 选项 用户名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># useradd –d  /home/sam -m sam</span></pre></td></tr></table></figure><p>参数说明：</p>\n<ul>\n<li>\n<p>选项:</p>\n<ul>\n<li>-c comment 指定一段注释性描述。</li>\n<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用 - m 选项，可以创建主目录。</li>\n<li>-g 用户组 指定用户所属的用户组。</li>\n<li>-G 用户组，用户组 指定用户所属的附加组。</li>\n<li>-s Shell 文件 指定用户的登录 Shell。</li>\n<li>-u 用户号 指定用户的用户号，如果同时有 - o 选项，则可以重复使用其他用户的标识号。</li>\n</ul>\n</li>\n<li>\n<p>用户名:</p>\n<p>指定新账号的登录名。</p>\n</li>\n</ul>\n<h3 id=\"删除账号\"><a class=\"anchor\" href=\"#删除账号\">#</a> 删除账号</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">userdel</span> 选项 用户名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># userdel -r sam</span></pre></td></tr></table></figure><h3 id=\"修改账号\"><a class=\"anchor\" href=\"#修改账号\">#</a> 修改账号</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">usermod</span> 选项 用户名</pre></td></tr></table></figure><h3 id=\"用户口令\"><a class=\"anchor\" href=\"#用户口令\">#</a> 用户口令</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> 选项 用户名</pre></td></tr></table></figure><p>用户修改自己的口令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">passwd</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Old password:****** </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>New password:******* </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Re-enter new password:*******</pre></td></tr></table></figure><p>超级用户修改某个用户的口令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># passwd sam </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>New password:******* </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Re-enter new password:*******</pre></td></tr></table></figure><h2 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<h3 id=\"给用户分配使用权限\"><a class=\"anchor\" href=\"#给用户分配使用权限\">#</a> 给用户分配使用权限</h3>\n<p>1. 查看某应用的用户组</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/group <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 应用名称</pre></td></tr></table></figure><p>2. 将用户添加到对应的用户组</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addgroup 用户名 应用组名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>eg:addgroup wxm <span class=\"token function\">docker</span></pre></td></tr></table></figure><p>3. 更新用户组</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>newgrp 应用组名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>eg: newgrp <span class=\"token function\">docker</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机基础",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://sprenedayf.com/2020/08/13/theme-shoka-doc/special/",
            "url": "https://sprenedayf.com/2020/08/13/theme-shoka-doc/special/",
            "title": "Step.4 主题特殊功能",
            "date_published": "2020-08-13T13:45:48.000Z",
            "content_html": "<div class=\"note primary\">\n<p><a href=\"/2020/08/13/theme-shoka-doc/\">🚀快速开始</a> - <a href=\"/2020/08/13/theme-shoka-doc/dependents/\">💌依赖插件</a> - <a href=\"/2020/08/13/theme-shoka-doc/config/\">📌基本配置</a> - <a href=\"/2020/08/13/theme-shoka-doc/display/\">🌈界面显示</a> - <a href=\"/2020/08/13/theme-shoka-doc/special/\"><strong>🦄特殊功能</strong></a></p>\n</div>\n<div class=\"note info\">\n<p>以下介绍可以使用的 markdown 或者标签代码。<br />\n功能大部分基于 <code>hexo-renderer-multi-markdown-it</code>  渲染器，尤其是代码块的显示，与默认渲染器不兼容。</p>\n</div>\n<h1 id=\"links-链接块\"><a class=\"anchor\" href=\"#links-链接块\">#</a>  <code>links</code>  链接块</h1>\n<p>本功能参考 NexT，基于 Hexo Tag 功能，用来建立友链或其他网址链接功能。</p>\n<p>文章中的使用格式：</p>\n<ol>\n<li>使用 <code>links</code>  标签块，包围 <code>yml</code>  语法书写的内容，字段包括</li>\n</ol>\n<table>\n<tbody>\n<tr>\n<td><code>site</code></td>\n<td>站点名称</td>\n<td>必填</td>\n</tr>\n<tr>\n<td><code>owner</code></td>\n<td>管理员名字</td>\n<td>可选，默认为 <code>site</code>  的值</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>站点链接</td>\n<td>必填</td>\n</tr>\n<tr>\n<td><code>desc</code></td>\n<td>站点描述</td>\n<td>可选，默认为 <code>url</code>  的值</td>\n</tr>\n<tr>\n<td><code>image</code></td>\n<td>站点图片</td>\n<td>可选，默认为 <code>images/404.png</code></td>\n</tr>\n<tr>\n<td><code>color</code></td>\n<td>方块颜色</td>\n<td>可选，默认为 <code>#666</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% links %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- site: #站点名称</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  owner: #管理员名字</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  url: #站点网址</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  desc: #简短描述</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  image: #一张图片</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  color: #颜色代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#123;% endlinks %&#125;</pre></td></tr></table></figure><p>举个栗子：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% links %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  owner: 霜月琉璃</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  desc: 琉璃的医学 &amp; 编程笔记</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  image: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;amehime&#x2F;shoka@latest&#x2F;images&#x2F;avatar.jpg</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  color: &quot;#e9546b&quot;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  owner: 霜月琉璃</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  image: images&#x2F;avatar.jpg</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  desc: 琉璃的医学 &amp; 编程笔记</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  color: &quot;#9d5b8b&quot;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#123;% endlinks %&#125;</pre></td></tr></table></figure><p><div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div><div class=\"item\" title=\"霜月琉璃\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div></p>\n<ol start=\"2\">\n<li>以上标签块里的内容，还可以保存到一个 <code>yml</code>  文件中，然后使用 <code>linksfile</code>  标签。<br />\n其中， <code>path</code>  位于 <code>&lt;root&gt;/source</code>  目录下。</li>\n</ol>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% linksfile [path] %&#125;</pre></td></tr></table></figure><p>举个栗子：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% linksfile friends&#x2F;_data.yml %&#125;</pre></td></tr></table></figure><h1 id=\"code代码块\"><a class=\"anchor\" href=\"#code代码块\">#</a>  <code>code</code>  代码块</h1>\n<p>使用 <code>markdown-it-prism</code>  进行代码高亮，支持显示行号、行高亮 <code>mark</code> 、命令行提示符 <code>command</code> 、代码块标题。</p>\n<p>基本格式： <code>[language] [title] [url] [link text] [mark] [command]</code></p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<p>language</p>\n</td>\n<td>\n<ul>\n<li>支持的语言<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmlzbWpzLmNvbS8jc3VwcG9ydGVkLWxhbmd1YWdlcw==\">戳此</span></li>\n<li>如果不需要代码高亮，但希望显示代码块样式，则设为 <code>raw</code></li>\n<li>留空或设为 <code>info</code> ，将不显示代码高亮和代码块样式</li>\n</ul>\n</td>\n<td>\n<p>null</p>\n</td>\n</tr>\n<tr>\n<td>title</td>\n<td>代码块的标题文字</td>\n<td>null</td>\n</tr>\n<tr>\n<td>url</td>\n<td>代码块标题右侧显示的链接</td>\n<td>null</td>\n</tr>\n<tr>\n<td>link text</td>\n<td>上述链接显示的标题</td>\n<td>link</td>\n</tr>\n<tr>\n<td>\n<p>mark</p>\n</td>\n<td>\n<p>行高亮显示，格式为 <code>mark:行号,行号开始-行号结束,其他行号</code> 。<br />\n例如 <code>mark:1,4-7,10</code> ，将高亮显示第 1、4、5、6、7、10 行</p>\n</td>\n<td>\n<p>null</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>command</p>\n</td>\n<td>\n<p>命令行提示符，格式为 <code>command:(&quot;提示内容&quot;:行号,行号||&quot;提示内容&quot;:行号开始-行号结束)</code> <br />\n 例如 <code>command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</code></p>\n</td>\n<td>\n<p>null</p>\n</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#96;&#96;&#96;java 行高亮 https:&#x2F;&#x2F;shoka.lostyu.me 参考链接 mark:1,6-7</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>import java.util.Scanner;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Scanner in &#x3D; new Scanner (System.in);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#x2F;&#x2F; 输入 Scan 之后，按下键盘 Alt + “&#x2F;” 键，Eclipse 下自动补全。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println (in.nextLine ());</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println (&quot;Hello&quot; + &quot;world.&quot;);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#96;&#96;&#96;bash 命令行提示符 command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pwd</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#x2F;usr&#x2F;home&#x2F;chris&#x2F;bin</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ls -la</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>total 2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>git add -A</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>git commit -m &quot;update&quot;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>git push</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>行高亮</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">参考链接</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">ls</span> -la</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h1 id=\"quiz-练习题与答案\"><a class=\"anchor\" href=\"#quiz-练习题与答案\">#</a>  <code>quiz</code>  练习题与答案</h1>\n<p>这个功能是用来显示练习题的。<br />\n需要在 Front Matter 中添加 <code>quiz: true</code> ，以正确显示题型标签。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>几个例子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 练习题与答案</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>quiz: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1. 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 &#123;.quiz .true&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2. 有基类 &#96;SHAPE&#96;，派生类 &#96;CIRCLE&#96;，声明如下变量：  &#123;.quiz .multi&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#96;&#96;&#96;cpp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    SHAPE shape1,*p1;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    CIRCLE circle1,*q1;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    &#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    下列哪些项是 “派生类对象替换基类对象”。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    - &#96;p1&#x3D;&amp;circle1;&#96; &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    - &#96;q1&#x3D;&amp;shape1;&#96;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    - &#96;shape1&#x3D;circle1;&#96; &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    - &#96;circle1&#x3D;shape1;&#96;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#123;.options&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    &gt; - :heavy_check_mark: 令基类对象的指针指向派生类对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    &gt; - :x: 派生类指针指向基类的引用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    &gt; - :heavy_check_mark: 派生类对象给基类对象赋值</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    &gt; - :x: 基类对象给派生类对象赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &gt; &#123;.options&#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>3. 下列叙述正确的是 []&#123;.gap&#125; 。 &#123;.quiz&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    - 虚函数只能定义成无参函数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    - 虚函数不能有返回值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    - 能定义虚构造函数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    - A、B、C 都不对 &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>&#123;.options&#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>10. 如果定义 &#96;int e&#x3D;8; double f&#x3D;6.4, g&#x3D;8.9;&#96;，则表达式 &#96;f+int (e&#x2F;3*int (f+g)&#x2F;2)%4&#96; 的值为 [9.4]&#123;.gap&#125;。 &#123;.quiz .fill&#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    &gt; 注意运算顺序和数据类型</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &gt; [8.4]&#123;.mistake&#125;</pre></td></tr></table></figure><p>点击选项可以显示答案，以及答案解析。</p>\n<ol>\n<li class=\"quiz\">\n<p>下列叙述正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz multi\">\n<p>有基类 <code>SHAPE</code> ，派生类 <code>CIRCLE</code> ，声明如下变量： </p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p>\n</li>\n<li class=\"quiz fill\">\n<p>如果定义 <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int(e/3*int(f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br />\n<span class=\"mistake\"> 8.4</span></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"使用说明\"><a class=\"anchor\" href=\"#使用说明\">#</a> 使用说明</h2>\n<p>本功能基于 <code>markdown-it-bracketed-spans</code>  和 <code>markdown-it-attrs</code></p>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#123;.quiz&#125;</code></td>\n<td>选择题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .multi&#125;</code></td>\n<td>多选题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .true&#125;</code></td>\n<td>正确的判断题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .false&#125;</code></td>\n<td>错误的判断题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .fill&#125;</code></td>\n<td>填空题</td>\n</tr>\n<tr>\n<td><code>[]&#123;.gap&#125;</code></td>\n<td>空白下划线</td>\n</tr>\n<tr>\n<td><code>[答案内容]&#123;.gap&#125;</code></td>\n<td>答案内容带下划线</td>\n</tr>\n<tr>\n<td><code>&#123;.options&#125;</code></td>\n<td>ABCDE 选项</td>\n</tr>\n<tr>\n<td><code>&#123;.correct&#125;</code></td>\n<td>选择题的正确选项</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>答案解析</td>\n</tr>\n<tr>\n<td><code>[8.4]&#123;.mistake&#125;</code></td>\n<td>错题备注</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"emoji-绘文字\"><a class=\"anchor\" href=\"#emoji-绘文字\">#</a>  <code>emoji</code>  绘文字</h1>\n<p>本功能基于 <code>markdown-it-emoji</code> ，所有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0LWVtb2ppL2Jsb2IvbWFzdGVyL2xpYi9kYXRhL2Z1bGwuanNvbg==\">标签参考戳此</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:kissing_heart:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:ring:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:notes:</pre></td></tr></table></figure><p>😘 💍 🎶</p>\n<h1 id=\"effects-文字特效\"><a class=\"anchor\" href=\"#effects-文字特效\">#</a>  <code>effects</code>  文字特效</h1>\n<p>本功能基于 <code>markdown-it-ins</code> 、  <code>markdown-it-bracketed-spans</code>  和 <code>markdown-it-attrs</code></p>\n<blockquote>\n<p>本主题风格颜色通用样式：default、primary、success、info、warning、danger</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>++ 下划线 ++</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++ 波浪线 ++&#123;.wavy&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>++ 着重点 ++&#123;.dot&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>++ 紫色下划线 ++&#123;.primary&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>++ 绿色波浪线 ++&#123;.wavy .success&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>++ 黄色着重点 ++&#123;.dot .warning&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>~~ 删除线～～</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>~~ 红色删除线～～&#123;.danger&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#x3D;&#x3D; 荧光高亮 &#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>[赤橙黄绿青蓝紫]&#123;.rainbow&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>[红色]&#123;.red&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>[粉色]&#123;.pink&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>[橙色]&#123;.orange&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>[黄色]&#123;.yellow&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>[绿色]&#123;.green&#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>[靛青]&#123;.aqua&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>[蓝色]&#123;.blue&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>[紫色]&#123;.purple&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>[灰色]&#123;.grey&#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>快捷键 [Ctrl]&#123;.kbd&#125; + [C]&#123;.kbd .red&#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>H~2~0</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>29^th^</pre></td></tr></table></figure><div class=\"note warning\">\n<p>这段代码因为自动被 pangu.js 处理了一下，加了几个空格，导致直接复制代码不能正常显示。<br />\n正确的代码是 <code>++下划线++</code>   <code>~~删除线~~</code>   <code>==荧光高亮==</code> ，不能有空格哦。</p>\n</div>\n<p><ins>下划线</ins><br />\n<ins class=\"wavy\">波浪线</ins><br />\n<ins class=\"dot\">着重点</ins><br />\n<ins class=\"primary\">紫色下划线</ins><br />\n<ins class=\"wavy success\">绿色波浪线</ins><br />\n<ins class=\"dot warning\">黄色着重点</ins><br />\n<s>删除线</s><br />\n<s class=\"danger\">红色删除线</s><br />\n<mark>荧光高亮</mark><br />\n<span class=\"rainbow\">赤橙黄绿青蓝紫</span><br />\n<span class=\"red\">红色</span><br />\n<span class=\"pink\">粉色</span><br />\n<span class=\"orange\">橙色</span><br />\n<span class=\"yellow\">黄色</span><br />\n<span class=\"green\">绿色</span><br />\n<span class=\"aqua\">靛青</span><br />\n<span class=\"blue\">蓝色</span><br />\n<span class=\"purple\">紫色</span><br />\n<span class=\"grey\">灰色</span><br />\n快捷键 <span class=\"kbd\">Ctrl</span> + <span class=\"kbd red\">C</span><br />\nH<sub>2</sub>0<br />\n29<sup>th</sup></p>\n<h1 id=\"spoiler隐藏文字\"><a class=\"anchor\" href=\"#spoiler隐藏文字\">#</a>  <code>spoiler</code>  隐藏文字</h1>\n<p>本功能基于 <code>markdown-it-spoiler</code>  和 <code>markdown-it-attrs</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>!! 模糊模糊模糊模糊模糊模糊！！&#123;.bulr&#125; ： 选中文字显示内容</pre></td></tr></table></figure><p><span class=\"spoiler\" title=\"你知道得太多了\">黑幕黑幕黑幕黑幕黑幕黑幕</span> ： 鼠标滑过显示内容<br />\n<span class=\"spoiler bulr\" title=\"你知道得太多了\">模糊模糊模糊模糊模糊模糊</span> ： 选中文字显示内容</p>\n<h1 id=\"label-标签块\"><a class=\"anchor\" href=\"#label-标签块\">#</a>  <code>label</code>  标签块</h1>\n<p>本功能基于 <code>markdown-it-bracketed-spans</code>  和 <code>markdown-it-attrs</code> <br />\n 有以下颜色可选</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[default]&#123;.label&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[primary]&#123;.label .primary&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[info]&#123;.label .info&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[:heavy_check_mark:success]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[warning]&#123;.label .warning&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[:broken_heart:danger]&#123;.label .danger&#125;</pre></td></tr></table></figure><p><span class=\"label\">default</span><br />\n<span class=\"label primary\">primary</span><br />\n<span class=\"label info\">info</span><br />\n<span class=\"label success\">✔️success</span><br />\n<span class=\"label warning\">warning</span><br />\n<span class=\"label danger\">💔danger</span></p>\n<h1 id=\"note-提醒块\"><a class=\"anchor\" href=\"#note-提醒块\">#</a>  <code>note</code>  提醒块</h1>\n<p>本功能基于 <code>markdown-it-container</code> <br />\n 标签为：</p>\n<table>\n<tbody>\n<tr>\n<td>开始行</td>\n<td><code>:::[风格颜色]</code></td>\n</tr>\n<tr>\n<td>结束行</td>\n<td><code>:::</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:::default</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>默认默认</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:::primary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>基本基本</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>提示提示</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::success</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>成功成功</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>:::warning</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>警告警告</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>:::danger no-icon</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>:::</pre></td></tr></table></figure><div class=\"note default\">\n<p>默认默认</p>\n</div>\n<div class=\"note primary\">\n<p>基本基本</p>\n</div>\n<div class=\"note info\">\n<p>提示提示</p>\n</div>\n<div class=\"note success\">\n<p>成功成功</p>\n</div>\n<div class=\"note warning\">\n<p>警告警告</p>\n</div>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<div class=\"note danger no-icon\">\n<p>没有图标</p>\n</div>\n<h1 id=\"tab标签卡\"><a class=\"anchor\" href=\"#tab标签卡\">#</a>  <code>tab</code>  标签卡</h1>\n<p>本功能基于 <code>markdown-it-container</code> <br />\n 标签为：</p>\n<table>\n<tbody>\n<tr>\n<td>开始行</td>\n<td><code>;;;[同一ID] [标签名称]</code></td>\n</tr>\n<tr>\n<td>结束行</td>\n<td><code>;;;</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>;;;id1 卡片 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>** 加粗 **</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[success]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#123;% links %&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  owner: 霜月琉璃</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  desc: 琉璃的医学 &amp; 编程笔记</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  image: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;amehime&#x2F;shoka@latest&#x2F;images&#x2F;avatar.jpg</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  color: &quot;#e9546b&quot;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#123;% endlinks %&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>;;;id1 卡片 2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>- 第一行</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>- 第二行</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>;;;id2 ②号标签卡片 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>;;;id2 ②号标签卡片 2</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>;;;</pre></td></tr></table></figure><div class=\"tab\" data-id=\"id1\" data-title=\"卡片1\">\n<p>这里是卡片 1 的内容<br />\n<strong>加粗</strong><br />\n<span class=\"label success\"> success</span></p>\n<p><div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div></p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"卡片2\">\n<p>这里是卡片 2 的内容</p>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n<h1 id=\"collapse-折叠块\"><a class=\"anchor\" href=\"#collapse-折叠块\">#</a>  <code>collapse</code>  折叠块</h1>\n<p>本功能基于 <code>markdown-it-container</code> <br />\n 标签为：</p>\n<table>\n<tbody>\n<tr>\n<td>开始行</td>\n<td><code>+++[风格颜色] [标题文字]</code></td>\n</tr>\n<tr>\n<td>结束行</td>\n<td><code>+++</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+++ 默认默认 这里是一段文字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++ 下划线 ++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+++primary 紫色</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>参考信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- 第一行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>- 第二行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>+++info  蓝色</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>;;;id3 卡片 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>;;;id3 卡片 2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>+++success 绿色</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#123;% links %&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  color: &quot;#e9546b&quot;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>&#123;% endlinks %&#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>+++warning 黄色</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>!! 警告警告警告警告警告！！&#123;.bulr&#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>[label]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+++danger 红色</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>[danger]&#123;.label .danger&#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>+++</pre></td></tr></table></figure><details><summary>默认默认 这里是一段文字</summary><div>\n<p><ins>下划线</ins></p>\n</div></details>\n<details class=\"primary\"><summary>紫色</summary><div>\n<div class=\"note info\">\n<p>参考信息</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div></details>\n<details class=\"info\"><summary>蓝色</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片1\">\n<p>这里是卡片 1 的内容<br />\n<ins class=\"wavy\">波浪线</ins></p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n</div></details>\n<details class=\"success\"><summary>绿色</summary><div>\n<p><div class=\"links\"><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div></div></p>\n</div></details>\n<details class=\"warning\"><summary>黄色</summary><div>\n<p><span class=\"spoiler bulr\" title=\"你知道得太多了\">警告警告警告警告警告</span><br />\n<span class=\"label success\"> label</span></p>\n</div></details>\n<details class=\"danger\"><summary>红色</summary><div>\n<p><span class=\"label danger\">danger</span></p>\n</div></details>\n<h1 id=\"tasklist-待办事项\"><a class=\"anchor\" href=\"#tasklist-待办事项\">#</a>  <code>taskList</code>  待办事项</h1>\n<p>本功能基于 <code>markdown-it-task-checkbox</code> 。<br />\n可以利用 <code>markdown-it-attrs</code>  添加风格颜色，只可以给 <code>ul</code>  标签添加，需要新建两行。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>- [ ] 这是一个小叉叉</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- [x] 这是一个红色勾勾</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;.danger&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- [ ] 未完成</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>- [x] 完成</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#123;.primary&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- [ ] 未完成</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>- [x] 默认颜色</pre></td></tr></table></figure><ul class=\"task-list danger\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> 这是一个小叉叉</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 这是一个红色勾勾</label></li>\n</ul>\n<ul class=\"task-list primary\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> 未完成</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\"> 完成</label></li>\n</ul>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\" /><label for=\"cbx_4\"> 未完成</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_5\"> 默认颜色</label></li>\n</ul>\n<h1 id=\"furigana文字注音\"><a class=\"anchor\" href=\"#furigana文字注音\">#</a>  <code>furigana</code>  文字注音</h1>\n<p>原本用于日语汉字假名注音，但别的注音也可以。<br />\n为了兼容性，采用 <code>markdown-it-ruby</code>  的基本格式： <code>&#123;文字^注音&#125;</code> ，并且为了兼容表格，将分隔符由 <code>|</code>  换成了 <code>^</code> 。<br />\n注音分隔基于 <code>furigana-markdown-it</code> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZnVyaWdhbmEtbWFya2Rvd24taXQjcXVpY2stdXNhZ2U=\"> 显示说明看这里</span></p>\n<table>\n<tbody>\n<tr>\n<td><code>&#123;取り返す^とりかえす&#125;</code></td>\n<td><ruby>取<rp> (</rp><rt>と</rt><rp>)</rp> り<rt></rt>返<rp> (</rp><rt>かえ</rt><rp>)</rp> す<rt></rt></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;可愛い犬^か+わい・い・いぬ&#125;</code></td>\n<td><ruby>可愛<rp> (</rp><rt>かわい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;可愛い犬^か・わい・いいぬ&#125;</code></td>\n<td><ruby>可<rp> (</rp><rt>か</rt><rp>)</rp> 愛<rp> (</rp><rt>わい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;アクセラレータ^accelerator&#125;</code></td>\n<td><ruby>アクセラレータ<rp> (</rp><rt>accelerator</rt><rp>)</rp></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;accelerator^アクセラレータ&#125;</code></td>\n<td><ruby>accelerator<rp>(</rp><rt>アクセラレータ</rt><rp>)</rp></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;食べる^たべる&#125;</code></td>\n<td><ruby>食<rp> (</rp><rt>た</rt><rp>)</rp> べる<rt></rt></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;食べる^=たべる&#125;</code></td>\n<td><ruby>食べる<rp> (</rp><rt>たべる</rt><rp>)</rp></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;あいうえお^*&#125;</code></td>\n<td><ruby>あ<rt>●</rt>い<rt>●</rt>う<rt>●</rt>え<rt>●</rt>お<rt>●</rt></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;あいうえお^*❤&#125;</code></td>\n<td><ruby>あ<rt>❤</rt>い<rt>❤</rt>う<rt>❤</rt>え<rt>❤</rt>お<rt>❤</rt></ruby></td>\n</tr>\n<tr>\n<td><code>&#123;常用账号^contact&#125;</code></td>\n<td><ruby>常用账号<rp> (</rp><rt>contact</rt><rp>)</rp></ruby></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"media多媒体\"><a class=\"anchor\" href=\"#media多媒体\">#</a>  <code>media</code>  多媒体</h1>\n<p>本功能基于 Hexo Tag 功能，使用 <code>media</code>  标签，目前可选择两种类型，即 <code>audio</code>  和 <code>video</code> 。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% media audio %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>... 音频列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;% endmedia %&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#123;% media video %&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>... 视频列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#123;% endmedia %&#125;</pre></td></tr></table></figure><p>标签包绕一段 <code>yml</code>  格式的内容，格式与<a href=\"../config/#%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90\">背景音乐</a>的配置类似。</p>\n<p>亦可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>举个栗子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% media audio %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- title: 列表 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  list:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    - https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;playlist?id&#x3D;2943811283</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    - https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;playlist?id&#x3D;2297706586</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- title: 列表 2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  list:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    - https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;playlist?id&#x3D;2031842656</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#123;% endmedia %&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#123;% media video %&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>- name: &quot;测试 1&quot;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  url: https:&#x2F;&#x2F;cdn.kastatic.org&#x2F;ka-youtube-converted&#x2F;O_nY1TM2RZM.mp4&#x2F;O_nY1TM2RZM.mp4#t&#x3D;0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>- name: &quot;测试 2&quot;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  url: https:&#x2F;&#x2F;cdn.kastatic.org&#x2F;ka-youtube-converted&#x2F;O_nY1TM2RZM.mp4&#x2F;O_nY1TM2RZM.mp4#t&#x3D;0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#123;% endmedia %&#125;</pre></td></tr></table></figure><p><div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[{\"title\":\"列表1\",\"list\":[\"https://music.163.com/#/playlist?id=2943811283\",\"https://music.163.com/#/playlist?id=2297706586\"]},{\"title\":\"列表2\",\"list\":[\"https://music.163.com/#/playlist?id=2031842656\"]}]'></div></div></p>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"测试1\",\"url\":\"https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\"},{\"name\":\"测试2\",\"url\":\"https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\"}]'></div></div></p>\n<h1 id=\"math数学公式\"><a class=\"anchor\" href=\"#math数学公式\">#</a>  <code>math</code>  数学公式</h1>\n<p>本功能基于 <code>markdown-it-katex</code> <br />\n 在 Front Matter 中添加 <code>math: true</code>  以支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcv\"> KaTex</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 数学公式显示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>math: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>行内公式：$\\sqrt &#123;3x-1&#125;+(1+x)^2$</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>独立块显示：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$$\\begin &#123;array&#125;&#123;c&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;B&#125;&#125; -\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;E&#125;&#125;&#125;&#123;\\partial t&#125; &amp;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#x3D; \\frac &#123;4\\pi&#125;&#123;c&#125;\\vec &#123;\\mathbf &#123;j&#125;&#125;    \\nabla \\cdot \\vec &#123;\\mathbf &#123;E&#125;&#125; &amp; &#x3D; 4 \\pi \\rho \\\\</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;E&#125;&#125;\\, +\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;B&#125;&#125;&#125;&#123;\\partial t&#125; &amp; &#x3D; \\vec &#123;\\mathbf &#123;0&#125;&#125; \\\\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\\nabla \\cdot \\vec &#123;\\mathbf &#123;B&#125;&#125; &amp; &#x3D; 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\\end &#123;array&#125;$$</pre></td></tr></table></figure><p>行内公式：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mn>3</mn><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msqrt><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sqrt{3x-1}+(1+x)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.17444499999999996em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8655550000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.825555em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17444499999999996em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>独立块显示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover><mo>−</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mfrac><mrow><mn>4</mn><mi>π</mi></mrow><mi>c</mi></mfrac><mover accent=\"true\"><mi mathvariant=\"bold\">j</mi><mo>⃗</mo></mover><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>4</mn><mi>π</mi><mi>ρ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover><mtext> </mtext><mo>+</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mover accent=\"true\"><mn mathvariant=\"bold\">0</mn><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{array}{c}\n\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp;\n= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\\n\n\\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0\n\n\\end{array}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.1938640000000005em;vertical-align:-1.846932em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.072377em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">E</span></span></span></span><span style=\"top:-2.96911em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.9145549999999996em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">E</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.072377em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">B</span></span></span></span><span style=\"top:-2.96911em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-1.585445em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.846932em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9774399999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">j</span></span></span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">E</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-2.9145549999999996em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92744em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">0</span></span></span></span><span style=\"top:-3.21344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-1.585445em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.846932em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathnormal\">ρ</span></span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<h1 id=\"mermaid流程图\"><a class=\"anchor\" href=\"#mermaid流程图\">#</a>  <code>mermaid</code>  流程图</h1>\n<p>本功能基于 <code>markdown-it-mermaid</code> <br />\n 在 Front Matter 中添加 <code>mermaid: true</code>  以支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXJtYWlkLWpzLmdpdGh1Yi5pby9tZXJtYWlkLyMv\"> Mermaid</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 流程图显示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mermaid: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#96;&#96;&#96;mermaid</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>graph LR</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    A [Square Rect] -- Link text --&gt; B ((Circle))</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    A --&gt; C (Round Rect)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    B --&gt; D &#123;Rhombus&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    C --&gt; D</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&#96;&#96;&#96;mermaid</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>sequenceDiagram</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    loop Daily query</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Alice-&gt;&gt;Bob: Hello Bob, how are you?</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        alt is sick</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Bob-&gt;&gt;Alice: Not so good :(</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        else is well</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Bob-&gt;&gt;Alice: Feeling fresh like a daisy</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        end</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        opt Extra response</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            Bob-&gt;&gt;Alice: Thanks for asking</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        end</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    end</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    A<span class=\"token text string\">[Square Rect]</span> <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">Link text</span> <span class=\"token arrow operator\">--></span></span> B<span class=\"token text string\">((Circle))</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    A <span class=\"token arrow operator\">--></span> C<span class=\"token text string\">(Round Rect)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    B <span class=\"token arrow operator\">--></span> D<span class=\"token text string\">&#123;Rhombus&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    C <span class=\"token arrow operator\">--></span> D</pre></td></tr></table></figure><figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sequenceDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">loop</span> Daily query</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Alice<span class=\"token arrow operator\">->></span>Bob<span class=\"token operator\">:</span> Hello Bob, how are you?</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">alt</span> is sick</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Bob<span class=\"token arrow operator\">->></span>Alice<span class=\"token operator\">:</span> Not so good <span class=\"token operator\">:</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">else</span> is well</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Bob<span class=\"token arrow operator\">->></span>Alice<span class=\"token operator\">:</span> Feeling fresh like a daisy</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">opt</span> Extra response</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            Bob<span class=\"token arrow operator\">->></span>Alice<span class=\"token operator\">:</span> Thanks for asking</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr></table></figure>",
            "tags": [
                "Hexo",
                "教程"
            ]
        }
    ]
}